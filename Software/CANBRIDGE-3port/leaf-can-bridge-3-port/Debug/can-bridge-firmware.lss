
can-bridge-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002458  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000192  00802000  00002458  000024ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004b9  00802192  00802192  0000267e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000267e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009aee  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003525  00000000  00000000  0000c51e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d98  00000000  00000000  0000fa43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a80  00000000  00000000  000127dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f18  00000000  00000000  0001325c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ca0  00000000  00000000  00017174  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  00019e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	17 c1       	rjmp	.+558    	; 0x234 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__vector_2>
       c:	13 c1       	rjmp	.+550    	; 0x234 <__bad_interrupt>
       e:	00 00       	nop
      10:	11 c1       	rjmp	.+546    	; 0x234 <__bad_interrupt>
      12:	00 00       	nop
      14:	0f c1       	rjmp	.+542    	; 0x234 <__bad_interrupt>
      16:	00 00       	nop
      18:	0d c1       	rjmp	.+538    	; 0x234 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0b c1       	rjmp	.+534    	; 0x234 <__bad_interrupt>
      1e:	00 00       	nop
      20:	09 c1       	rjmp	.+530    	; 0x234 <__bad_interrupt>
      22:	00 00       	nop
      24:	07 c1       	rjmp	.+526    	; 0x234 <__bad_interrupt>
      26:	00 00       	nop
      28:	05 c1       	rjmp	.+522    	; 0x234 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	03 c1       	rjmp	.+518    	; 0x234 <__bad_interrupt>
      2e:	00 00       	nop
      30:	01 c1       	rjmp	.+514    	; 0x234 <__bad_interrupt>
      32:	00 00       	nop
      34:	ff c0       	rjmp	.+510    	; 0x234 <__bad_interrupt>
      36:	00 00       	nop
      38:	2f c7       	rjmp	.+3678   	; 0xe98 <__vector_14>
      3a:	00 00       	nop
      3c:	fb c0       	rjmp	.+502    	; 0x234 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f9 c0       	rjmp	.+498    	; 0x234 <__bad_interrupt>
      42:	00 00       	nop
      44:	f7 c0       	rjmp	.+494    	; 0x234 <__bad_interrupt>
      46:	00 00       	nop
      48:	f5 c0       	rjmp	.+490    	; 0x234 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f3 c0       	rjmp	.+486    	; 0x234 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_20>
      54:	ef c0       	rjmp	.+478    	; 0x234 <__bad_interrupt>
      56:	00 00       	nop
      58:	ed c0       	rjmp	.+474    	; 0x234 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	eb c0       	rjmp	.+470    	; 0x234 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e9 c0       	rjmp	.+466    	; 0x234 <__bad_interrupt>
      62:	00 00       	nop
      64:	e7 c0       	rjmp	.+462    	; 0x234 <__bad_interrupt>
      66:	00 00       	nop
      68:	e5 c0       	rjmp	.+458    	; 0x234 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e3 c0       	rjmp	.+454    	; 0x234 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e1 c0       	rjmp	.+450    	; 0x234 <__bad_interrupt>
      72:	00 00       	nop
      74:	df c0       	rjmp	.+446    	; 0x234 <__bad_interrupt>
      76:	00 00       	nop
      78:	dd c0       	rjmp	.+442    	; 0x234 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	db c0       	rjmp	.+438    	; 0x234 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d9 c0       	rjmp	.+434    	; 0x234 <__bad_interrupt>
      82:	00 00       	nop
      84:	d7 c0       	rjmp	.+430    	; 0x234 <__bad_interrupt>
      86:	00 00       	nop
      88:	d5 c0       	rjmp	.+426    	; 0x234 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d3 c0       	rjmp	.+422    	; 0x234 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d1 c0       	rjmp	.+418    	; 0x234 <__bad_interrupt>
      92:	00 00       	nop
      94:	cf c0       	rjmp	.+414    	; 0x234 <__bad_interrupt>
      96:	00 00       	nop
      98:	cd c0       	rjmp	.+410    	; 0x234 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cb c0       	rjmp	.+406    	; 0x234 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c9 c0       	rjmp	.+402    	; 0x234 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c7 c0       	rjmp	.+398    	; 0x234 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c5 c0       	rjmp	.+394    	; 0x234 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c3 c0       	rjmp	.+390    	; 0x234 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c1 c0       	rjmp	.+386    	; 0x234 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bf c0       	rjmp	.+382    	; 0x234 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bd c0       	rjmp	.+378    	; 0x234 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	bb c0       	rjmp	.+374    	; 0x234 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b9 c0       	rjmp	.+370    	; 0x234 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b7 c0       	rjmp	.+366    	; 0x234 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b5 c0       	rjmp	.+362    	; 0x234 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b3 c0       	rjmp	.+358    	; 0x234 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b1 c0       	rjmp	.+354    	; 0x234 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	af c0       	rjmp	.+350    	; 0x234 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ad c0       	rjmp	.+346    	; 0x234 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ab c0       	rjmp	.+342    	; 0x234 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a9 c0       	rjmp	.+338    	; 0x234 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a7 c0       	rjmp	.+334    	; 0x234 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a5 c0       	rjmp	.+330    	; 0x234 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a3 c0       	rjmp	.+326    	; 0x234 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a1 c0       	rjmp	.+322    	; 0x234 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	9f c0       	rjmp	.+318    	; 0x234 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9d c0       	rjmp	.+314    	; 0x234 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9b c0       	rjmp	.+310    	; 0x234 <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__vector_64>
     104:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__vector_65>
     108:	95 c0       	rjmp	.+298    	; 0x234 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	93 c0       	rjmp	.+294    	; 0x234 <__bad_interrupt>
     10e:	00 00       	nop
     110:	91 c0       	rjmp	.+290    	; 0x234 <__bad_interrupt>
     112:	00 00       	nop
     114:	8f c0       	rjmp	.+286    	; 0x234 <__bad_interrupt>
     116:	00 00       	nop
     118:	8d c0       	rjmp	.+282    	; 0x234 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8b c0       	rjmp	.+278    	; 0x234 <__bad_interrupt>
     11e:	00 00       	nop
     120:	89 c0       	rjmp	.+274    	; 0x234 <__bad_interrupt>
     122:	00 00       	nop
     124:	87 c0       	rjmp	.+270    	; 0x234 <__bad_interrupt>
     126:	00 00       	nop
     128:	85 c0       	rjmp	.+266    	; 0x234 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	83 c0       	rjmp	.+262    	; 0x234 <__bad_interrupt>
     12e:	00 00       	nop
     130:	81 c0       	rjmp	.+258    	; 0x234 <__bad_interrupt>
     132:	00 00       	nop
     134:	7f c0       	rjmp	.+254    	; 0x234 <__bad_interrupt>
     136:	00 00       	nop
     138:	7d c0       	rjmp	.+250    	; 0x234 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	7b c0       	rjmp	.+246    	; 0x234 <__bad_interrupt>
     13e:	00 00       	nop
     140:	79 c0       	rjmp	.+242    	; 0x234 <__bad_interrupt>
     142:	00 00       	nop
     144:	77 c0       	rjmp	.+238    	; 0x234 <__bad_interrupt>
     146:	00 00       	nop
     148:	75 c0       	rjmp	.+234    	; 0x234 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	73 c0       	rjmp	.+230    	; 0x234 <__bad_interrupt>
     14e:	00 00       	nop
     150:	71 c0       	rjmp	.+226    	; 0x234 <__bad_interrupt>
     152:	00 00       	nop
     154:	6f c0       	rjmp	.+222    	; 0x234 <__bad_interrupt>
     156:	00 00       	nop
     158:	6d c0       	rjmp	.+218    	; 0x234 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	6b c0       	rjmp	.+214    	; 0x234 <__bad_interrupt>
     15e:	00 00       	nop
     160:	69 c0       	rjmp	.+210    	; 0x234 <__bad_interrupt>
     162:	00 00       	nop
     164:	67 c0       	rjmp	.+206    	; 0x234 <__bad_interrupt>
     166:	00 00       	nop
     168:	65 c0       	rjmp	.+202    	; 0x234 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	63 c0       	rjmp	.+198    	; 0x234 <__bad_interrupt>
     16e:	00 00       	nop
     170:	61 c0       	rjmp	.+194    	; 0x234 <__bad_interrupt>
     172:	00 00       	nop
     174:	5f c0       	rjmp	.+190    	; 0x234 <__bad_interrupt>
     176:	00 00       	nop
     178:	5d c0       	rjmp	.+186    	; 0x234 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5b c0       	rjmp	.+182    	; 0x234 <__bad_interrupt>
     17e:	00 00       	nop
     180:	59 c0       	rjmp	.+178    	; 0x234 <__bad_interrupt>
     182:	00 00       	nop
     184:	57 c0       	rjmp	.+174    	; 0x234 <__bad_interrupt>
     186:	00 00       	nop
     188:	55 c0       	rjmp	.+170    	; 0x234 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	53 c0       	rjmp	.+166    	; 0x234 <__bad_interrupt>
     18e:	00 00       	nop
     190:	51 c0       	rjmp	.+162    	; 0x234 <__bad_interrupt>
     192:	00 00       	nop
     194:	4f c0       	rjmp	.+158    	; 0x234 <__bad_interrupt>
     196:	00 00       	nop
     198:	4d c0       	rjmp	.+154    	; 0x234 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4b c0       	rjmp	.+150    	; 0x234 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	49 c0       	rjmp	.+146    	; 0x234 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	47 c0       	rjmp	.+142    	; 0x234 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	45 c0       	rjmp	.+138    	; 0x234 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	43 c0       	rjmp	.+134    	; 0x234 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	41 c0       	rjmp	.+130    	; 0x234 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	3f c0       	rjmp	.+126    	; 0x234 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3d c0       	rjmp	.+122    	; 0x234 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3b c0       	rjmp	.+118    	; 0x234 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	39 c0       	rjmp	.+114    	; 0x234 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	37 c0       	rjmp	.+110    	; 0x234 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	35 c0       	rjmp	.+106    	; 0x234 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	33 c0       	rjmp	.+102    	; 0x234 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	31 c0       	rjmp	.+98     	; 0x234 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	2f c0       	rjmp	.+94     	; 0x234 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2d c0       	rjmp	.+90     	; 0x234 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2b c0       	rjmp	.+86     	; 0x234 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	29 c0       	rjmp	.+82     	; 0x234 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	27 c0       	rjmp	.+78     	; 0x234 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	25 c0       	rjmp	.+74     	; 0x234 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	23 c0       	rjmp	.+70     	; 0x234 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	21 c0       	rjmp	.+66     	; 0x234 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	65 c2       	rjmp	.+1226   	; 0x6c0 <__vector_125>
     1f6:	00 00       	nop
     1f8:	1d c0       	rjmp	.+58     	; 0x234 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	11 e2       	ldi	r17, 0x21	; 33
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e8 e5       	ldi	r30, 0x58	; 88
     210:	f4 e2       	ldi	r31, 0x24	; 36
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a2 39       	cpi	r26, 0x92	; 146
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	26 e2       	ldi	r18, 0x26	; 38
     220:	a2 e9       	ldi	r26, 0x92	; 146
     222:	b1 e2       	ldi	r27, 0x21	; 33
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	ab 34       	cpi	r26, 0x4B	; 75
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	32 d6       	rcall	.+3172   	; 0xe94 <main>
     230:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <_exit>

00000234 <__bad_interrupt>:
     234:	e5 ce       	rjmp	.-566    	; 0x0 <__vectors>

00000236 <calc_crc8>:
#include "helper_functions.h"

const uint8_t	crctable[256] = {0,133,143,10,155,30,20,145,179,54,60,185,40,173,167,34,227,102,108,233,120,253,247,114,80,213,223,90,203,78,68,193,67,198,204,73,216,93,87,210,240,117,127,250,107,238,228,97,160,37,47,170,59,190,180,49,19,150,156,25,136,13,7,130,134,3,9,140,29,152,146,23,53,176,186,63,174,43,33,164,101,224,234,111,254,123,113,244,214,83,89,220,77,200,194,71,197,64,74,207,94,219,209,84,118,243,249,124,237,104,98,231,38,163,169,44,189,56,50,183,149,16,26,159,14,139,129,4,137,12,6,131,18,151,157,24,58,191,181,48,161,36,46,171,106,239,229,96,241,116,126,251,217,92,86,211,66,199,205,72,202,79,69,192,81,212,222,91,121,252,246,115,226,103,109,232,41,172,166,35,178,55,61,184,154,31,21,144,1,132,142,11,15,138,128,5,148,17,27,158,188,57,51,182,39,162,168,45,236,105,99,230,119,242,248,125,95,218,208,85,196,65,75,206,76,201,195,70,215,82,88,221,255,122,112,245,100,225,235,110,175,42,32,165,52,177,187,62,28,153,147,22,135,2,8,141};

//recalculates the CRC-8 with 0x85 poly
void calc_crc8(can_frame_t *frame){
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ec 01       	movw	r28, r24
     23c:	dc 01       	movw	r26, r24
     23e:	13 96       	adiw	r26, 0x03	; 3
     240:	9c 01       	movw	r18, r24
     242:	26 5f       	subi	r18, 0xF6	; 246
     244:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t crc = 0;
     246:	e0 e0       	ldi	r30, 0x00	; 0
	for(uint8_t i = 0; i < 7; i++){
		crc = crctable[(crc ^ ((int) (*frame).data[i])) % 256];
     248:	9d 91       	ld	r25, X+
     24a:	e9 27       	eor	r30, r25
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	e0 5b       	subi	r30, 0xB0	; 176
     250:	ff 4d       	sbci	r31, 0xDF	; 223
     252:	e0 81       	ld	r30, Z
const uint8_t	crctable[256] = {0,133,143,10,155,30,20,145,179,54,60,185,40,173,167,34,227,102,108,233,120,253,247,114,80,213,223,90,203,78,68,193,67,198,204,73,216,93,87,210,240,117,127,250,107,238,228,97,160,37,47,170,59,190,180,49,19,150,156,25,136,13,7,130,134,3,9,140,29,152,146,23,53,176,186,63,174,43,33,164,101,224,234,111,254,123,113,244,214,83,89,220,77,200,194,71,197,64,74,207,94,219,209,84,118,243,249,124,237,104,98,231,38,163,169,44,189,56,50,183,149,16,26,159,14,139,129,4,137,12,6,131,18,151,157,24,58,191,181,48,161,36,46,171,106,239,229,96,241,116,126,251,217,92,86,211,66,199,205,72,202,79,69,192,81,212,222,91,121,252,246,115,226,103,109,232,41,172,166,35,178,55,61,184,154,31,21,144,1,132,142,11,15,138,128,5,148,17,27,158,188,57,51,182,39,162,168,45,236,105,99,230,119,242,248,125,95,218,208,85,196,65,75,206,76,201,195,70,215,82,88,221,255,122,112,245,100,225,235,110,175,42,32,165,52,177,187,62,28,153,147,22,135,2,8,141};

//recalculates the CRC-8 with 0x85 poly
void calc_crc8(can_frame_t *frame){
	uint8_t crc = 0;
	for(uint8_t i = 0; i < 7; i++){
     254:	a2 17       	cp	r26, r18
     256:	b3 07       	cpc	r27, r19
     258:	b9 f7       	brne	.-18     	; 0x248 <calc_crc8+0x12>
		crc = crctable[(crc ^ ((int) (*frame).data[i])) % 256];
	}
	(*frame).data[7] = crc;
     25a:	ea 87       	std	Y+10, r30	; 0x0a
}
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <calc_sum4>:

void calc_sum4(can_frame_t *frame){
     262:	dc 01       	movw	r26, r24
     264:	fc 01       	movw	r30, r24
     266:	33 96       	adiw	r30, 0x03	; 3
     268:	ac 01       	movw	r20, r24
     26a:	46 5f       	subi	r20, 0xF6	; 246
     26c:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t sum = 0;
     26e:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i = 0; i < 7; i++){
		sum += (*frame).data[i] >> 4;
     270:	91 91       	ld	r25, Z+
		sum += (*frame).data[i] & 0xF;
     272:	39 2f       	mov	r19, r25
     274:	32 95       	swap	r19
     276:	3f 70       	andi	r19, 0x0F	; 15
     278:	9f 70       	andi	r25, 0x0F	; 15
     27a:	93 0f       	add	r25, r19
     27c:	29 0f       	add	r18, r25
	(*frame).data[7] = crc;
}

void calc_sum4(can_frame_t *frame){
	uint8_t sum = 0;
	for(uint8_t i = 0; i < 7; i++){
     27e:	e4 17       	cp	r30, r20
     280:	f5 07       	cpc	r31, r21
     282:	b1 f7       	brne	.-20     	; 0x270 <calc_sum4+0xe>
		sum += (*frame).data[i] >> 4;
		sum += (*frame).data[i] & 0xF;
	}
	sum = (sum + 2) & 0xF;
     284:	2e 5f       	subi	r18, 0xFE	; 254
	(*frame).data[7] = ((*frame).data[7] & 0xF0) + sum;
     286:	1a 96       	adiw	r26, 0x0a	; 10
     288:	8c 91       	ld	r24, X
     28a:	1a 97       	sbiw	r26, 0x0a	; 10
     28c:	80 7f       	andi	r24, 0xF0	; 240
     28e:	2f 70       	andi	r18, 0x0F	; 15
     290:	28 0f       	add	r18, r24
     292:	1a 96       	adiw	r26, 0x0a	; 10
     294:	2c 93       	st	X, r18
     296:	08 95       	ret

00000298 <convert_5bc_to_array>:
}


void convert_5bc_to_array(volatile Leaf_2011_5BC_message * src, uint8_t * dest){
     298:	fc 01       	movw	r30, r24
     29a:	db 01       	movw	r26, r22
	dest[0] = (uint8_t) (src->LB_CAPR >> 2);
     29c:	80 81       	ld	r24, Z
     29e:	21 81       	ldd	r18, Z+1	; 0x01
     2a0:	92 2f       	mov	r25, r18
     2a2:	93 70       	andi	r25, 0x03	; 3
     2a4:	95 95       	asr	r25
     2a6:	87 95       	ror	r24
     2a8:	95 95       	asr	r25
     2aa:	87 95       	ror	r24
     2ac:	8c 93       	st	X, r24
	dest[1] = (uint8_t) (((src->LB_CAPR << 6) & 0xC0) | ((src->LB_FULLCAP >> 4) & 0x1F));
     2ae:	80 81       	ld	r24, Z
     2b0:	91 81       	ldd	r25, Z+1	; 0x01
     2b2:	91 81       	ldd	r25, Z+1	; 0x01
     2b4:	96 95       	lsr	r25
     2b6:	96 95       	lsr	r25
     2b8:	62 81       	ldd	r22, Z+2	; 0x02
     2ba:	62 95       	swap	r22
     2bc:	66 0f       	add	r22, r22
     2be:	66 0f       	add	r22, r22
     2c0:	60 7c       	andi	r22, 0xC0	; 192
     2c2:	26 2f       	mov	r18, r22
     2c4:	29 2b       	or	r18, r25
     2c6:	92 81       	ldd	r25, Z+2	; 0x02
     2c8:	96 95       	lsr	r25
     2ca:	96 95       	lsr	r25
     2cc:	39 2f       	mov	r19, r25
     2ce:	33 70       	andi	r19, 0x03	; 3
     2d0:	82 95       	swap	r24
     2d2:	88 0f       	add	r24, r24
     2d4:	88 0f       	add	r24, r24
     2d6:	80 7c       	andi	r24, 0xC0	; 192
     2d8:	35 95       	asr	r19
     2da:	27 95       	ror	r18
     2dc:	35 95       	asr	r19
     2de:	27 95       	ror	r18
     2e0:	35 95       	asr	r19
     2e2:	27 95       	ror	r18
     2e4:	35 95       	asr	r19
     2e6:	27 95       	ror	r18
     2e8:	2f 71       	andi	r18, 0x1F	; 31
     2ea:	28 2b       	or	r18, r24
     2ec:	11 96       	adiw	r26, 0x01	; 1
     2ee:	2c 93       	st	X, r18
     2f0:	11 97       	sbiw	r26, 0x01	; 1
	dest[2] = (uint8_t) (((src->LB_FULLCAP << 4) & 0xF0) | ((src->LB_CAPSEG) & 0x0F));
     2f2:	81 81       	ldd	r24, Z+1	; 0x01
     2f4:	98 2f       	mov	r25, r24
     2f6:	96 95       	lsr	r25
     2f8:	96 95       	lsr	r25
     2fa:	82 81       	ldd	r24, Z+2	; 0x02
     2fc:	82 95       	swap	r24
     2fe:	88 0f       	add	r24, r24
     300:	88 0f       	add	r24, r24
     302:	80 7c       	andi	r24, 0xC0	; 192
     304:	89 2b       	or	r24, r25
     306:	92 81       	ldd	r25, Z+2	; 0x02
     308:	92 81       	ldd	r25, Z+2	; 0x02
     30a:	92 95       	swap	r25
     30c:	9f 70       	andi	r25, 0x0F	; 15
     30e:	82 95       	swap	r24
     310:	80 7f       	andi	r24, 0xF0	; 240
     312:	89 2b       	or	r24, r25
     314:	12 96       	adiw	r26, 0x02	; 2
     316:	8c 93       	st	X, r24
     318:	12 97       	sbiw	r26, 0x02	; 2
	dest[3] = (uint8_t) (src->LB_AVET);
     31a:	83 81       	ldd	r24, Z+3	; 0x03
     31c:	13 96       	adiw	r26, 0x03	; 3
     31e:	8c 93       	st	X, r24
     320:	13 97       	sbiw	r26, 0x03	; 3
	dest[4] = (uint8_t) (((src->LB_SOH << 1) & 0xFE) | ((src->LB_CAPSW) & 1));
     322:	84 81       	ldd	r24, Z+4	; 0x04
     324:	94 81       	ldd	r25, Z+4	; 0x04
     326:	97 fb       	bst	r25, 7
     328:	99 27       	eor	r25, r25
     32a:	90 f9       	bld	r25, 0
     32c:	88 0f       	add	r24, r24
     32e:	89 2b       	or	r24, r25
     330:	14 96       	adiw	r26, 0x04	; 4
     332:	8c 93       	st	X, r24
     334:	14 97       	sbiw	r26, 0x04	; 4
	dest[5] = (uint8_t) (((src->LB_RLIMIT << 5) & 0xE0) | ((src->LB_CAPBALCOMP << 2) & 4) | ((src->LB_RCHGTCON >> 3) & 3));
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	65 81       	ldd	r22, Z+5	; 0x05
     33a:	95 81       	ldd	r25, Z+5	; 0x05
     33c:	29 2f       	mov	r18, r25
     33e:	22 95       	swap	r18
     340:	26 95       	lsr	r18
     342:	26 95       	lsr	r18
     344:	23 70       	andi	r18, 0x03	; 3
     346:	86 81       	ldd	r24, Z+6	; 0x06
     348:	87 70       	andi	r24, 0x07	; 7
     34a:	88 0f       	add	r24, r24
     34c:	88 0f       	add	r24, r24
     34e:	98 2f       	mov	r25, r24
     350:	92 2b       	or	r25, r18
     352:	83 2f       	mov	r24, r19
     354:	82 95       	swap	r24
     356:	88 0f       	add	r24, r24
     358:	80 7e       	andi	r24, 0xE0	; 224
     35a:	65 fb       	bst	r22, 5
     35c:	44 27       	eor	r20, r20
     35e:	40 f9       	bld	r20, 0
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	44 0f       	add	r20, r20
     364:	55 1f       	adc	r21, r21
     366:	44 0f       	add	r20, r20
     368:	55 1f       	adc	r21, r21
     36a:	44 70       	andi	r20, 0x04	; 4
     36c:	48 2b       	or	r20, r24
     36e:	89 2f       	mov	r24, r25
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	95 95       	asr	r25
     374:	87 95       	ror	r24
     376:	95 95       	asr	r25
     378:	87 95       	ror	r24
     37a:	95 95       	asr	r25
     37c:	87 95       	ror	r24
     37e:	83 70       	andi	r24, 0x03	; 3
     380:	84 2b       	or	r24, r20
     382:	15 96       	adiw	r26, 0x05	; 5
     384:	8c 93       	st	X, r24
     386:	15 97       	sbiw	r26, 0x05	; 5
	dest[6] = (uint8_t) (((src->LB_RCHGTCON << 5) & 0xE0) | ((src->LB_RCHGTIM >> 8) & 0x1F));
     388:	85 81       	ldd	r24, Z+5	; 0x05
     38a:	98 2f       	mov	r25, r24
     38c:	92 95       	swap	r25
     38e:	96 95       	lsr	r25
     390:	96 95       	lsr	r25
     392:	93 70       	andi	r25, 0x03	; 3
     394:	86 81       	ldd	r24, Z+6	; 0x06
     396:	87 70       	andi	r24, 0x07	; 7
     398:	88 0f       	add	r24, r24
     39a:	88 0f       	add	r24, r24
     39c:	89 2b       	or	r24, r25
     39e:	96 81       	ldd	r25, Z+6	; 0x06
     3a0:	97 81       	ldd	r25, Z+7	; 0x07
     3a2:	97 81       	ldd	r25, Z+7	; 0x07
     3a4:	82 95       	swap	r24
     3a6:	88 0f       	add	r24, r24
     3a8:	80 7e       	andi	r24, 0xE0	; 224
     3aa:	96 95       	lsr	r25
     3ac:	96 95       	lsr	r25
     3ae:	96 95       	lsr	r25
     3b0:	89 2b       	or	r24, r25
     3b2:	16 96       	adiw	r26, 0x06	; 6
     3b4:	8c 93       	st	X, r24
     3b6:	16 97       	sbiw	r26, 0x06	; 6
	dest[7] = (uint8_t) (src->LB_RCHGTIM);
     3b8:	86 81       	ldd	r24, Z+6	; 0x06
     3ba:	98 2f       	mov	r25, r24
     3bc:	96 95       	lsr	r25
     3be:	96 95       	lsr	r25
     3c0:	96 95       	lsr	r25
     3c2:	87 81       	ldd	r24, Z+7	; 0x07
     3c4:	82 95       	swap	r24
     3c6:	88 0f       	add	r24, r24
     3c8:	80 7e       	andi	r24, 0xE0	; 224
     3ca:	89 2b       	or	r24, r25
     3cc:	97 81       	ldd	r25, Z+7	; 0x07
     3ce:	17 96       	adiw	r26, 0x07	; 7
     3d0:	8c 93       	st	X, r24
     3d2:	08 95       	ret

000003d4 <convert_array_to_5bc>:
}

void convert_array_to_5bc(volatile Leaf_2011_5BC_message * dest, uint8_t * src){
     3d4:	fc 01       	movw	r30, r24
	dest->LB_CAPR = (src[0] << 2) | (src[1] & 0xC0 >> 6);
     3d6:	db 01       	movw	r26, r22
     3d8:	2c 91       	ld	r18, X
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	22 0f       	add	r18, r18
     3de:	33 1f       	adc	r19, r19
     3e0:	22 0f       	add	r18, r18
     3e2:	33 1f       	adc	r19, r19
     3e4:	11 96       	adiw	r26, 0x01	; 1
     3e6:	8c 91       	ld	r24, X
     3e8:	83 70       	andi	r24, 0x03	; 3
     3ea:	28 2b       	or	r18, r24
     3ec:	20 83       	st	Z, r18
     3ee:	93 2f       	mov	r25, r19
     3f0:	93 70       	andi	r25, 0x03	; 3
     3f2:	81 81       	ldd	r24, Z+1	; 0x01
     3f4:	8c 7f       	andi	r24, 0xFC	; 252
     3f6:	89 2b       	or	r24, r25
     3f8:	81 83       	std	Z+1, r24	; 0x01
     3fa:	08 95       	ret

000003fc <convert_5c0_to_array>:
}

void convert_5c0_to_array(volatile Leaf_2011_5C0_message * src, uint8_t * dest){
     3fc:	fc 01       	movw	r30, r24
     3fe:	db 01       	movw	r26, r22
	dest[0] = (src->LB_HIS_DATA_SW << 6) | src->LB_HIS_HLVOL_TIMS;
     400:	80 81       	ld	r24, Z
     402:	90 81       	ld	r25, Z
     404:	92 95       	swap	r25
     406:	9f 70       	andi	r25, 0x0F	; 15
     408:	82 95       	swap	r24
     40a:	88 0f       	add	r24, r24
     40c:	88 0f       	add	r24, r24
     40e:	80 7c       	andi	r24, 0xC0	; 192
     410:	89 2b       	or	r24, r25
     412:	8c 93       	st	X, r24
	dest[1] = src->LB_HIS_TEMP_WUP << 1;
     414:	81 81       	ldd	r24, Z+1	; 0x01
     416:	88 0f       	add	r24, r24
     418:	11 96       	adiw	r26, 0x01	; 1
     41a:	8c 93       	st	X, r24
     41c:	11 97       	sbiw	r26, 0x01	; 1
	dest[2] = src->LB_HIS_TEMP << 1;
     41e:	82 81       	ldd	r24, Z+2	; 0x02
     420:	88 0f       	add	r24, r24
     422:	12 96       	adiw	r26, 0x02	; 2
     424:	8c 93       	st	X, r24
     426:	12 97       	sbiw	r26, 0x02	; 2
	dest[3] = src->LB_HIS_INTG_CUR;
     428:	83 81       	ldd	r24, Z+3	; 0x03
     42a:	13 96       	adiw	r26, 0x03	; 3
     42c:	8c 93       	st	X, r24
     42e:	13 97       	sbiw	r26, 0x03	; 3
	dest[4] = src->LB_HIS_DEG_REGI << 1;
     430:	84 81       	ldd	r24, Z+4	; 0x04
     432:	88 0f       	add	r24, r24
     434:	14 96       	adiw	r26, 0x04	; 4
     436:	8c 93       	st	X, r24
     438:	14 97       	sbiw	r26, 0x04	; 4
	dest[5] = src->LB_HIS_CELL_VOL << 2;
     43a:	85 81       	ldd	r24, Z+5	; 0x05
     43c:	88 0f       	add	r24, r24
     43e:	88 0f       	add	r24, r24
     440:	15 96       	adiw	r26, 0x05	; 5
     442:	8c 93       	st	X, r24
     444:	15 97       	sbiw	r26, 0x05	; 5
	dest[7] = src->LB_DTC;
     446:	87 81       	ldd	r24, Z+7	; 0x07
     448:	17 96       	adiw	r26, 0x07	; 7
     44a:	8c 93       	st	X, r24
     44c:	08 95       	ret

0000044e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     44e:	08 95       	ret

00000450 <Endpoint_SelectEndpoint>:
			return false;
		}
	}

	return true;
}
     450:	80 93 c3 21 	sts	0x21C3, r24	; 0x8021c3 <USB_Endpoint_SelectedEndpoint>
     454:	28 2f       	mov	r18, r24
     456:	2f 70       	andi	r18, 0x0F	; 15
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	40 91 c6 04 	lds	r20, 0x04C6	; 0x8004c6 <__TEXT_REGION_LENGTH__+0x7004c6>
     45e:	50 91 c7 04 	lds	r21, 0x04C7	; 0x8004c7 <__TEXT_REGION_LENGTH__+0x7004c7>
     462:	88 23       	and	r24, r24
     464:	e4 f4       	brge	.+56     	; 0x49e <Endpoint_SelectEndpoint+0x4e>
     466:	64 e8       	ldi	r22, 0x84	; 132
     468:	62 9f       	mul	r22, r18
     46a:	c0 01       	movw	r24, r0
     46c:	63 9f       	mul	r22, r19
     46e:	90 0d       	add	r25, r0
     470:	11 24       	eor	r1, r1
     472:	8a 5f       	subi	r24, 0xFA	; 250
     474:	9d 4d       	sbci	r25, 0xDD	; 221
     476:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <USB_Endpoint_SelectedFIFO>
     47a:	90 93 c0 21 	sts	0x21C0, r25	; 0x8021c0 <USB_Endpoint_SelectedFIFO+0x1>
     47e:	c9 01       	movw	r24, r18
     480:	82 95       	swap	r24
     482:	92 95       	swap	r25
     484:	90 7f       	andi	r25, 0xF0	; 240
     486:	98 27       	eor	r25, r24
     488:	80 7f       	andi	r24, 0xF0	; 240
     48a:	98 27       	eor	r25, r24
     48c:	08 96       	adiw	r24, 0x08	; 8
     48e:	9a 01       	movw	r18, r20
     490:	28 0f       	add	r18, r24
     492:	39 1f       	adc	r19, r25
     494:	20 93 c1 21 	sts	0x21C1, r18	; 0x8021c1 <USB_Endpoint_SelectedHandle>
     498:	30 93 c2 21 	sts	0x21C2, r19	; 0x8021c2 <USB_Endpoint_SelectedHandle+0x1>
     49c:	08 95       	ret
     49e:	64 e8       	ldi	r22, 0x84	; 132
     4a0:	62 9f       	mul	r22, r18
     4a2:	c0 01       	movw	r24, r0
     4a4:	63 9f       	mul	r22, r19
     4a6:	90 0d       	add	r25, r0
     4a8:	11 24       	eor	r1, r1
     4aa:	8c 53       	subi	r24, 0x3C	; 60
     4ac:	9e 4d       	sbci	r25, 0xDE	; 222
     4ae:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <USB_Endpoint_SelectedFIFO>
     4b2:	90 93 c0 21 	sts	0x21C0, r25	; 0x8021c0 <USB_Endpoint_SelectedFIFO+0x1>
     4b6:	22 95       	swap	r18
     4b8:	32 95       	swap	r19
     4ba:	30 7f       	andi	r19, 0xF0	; 240
     4bc:	32 27       	eor	r19, r18
     4be:	20 7f       	andi	r18, 0xF0	; 240
     4c0:	32 27       	eor	r19, r18
     4c2:	24 0f       	add	r18, r20
     4c4:	35 1f       	adc	r19, r21
     4c6:	20 93 c1 21 	sts	0x21C1, r18	; 0x8021c1 <USB_Endpoint_SelectedHandle>
     4ca:	30 93 c2 21 	sts	0x21C2, r19	; 0x8021c2 <USB_Endpoint_SelectedHandle+0x1>
     4ce:	08 95       	ret

000004d0 <Endpoint_ConfigureEndpoint_PRV>:
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	d8 2f       	mov	r29, r24
     4d8:	16 2f       	mov	r17, r22
     4da:	c4 2f       	mov	r28, r20
     4dc:	b9 df       	rcall	.-142    	; 0x450 <Endpoint_SelectEndpoint>
     4de:	e0 91 c1 21 	lds	r30, 0x21C1	; 0x8021c1 <USB_Endpoint_SelectedHandle>
     4e2:	f0 91 c2 21 	lds	r31, 0x21C2	; 0x8021c2 <USB_Endpoint_SelectedHandle+0x1>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	e0 91 c1 21 	lds	r30, 0x21C1	; 0x8021c1 <USB_Endpoint_SelectedHandle>
     4ec:	f0 91 c2 21 	lds	r31, 0x21C2	; 0x8021c2 <USB_Endpoint_SelectedHandle+0x1>
     4f0:	dd 23       	and	r29, r29
     4f2:	a4 f0       	brlt	.+40     	; 0x51c <Endpoint_ConfigureEndpoint_PRV+0x4c>
     4f4:	10 82       	st	Z, r1
     4f6:	e0 91 c1 21 	lds	r30, 0x21C1	; 0x8021c1 <USB_Endpoint_SelectedHandle>
     4fa:	f0 91 c2 21 	lds	r31, 0x21C2	; 0x8021c2 <USB_Endpoint_SelectedHandle+0x1>
     4fe:	11 83       	std	Z+1, r17	; 0x01
     500:	e0 91 c1 21 	lds	r30, 0x21C1	; 0x8021c1 <USB_Endpoint_SelectedHandle>
     504:	f0 91 c2 21 	lds	r31, 0x21C2	; 0x8021c2 <USB_Endpoint_SelectedHandle+0x1>
     508:	12 82       	std	Z+2, r1	; 0x02
     50a:	13 82       	std	Z+3, r1	; 0x03
     50c:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <USB_Endpoint_SelectedFIFO>
     510:	90 91 c0 21 	lds	r25, 0x21C0	; 0x8021c0 <USB_Endpoint_SelectedFIFO+0x1>
     514:	84 83       	std	Z+4, r24	; 0x04
     516:	95 83       	std	Z+5, r25	; 0x05
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	14 c0       	rjmp	.+40     	; 0x544 <Endpoint_ConfigureEndpoint_PRV+0x74>
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	80 83       	st	Z, r24
     520:	e0 91 c1 21 	lds	r30, 0x21C1	; 0x8021c1 <USB_Endpoint_SelectedHandle>
     524:	f0 91 c2 21 	lds	r31, 0x21C2	; 0x8021c2 <USB_Endpoint_SelectedHandle+0x1>
     528:	11 83       	std	Z+1, r17	; 0x01
     52a:	e0 91 c1 21 	lds	r30, 0x21C1	; 0x8021c1 <USB_Endpoint_SelectedHandle>
     52e:	f0 91 c2 21 	lds	r31, 0x21C2	; 0x8021c2 <USB_Endpoint_SelectedHandle+0x1>
     532:	12 82       	std	Z+2, r1	; 0x02
     534:	13 82       	std	Z+3, r1	; 0x03
     536:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <USB_Endpoint_SelectedFIFO>
     53a:	90 91 c0 21 	lds	r25, 0x21C0	; 0x8021c0 <USB_Endpoint_SelectedFIFO+0x1>
     53e:	84 83       	std	Z+4, r24	; 0x04
     540:	95 83       	std	Z+5, r25	; 0x05
     542:	4c 2f       	mov	r20, r28
     544:	fc 01       	movw	r30, r24
     546:	e0 5c       	subi	r30, 0xC0	; 192
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	40 83       	st	Z, r20
     54c:	31 96       	adiw	r30, 0x01	; 1
     54e:	10 82       	st	Z, r1
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	08 95       	ret

0000055a <Endpoint_ClearEndpoints>:

	return true;
}

void Endpoint_ClearEndpoints(void)
{
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
     55e:	a0 ec       	ldi	r26, 0xC0	; 192
     560:	b4 e0       	ldi	r27, 0x04	; 4
     562:	16 96       	adiw	r26, 0x06	; 6
     564:	ed 91       	ld	r30, X+
     566:	fc 91       	ld	r31, X
     568:	17 97       	sbiw	r26, 0x07	; 7
     56a:	c9 01       	movw	r24, r18
     56c:	82 95       	swap	r24
     56e:	92 95       	swap	r25
     570:	90 7f       	andi	r25, 0xF0	; 240
     572:	98 27       	eor	r25, r24
     574:	80 7f       	andi	r24, 0xF0	; 240
     576:	98 27       	eor	r25, r24
     578:	e8 0f       	add	r30, r24
     57a:	f9 1f       	adc	r31, r25
     57c:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
     57e:	16 96       	adiw	r26, 0x06	; 6
     580:	4d 91       	ld	r20, X+
     582:	5c 91       	ld	r21, X
     584:	17 97       	sbiw	r26, 0x07	; 7
     586:	fa 01       	movw	r30, r20
     588:	e8 0f       	add	r30, r24
     58a:	f9 1f       	adc	r31, r25
     58c:	11 82       	std	Z+1, r1	; 0x01
     58e:	2f 5f       	subi	r18, 0xFF	; 255
     590:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     592:	25 30       	cpi	r18, 0x05	; 5
     594:	31 05       	cpc	r19, r1
     596:	29 f7       	brne	.-54     	; 0x562 <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
     598:	08 95       	ret

0000059a <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
	#if defined(USB_DEVICE_OPT_FULLSPEED)
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
     59a:	80 91 ab 24 	lds	r24, 0x24AB	; 0x8024ab <USB_Options>
     59e:	80 ff       	sbrs	r24, 0
     5a0:	04 c0       	rjmp	.+8      	; 0x5aa <USB_ResetInterface+0x10>
	  CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
     5a2:	88 e3       	ldi	r24, 0x38	; 56
     5a4:	80 93 44 00 	sts	0x0044, r24	; 0x800044 <__TEXT_REGION_LENGTH__+0x700044>
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <USB_ResetInterface+0x14>
	else
	  CLK.USBCTRL = (((F_USB / 48000000) - 1) << CLK_USBPSDIV_gp);
     5aa:	10 92 44 00 	sts	0x0044, r1	; 0x800044 <__TEXT_REGION_LENGTH__+0x700044>
	#else
	CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	#endif

	if (USB_Options & USB_OPT_PLLCLKSRC)
     5ae:	80 91 ab 24 	lds	r24, 0x24AB	; 0x8024ab <USB_Options>
     5b2:	83 ff       	sbrs	r24, 3
     5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <USB_ResetInterface+0x28>
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
     5b6:	e0 e4       	ldi	r30, 0x40	; 64
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	84 81       	ldd	r24, Z+4	; 0x04
     5bc:	81 60       	ori	r24, 0x01	; 1
     5be:	84 83       	std	Z+4, r24	; 0x04
     5c0:	05 c0       	rjmp	.+10     	; 0x5cc <USB_ResetInterface+0x32>
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);
     5c2:	e0 e4       	ldi	r30, 0x40	; 64
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	84 81       	ldd	r24, Z+4	; 0x04
     5c8:	83 60       	ori	r24, 0x03	; 3
     5ca:	84 83       	std	Z+4, r24	; 0x04

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
     5cc:	6c d0       	rcall	.+216    	; 0x6a6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     5ce:	72 d0       	rcall	.+228    	; 0x6b4 <USB_INT_ClearAllInterrupts>
     5d0:	e0 ec       	ldi	r30, 0xC0	; 192
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
     5d2:	f4 e0       	ldi	r31, 0x04	; 4
     5d4:	80 81       	ld	r24, Z
     5d6:	8f 77       	andi	r24, 0x7F	; 127
     5d8:	80 83       	st	Z, r24
     5da:	80 81       	ld	r24, Z
				USB.CTRLA |=  USB_ENABLE_bm;
     5dc:	80 68       	ori	r24, 0x80	; 128
     5de:	80 83       	st	Z, r24
     5e0:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     5e4:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     5e8:	10 92 b4 21 	sts	0x21B4, r1	; 0x8021b4 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     5ec:	10 92 b3 21 	sts	0x21B3, r1	; 0x8021b3 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     5f0:	80 91 ab 24 	lds	r24, 0x24AB	; 0x8024ab <USB_Options>
		#endif
	}
	#endif
	#endif

	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
     5f4:	80 ff       	sbrs	r24, 0
     5f6:	04 c0       	rjmp	.+8      	; 0x600 <USB_ResetInterface+0x66>
     5f8:	80 81       	ld	r24, Z
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_Device_SetLowSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetLowSpeed(void)
			{
				USB.CTRLA &= ~USB_SPEED_bm;
     5fa:	8f 7b       	andi	r24, 0xBF	; 191
     5fc:	80 83       	st	Z, r24
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <USB_ResetInterface+0x70>
     600:	e0 ec       	ldi	r30, 0xC0	; 192
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
     602:	f4 e0       	ldi	r31, 0x04	; 4
     604:	80 81       	ld	r24, Z
     606:	80 64       	ori	r24, 0x40	; 64
     608:	80 83       	st	Z, r24
     60a:	48 e0       	ldi	r20, 0x08	; 8
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
     60c:	68 e4       	ldi	r22, 0x48	; 72
     60e:	80 e8       	ldi	r24, 0x80	; 128
     610:	5f df       	rcall	.-322    	; 0x4d0 <Endpoint_ConfigureEndpoint_PRV>
     612:	48 e0       	ldi	r20, 0x08	; 8

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
     614:	68 e4       	ldi	r22, 0x48	; 72
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	5b df       	rcall	.-330    	; 0x4d0 <Endpoint_ConfigureEndpoint_PRV>
     61a:	e0 ec       	ldi	r30, 0xC0	; 192
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
     61c:	f4 e0       	ldi	r31, 0x04	; 4
     61e:	80 85       	ldd	r24, Z+8	; 0x08
     620:	80 64       	ori	r24, 0x40	; 64
     622:	80 87       	std	Z+8, r24	; 0x08
     624:	81 81       	ldd	r24, Z+1	; 0x01
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
     626:	81 60       	ori	r24, 0x01	; 1
     628:	81 83       	std	Z+1, r24	; 0x01
     62a:	08 95       	ret

0000062c <USB_Init>:
     62c:	cf 93       	push	r28

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     62e:	df 93       	push	r29
	#if !defined(USE_STATIC_OPTIONS)
	USB_Options = Options;
     630:	80 93 ab 24 	sts	0x24AB, r24	; 0x8024ab <USB_Options>
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
     634:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
     636:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
     638:	c0 ec       	ldi	r28, 0xC0	; 192
     63a:	d1 e0       	ldi	r29, 0x01	; 1
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	8a 87       	std	Y+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
     640:	ea e1       	ldi	r30, 0x1A	; 26
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	e4 91       	lpm	r30, Z
     646:	a0 ec       	ldi	r26, 0xC0	; 192
     648:	b4 e0       	ldi	r27, 0x04	; 4
     64a:	da 96       	adiw	r26, 0x3a	; 58
     64c:	ec 93       	st	X, r30
     64e:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
     650:	eb e1       	ldi	r30, 0x1B	; 27
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	e4 91       	lpm	r30, Z
     656:	db 96       	adiw	r26, 0x3b	; 59
     658:	ec 93       	st	X, r30
     65a:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
     65c:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
     65e:	89 e5       	ldi	r24, 0x59	; 89
     660:	94 e2       	ldi	r25, 0x24	; 36
     662:	8e 7f       	andi	r24, 0xFE	; 254
     664:	16 96       	adiw	r26, 0x06	; 6
     666:	8d 93       	st	X+, r24
     668:	9c 93       	st	X, r25
     66a:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
     66c:	84 e1       	ldi	r24, 0x14	; 20
     66e:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
     670:	80 91 ab 24 	lds	r24, 0x24AB	; 0x8024ab <USB_Options>
     674:	82 ff       	sbrs	r24, 2
     676:	04 c0       	rjmp	.+8      	; 0x680 <USB_Init+0x54>
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
     67e:	0b c0       	rjmp	.+22     	; 0x696 <USB_Init+0x6a>
	else if ((USB_Options & USB_OPT_BUSEVENT_PRIMED) == USB_OPT_BUSEVENT_PRIMED)
     680:	80 91 ab 24 	lds	r24, 0x24AB	; 0x8024ab <USB_Options>
     684:	81 ff       	sbrs	r24, 1
     686:	04 c0       	rjmp	.+8      	; 0x690 <USB_Init+0x64>
	  USB.INTCTRLA = (2 << USB_INTLVL_gp);
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
     68e:	03 c0       	rjmp	.+6      	; 0x696 <USB_Init+0x6a>
	else
	  USB.INTCTRLA = (1 << USB_INTLVL_gp);
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
     696:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <USB_IsInitialized>

	USB_ResetInterface();
     69e:	7d df       	rcall	.-262    	; 0x59a <USB_ResetInterface>
}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
     6a6:	e0 ec       	ldi	r30, 0xC0	; 192
     6a8:	f4 e0       	ldi	r31, 0x04	; 4
     6aa:	80 85       	ldd	r24, Z+8	; 0x08
     6ac:	83 70       	andi	r24, 0x03	; 3
     6ae:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
     6b0:	11 86       	std	Z+9, r1	; 0x09
     6b2:	08 95       	ret

000006b4 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
     6b4:	e0 ec       	ldi	r30, 0xC0	; 192
     6b6:	f4 e0       	ldi	r31, 0x04	; 4
     6b8:	8f ef       	ldi	r24, 0xFF	; 255
     6ba:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
     6bc:	84 87       	std	Z+12, r24	; 0x0c
     6be:	08 95       	ret

000006c0 <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
     6c0:	1f 92       	push	r1
     6c2:	0f 92       	push	r0
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	0f 92       	push	r0
     6c8:	11 24       	eor	r1, r1
     6ca:	2f 93       	push	r18
     6cc:	3f 93       	push	r19
     6ce:	4f 93       	push	r20
     6d0:	5f 93       	push	r21
     6d2:	6f 93       	push	r22
     6d4:	7f 93       	push	r23
     6d6:	8f 93       	push	r24
     6d8:	9f 93       	push	r25
     6da:	af 93       	push	r26
     6dc:	bf 93       	push	r27
     6de:	ef 93       	push	r30
     6e0:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
     6e2:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     6e6:	88 23       	and	r24, r24
     6e8:	44 f4       	brge	.+16     	; 0x6fa <__vector_125+0x3a>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
     6ea:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
     6ee:	88 23       	and	r24, r24
     6f0:	24 f4       	brge	.+8      	; 0x6fa <__vector_125+0x3a>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
     6f2:	80 e8       	ldi	r24, 0x80	; 128
     6f4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     6f8:	aa de       	rcall	.-684    	; 0x44e <USB_Event_Stub>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
     6fa:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
     6fe:	86 ff       	sbrs	r24, 6
     700:	06 c0       	rjmp	.+12     	; 0x70e <__vector_125+0x4e>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
     702:	80 e4       	ldi	r24, 0x40	; 64
     704:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     708:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     70c:	a0 de       	rcall	.-704    	; 0x44e <USB_Event_Stub>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
     70e:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
     712:	85 ff       	sbrs	r24, 5
     714:	15 c0       	rjmp	.+42     	; 0x740 <__vector_125+0x80>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
     716:	80 e2       	ldi	r24, 0x20	; 32
     718:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
     71c:	80 91 b2 21 	lds	r24, 0x21B2	; 0x8021b2 <USB_Device_ConfigurationNumber>
     720:	88 23       	and	r24, r24
     722:	21 f0       	breq	.+8      	; 0x72c <__vector_125+0x6c>
		  USB_DeviceState = DEVICE_STATE_Configured;
     724:	84 e0       	ldi	r24, 0x04	; 4
     726:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <USB_DeviceState>
     72a:	09 c0       	rjmp	.+18     	; 0x73e <__vector_125+0x7e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
     72c:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     730:	81 11       	cpse	r24, r1
     732:	02 c0       	rjmp	.+4      	; 0x738 <__vector_125+0x78>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	01 c0       	rjmp	.+2      	; 0x73a <__vector_125+0x7a>
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <USB_DeviceState>

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     73e:	87 de       	rcall	.-754    	; 0x44e <USB_Event_Stub>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
     740:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
     744:	84 ff       	sbrs	r24, 4
     746:	14 c0       	rjmp	.+40     	; 0x770 <__vector_125+0xb0>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
     748:	e0 ec       	ldi	r30, 0xC0	; 192
     74a:	f4 e0       	ldi	r31, 0x04	; 4
     74c:	80 e1       	ldi	r24, 0x10	; 16
     74e:	82 87       	std	Z+10, r24	; 0x0a
	{
		
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     756:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <USB_Device_ConfigurationNumber>

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
     75a:	13 82       	std	Z+3, r1	; 0x03
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
     75c:	fe de       	rcall	.-516    	; 0x55a <Endpoint_ClearEndpoints>
     75e:	48 e0       	ldi	r20, 0x08	; 8
     760:	68 e4       	ldi	r22, 0x48	; 72
     762:	80 e8       	ldi	r24, 0x80	; 128

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
     764:	b5 de       	rcall	.-662    	; 0x4d0 <Endpoint_ConfigureEndpoint_PRV>
     766:	48 e0       	ldi	r20, 0x08	; 8
     768:	68 e4       	ldi	r22, 0x48	; 72
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	b1 de       	rcall	.-670    	; 0x4d0 <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
     76e:	6f de       	rcall	.-802    	; 0x44e <USB_Event_Stub>
     770:	ff 91       	pop	r31
	}
}
     772:	ef 91       	pop	r30
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	7f 91       	pop	r23
     77e:	6f 91       	pop	r22
     780:	5f 91       	pop	r21
     782:	4f 91       	pop	r20
     784:	3f 91       	pop	r19
     786:	2f 91       	pop	r18
     788:	0f 90       	pop	r0
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <spi0_write>:
     792:	e0 ec       	ldi	r30, 0xC0	; 192
	can3_unstandby();
	return 1;
}

//reset
void all_reset(){	can1_reset();can2_reset();can3_reset();}
     794:	f8 e0       	ldi	r31, 0x08	; 8
     796:	92 81       	ldd	r25, Z+2	; 0x02
     798:	92 83       	std	Z+2, r25	; 0x02
     79a:	83 83       	std	Z+3, r24	; 0x03
     79c:	82 81       	ldd	r24, Z+2	; 0x02
     79e:	88 23       	and	r24, r24
     7a0:	ec f7       	brge	.-6      	; 0x79c <spi0_write+0xa>
     7a2:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     7a6:	08 95       	ret

000007a8 <can1_reset>:
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	c0 e4       	ldi	r28, 0x40	; 64
     7b0:	d6 e0       	ldi	r29, 0x06	; 6
     7b2:	10 e1       	ldi	r17, 0x10	; 16
     7b4:	1e 83       	std	Y+6, r17	; 0x06
     7b6:	80 ec       	ldi	r24, 0xC0	; 192
     7b8:	ec df       	rcall	.-40     	; 0x792 <spi0_write>
     7ba:	1d 83       	std	Y+5, r17	; 0x05
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	08 95       	ret

000007c4 <can2_reset>:
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	c0 e6       	ldi	r28, 0x60	; 96
     7cc:	d6 e0       	ldi	r29, 0x06	; 6
     7ce:	10 e1       	ldi	r17, 0x10	; 16
     7d0:	1e 83       	std	Y+6, r17	; 0x06
     7d2:	80 ec       	ldi	r24, 0xC0	; 192
     7d4:	de df       	rcall	.-68     	; 0x792 <spi0_write>
     7d6:	1d 83       	std	Y+5, r17	; 0x05
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	08 95       	ret

000007e0 <can3_reset>:
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	c0 e2       	ldi	r28, 0x20	; 32
     7e8:	d6 e0       	ldi	r29, 0x06	; 6
     7ea:	18 e0       	ldi	r17, 0x08	; 8
     7ec:	1e 83       	std	Y+6, r17	; 0x06
     7ee:	80 ec       	ldi	r24, 0xC0	; 192
     7f0:	d0 df       	rcall	.-96     	; 0x792 <spi0_write>
     7f2:	1d 83       	std	Y+5, r17	; 0x05
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	08 95       	ret

000007fc <can123_bit_modify>:
																		if(bus == 2){can2_select();can123_bit_modify(reg,mask,val);can2_deselect();}
																		if(bus == 3){can3_select();can123_bit_modify(reg,mask,val);can3_deselect();}}
void can1_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can1_select();can123_bit_modify(reg,mask,val);can1_deselect(); }
void can2_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can2_select();can123_bit_modify(reg,mask,val);can2_deselect(); }
void can3_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can3_select();can123_bit_modify(reg,mask,val);can3_deselect(); }
void can123_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){	spi0_write(MCP_BITMOD); spi0_write(reg); spi0_write(mask); spi0_write(val);}
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	18 2f       	mov	r17, r24
     804:	d6 2f       	mov	r29, r22
     806:	c4 2f       	mov	r28, r20
     808:	85 e0       	ldi	r24, 0x05	; 5
     80a:	c3 df       	rcall	.-122    	; 0x792 <spi0_write>
     80c:	81 2f       	mov	r24, r17
     80e:	c1 df       	rcall	.-126    	; 0x792 <spi0_write>
     810:	8d 2f       	mov	r24, r29
     812:	bf df       	rcall	.-130    	; 0x792 <spi0_write>
     814:	8c 2f       	mov	r24, r28
     816:	bd df       	rcall	.-134    	; 0x792 <spi0_write>
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	08 95       	ret

00000820 <can_bit_modify>:
void can1_reset(){ 	can1_select();spi0_write(MCP_RESET);can1_deselect(); }	
void can2_reset(){ 	can2_select();spi0_write(MCP_RESET);can2_deselect(); }
void can3_reset(){ 	can3_select();spi0_write(MCP_RESET);can3_deselect(); }

//bit modify
void can_bit_modify(uint8_t reg, uint8_t mask, uint8_t val, uint8_t bus){if(bus == 1){can1_select();can123_bit_modify(reg,mask,val);can1_deselect();}
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	21 30       	cpi	r18, 0x01	; 1
     828:	39 f4       	brne	.+14     	; 0x838 <can_bit_modify+0x18>
     82a:	c0 e4       	ldi	r28, 0x40	; 64
     82c:	d6 e0       	ldi	r29, 0x06	; 6
     82e:	10 e1       	ldi	r17, 0x10	; 16
     830:	1e 83       	std	Y+6, r17	; 0x06
     832:	e4 df       	rcall	.-56     	; 0x7fc <can123_bit_modify>
     834:	1d 83       	std	Y+5, r17	; 0x05
     836:	11 c0       	rjmp	.+34     	; 0x85a <can_bit_modify+0x3a>
																		if(bus == 2){can2_select();can123_bit_modify(reg,mask,val);can2_deselect();}
     838:	22 30       	cpi	r18, 0x02	; 2
     83a:	39 f4       	brne	.+14     	; 0x84a <can_bit_modify+0x2a>
     83c:	c0 e6       	ldi	r28, 0x60	; 96
     83e:	d6 e0       	ldi	r29, 0x06	; 6
     840:	10 e1       	ldi	r17, 0x10	; 16
     842:	1e 83       	std	Y+6, r17	; 0x06
     844:	db df       	rcall	.-74     	; 0x7fc <can123_bit_modify>
     846:	1d 83       	std	Y+5, r17	; 0x05
     848:	08 c0       	rjmp	.+16     	; 0x85a <can_bit_modify+0x3a>
																		if(bus == 3){can3_select();can123_bit_modify(reg,mask,val);can3_deselect();}}
     84a:	23 30       	cpi	r18, 0x03	; 3
     84c:	31 f4       	brne	.+12     	; 0x85a <can_bit_modify+0x3a>
     84e:	c0 e2       	ldi	r28, 0x20	; 32
     850:	d6 e0       	ldi	r29, 0x06	; 6
     852:	18 e0       	ldi	r17, 0x08	; 8
     854:	1e 83       	std	Y+6, r17	; 0x06
     856:	d2 df       	rcall	.-92     	; 0x7fc <can123_bit_modify>
     858:	1d 83       	std	Y+5, r17	; 0x05
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	08 95       	ret

00000862 <can1_bit_modify>:
void can1_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can1_select();can123_bit_modify(reg,mask,val);can1_deselect(); }
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	c0 e4       	ldi	r28, 0x40	; 64
     86a:	d6 e0       	ldi	r29, 0x06	; 6
     86c:	10 e1       	ldi	r17, 0x10	; 16
     86e:	1e 83       	std	Y+6, r17	; 0x06
     870:	c5 df       	rcall	.-118    	; 0x7fc <can123_bit_modify>
     872:	1d 83       	std	Y+5, r17	; 0x05
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	08 95       	ret

0000087c <can2_bit_modify>:
void can2_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can2_select();can123_bit_modify(reg,mask,val);can2_deselect(); }
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	c0 e6       	ldi	r28, 0x60	; 96
     884:	d6 e0       	ldi	r29, 0x06	; 6
     886:	10 e1       	ldi	r17, 0x10	; 16
     888:	1e 83       	std	Y+6, r17	; 0x06
     88a:	b8 df       	rcall	.-144    	; 0x7fc <can123_bit_modify>
     88c:	1d 83       	std	Y+5, r17	; 0x05
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	08 95       	ret

00000896 <can3_bit_modify>:
void can3_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can3_select();can123_bit_modify(reg,mask,val);can3_deselect(); }
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	c0 e2       	ldi	r28, 0x20	; 32
     89e:	d6 e0       	ldi	r29, 0x06	; 6
     8a0:	18 e0       	ldi	r17, 0x08	; 8
     8a2:	1e 83       	std	Y+6, r17	; 0x06
     8a4:	ab df       	rcall	.-170    	; 0x7fc <can123_bit_modify>
     8a6:	1d 83       	std	Y+5, r17	; 0x05
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	08 95       	ret

000008b0 <can123_rts>:
void can1_rts(uint8_t channel){ can1_select(); can123_rts(channel); can1_deselect(); }
void can2_rts(uint8_t channel){ can2_select(); can123_rts(channel); can2_deselect(); }
void can3_rts(uint8_t channel){ can3_select(); can123_rts(channel); can3_deselect(); }

void can123_rts(uint8_t channel){
    switch (channel){
     8b0:	81 30       	cpi	r24, 0x01	; 1
     8b2:	39 f0       	breq	.+14     	; 0x8c2 <can123_rts+0x12>
     8b4:	18 f0       	brcs	.+6      	; 0x8bc <can123_rts+0xc>
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	39 f0       	breq	.+14     	; 0x8c8 <can123_rts+0x18>
     8ba:	08 95       	ret
    	case MCP_TX_0: spi0_write(MCP_RTS_TXB0); break;
     8bc:	81 e8       	ldi	r24, 0x81	; 129
     8be:	69 cf       	rjmp	.-302    	; 0x792 <spi0_write>
     8c0:	08 95       	ret
    	case MCP_TX_1: spi0_write(MCP_RTS_TXB1); break;
     8c2:	82 e8       	ldi	r24, 0x82	; 130
     8c4:	66 cf       	rjmp	.-308    	; 0x792 <spi0_write>
     8c6:	08 95       	ret
    	case MCP_TX_2: spi0_write(MCP_RTS_TXB2); break;
     8c8:	84 e8       	ldi	r24, 0x84	; 132
     8ca:	63 cf       	rjmp	.-314    	; 0x792 <spi0_write>
     8cc:	08 95       	ret

000008ce <can1_rts>:
     8ce:	1f 93       	push	r17
void can2_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can2_select();can123_bit_modify(reg,mask,val);can2_deselect(); }
void can3_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){ 	can3_select();can123_bit_modify(reg,mask,val);can3_deselect(); }
void can123_bit_modify(uint8_t reg, uint8_t mask, uint8_t val){	spi0_write(MCP_BITMOD); spi0_write(reg); spi0_write(mask); spi0_write(val);}

//RTS from SPI
void can1_rts(uint8_t channel){ can1_select(); can123_rts(channel); can1_deselect(); }
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	c0 e4       	ldi	r28, 0x40	; 64
     8d6:	d6 e0       	ldi	r29, 0x06	; 6
     8d8:	10 e1       	ldi	r17, 0x10	; 16
     8da:	1e 83       	std	Y+6, r17	; 0x06
     8dc:	e9 df       	rcall	.-46     	; 0x8b0 <can123_rts>
     8de:	1d 83       	std	Y+5, r17	; 0x05
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	08 95       	ret

000008e8 <can2_rts>:
void can2_rts(uint8_t channel){ can2_select(); can123_rts(channel); can2_deselect(); }
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	c0 e6       	ldi	r28, 0x60	; 96
     8f0:	d6 e0       	ldi	r29, 0x06	; 6
     8f2:	10 e1       	ldi	r17, 0x10	; 16
     8f4:	1e 83       	std	Y+6, r17	; 0x06
     8f6:	dc df       	rcall	.-72     	; 0x8b0 <can123_rts>
     8f8:	1d 83       	std	Y+5, r17	; 0x05
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	08 95       	ret

00000902 <can3_rts>:
void can3_rts(uint8_t channel){ can3_select(); can123_rts(channel); can3_deselect(); }
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	c0 e2       	ldi	r28, 0x20	; 32
     90a:	d6 e0       	ldi	r29, 0x06	; 6
     90c:	18 e0       	ldi	r17, 0x08	; 8
     90e:	1e 83       	std	Y+6, r17	; 0x06
     910:	cf df       	rcall	.-98     	; 0x8b0 <can123_rts>
     912:	1d 83       	std	Y+5, r17	; 0x05
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	08 95       	ret

0000091c <can123_load_txbuff>:

void can1_load_txbuff(uint8_t channel, can_frame_t* frame){ can1_select(); can123_load_txbuff(channel, frame); can1_deselect(); }
void can2_load_txbuff(uint8_t channel, can_frame_t* frame){ can2_select(); can123_load_txbuff(channel, frame); can2_deselect(); }
void can3_load_txbuff(uint8_t channel, can_frame_t* frame){ can3_select(); can123_load_txbuff(channel, frame); can3_deselect(); }

void can123_load_txbuff(uint8_t channel, can_frame_t* frame){	
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	cf 93       	push	r28
     922:	8b 01       	movw	r16, r22
    uint8_t tmp = 0;
	
	spi0_write(MCP_LOAD_BUF_TXB0SIDH + (channel * 2)); //set buffer
     924:	88 0f       	add	r24, r24
     926:	80 5c       	subi	r24, 0xC0	; 192
     928:	34 df       	rcall	.-408    	; 0x792 <spi0_write>
		spi0_write((uint8_t)(frame->can_id >> 8));	// send XXXnEID8
		spi0_write((uint8_t)(frame->can_id));		// send XXXnEID0
		} else {
	#endif
	
	spi0_write((uint8_t)(frame->can_id>>3));		// send XXXnSIDH
     92a:	f8 01       	movw	r30, r16
     92c:	80 81       	ld	r24, Z
     92e:	91 81       	ldd	r25, Z+1	; 0x01
     930:	96 95       	lsr	r25
     932:	87 95       	ror	r24
     934:	96 95       	lsr	r25
     936:	87 95       	ror	r24
     938:	96 95       	lsr	r25
     93a:	87 95       	ror	r24
     93c:	2a df       	rcall	.-428    	; 0x792 <spi0_write>
	tmp = ((uint8_t)(frame->can_id << 5) ) & 0xe0;
	tmp |= ((uint8_t)(frame->can_id << 2) ) & 0x03;
	spi0_write(tmp);				// send XXXnSIDL
     93e:	f8 01       	movw	r30, r16
     940:	80 81       	ld	r24, Z
     942:	82 95       	swap	r24
     944:	88 0f       	add	r24, r24
     946:	80 7e       	andi	r24, 0xE0	; 224
	spi0_write(0);					// send XXXnEID8
     948:	24 df       	rcall	.-440    	; 0x792 <spi0_write>
     94a:	80 e0       	ldi	r24, 0x00	; 0
	spi0_write(0);					// send XXXnEID0
     94c:	22 df       	rcall	.-444    	; 0x792 <spi0_write>
     94e:	80 e0       	ldi	r24, 0x00	; 0
	
	#ifdef TC_CHARGER
		}
	#endif
	
    spi0_write(frame->can_dlc & 0x0f);
     950:	20 df       	rcall	.-448    	; 0x792 <spi0_write>
     952:	f8 01       	movw	r30, r16
     954:	82 81       	ldd	r24, Z+2	; 0x02
     956:	8f 70       	andi	r24, 0x0F	; 15
     958:	1c df       	rcall	.-456    	; 0x792 <spi0_write>

    for(uint8_t i= 0; i<frame->can_dlc; i++){ spi0_write(frame->data[i]); }
     95a:	f8 01       	movw	r30, r16
     95c:	82 81       	ldd	r24, Z+2	; 0x02
     95e:	88 23       	and	r24, r24
     960:	59 f0       	breq	.+22     	; 0x978 <can123_load_txbuff+0x5c>
     962:	c0 e0       	ldi	r28, 0x00	; 0
     964:	f8 01       	movw	r30, r16
     966:	ec 0f       	add	r30, r28
     968:	f1 1d       	adc	r31, r1
     96a:	83 81       	ldd	r24, Z+3	; 0x03
     96c:	12 df       	rcall	.-476    	; 0x792 <spi0_write>
     96e:	cf 5f       	subi	r28, 0xFF	; 255
     970:	f8 01       	movw	r30, r16
     972:	82 81       	ldd	r24, Z+2	; 0x02
     974:	c8 17       	cp	r28, r24
     976:	b0 f3       	brcs	.-20     	; 0x964 <can123_load_txbuff+0x48>
}
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <can1_load_txbuff>:
    	case MCP_TX_1: spi0_write(MCP_RTS_TXB1); break;
    	case MCP_TX_2: spi0_write(MCP_RTS_TXB2); break;
    	default: return;
}	}

void can1_load_txbuff(uint8_t channel, can_frame_t* frame){ can1_select(); can123_load_txbuff(channel, frame); can1_deselect(); }
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	c0 e4       	ldi	r28, 0x40	; 64
     988:	d6 e0       	ldi	r29, 0x06	; 6
     98a:	10 e1       	ldi	r17, 0x10	; 16
     98c:	1e 83       	std	Y+6, r17	; 0x06
     98e:	c6 df       	rcall	.-116    	; 0x91c <can123_load_txbuff>
     990:	1d 83       	std	Y+5, r17	; 0x05
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	08 95       	ret

0000099a <can2_load_txbuff>:
void can2_load_txbuff(uint8_t channel, can_frame_t* frame){ can2_select(); can123_load_txbuff(channel, frame); can2_deselect(); }
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	c0 e6       	ldi	r28, 0x60	; 96
     9a2:	d6 e0       	ldi	r29, 0x06	; 6
     9a4:	10 e1       	ldi	r17, 0x10	; 16
     9a6:	1e 83       	std	Y+6, r17	; 0x06
     9a8:	b9 df       	rcall	.-142    	; 0x91c <can123_load_txbuff>
     9aa:	1d 83       	std	Y+5, r17	; 0x05
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	08 95       	ret

000009b4 <can3_load_txbuff>:
void can3_load_txbuff(uint8_t channel, can_frame_t* frame){ can3_select(); can123_load_txbuff(channel, frame); can3_deselect(); }
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	c0 e2       	ldi	r28, 0x20	; 32
     9bc:	d6 e0       	ldi	r29, 0x06	; 6
     9be:	18 e0       	ldi	r17, 0x08	; 8
     9c0:	1e 83       	std	Y+6, r17	; 0x06
     9c2:	ac df       	rcall	.-168    	; 0x91c <can123_load_txbuff>
     9c4:	1d 83       	std	Y+5, r17	; 0x05
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	08 95       	ret

000009ce <can123_read_rx_buf>:
uint8_t can_read_rx_buf(uint8_t channel, can_frame_t* frame, uint8_t bus){uint8_t res = 0; if(bus == 1){res = can1_read_rx_buf(channel, frame);} if(bus == 2){res = can2_read_rx_buf(channel, frame);} if(bus == 3){res = can3_read_rx_buf(channel, frame);} return res;}
uint8_t can1_read_rx_buf(uint8_t channel, can_frame_t* frame){uint8_t res = 0; can1_select(); res = can123_read_rx_buf(channel, frame); can1_deselect(); return res;}
uint8_t can2_read_rx_buf(uint8_t channel, can_frame_t* frame){uint8_t res = 0; can2_select(); res = can123_read_rx_buf(channel, frame); can2_deselect(); return res;}
uint8_t can3_read_rx_buf(uint8_t channel, can_frame_t* frame){uint8_t res = 0; can3_select(); res = can123_read_rx_buf(channel, frame); can3_deselect(); return res;}

uint8_t can123_read_rx_buf(uint8_t channel, can_frame_t* frame){
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	8b 01       	movw	r16, r22
	uint16_t id = 0;
	uint8_t data;
	
	spi0_write(channel);
     9d8:	dc de       	rcall	.-584    	; 0x792 <spi0_write>
	
	data = spi0_write(0); // read XXXnSIDH
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	da de       	rcall	.-588    	; 0x792 <spi0_write>
	id = (((uint16_t)data) << 3);
     9de:	98 e0       	ldi	r25, 0x08	; 8
     9e0:	89 9f       	mul	r24, r25
     9e2:	e0 01       	movw	r28, r0

	data = spi0_write(0); // read XXXnSIDL
     9e4:	11 24       	eor	r1, r1
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	d4 de       	rcall	.-600    	; 0x792 <spi0_write>
	id |= (((uint16_t)(data & 0xe0)) >> 5);
     9ea:	82 95       	swap	r24
     9ec:	86 95       	lsr	r24
     9ee:	87 70       	andi	r24, 0x07	; 7

	spi0_write(0); // read XXXnEID8
     9f0:	c8 2b       	or	r28, r24
     9f2:	80 e0       	ldi	r24, 0x00	; 0
	spi0_write(0); // read XXXnEID0
     9f4:	ce de       	rcall	.-612    	; 0x792 <spi0_write>
     9f6:	80 e0       	ldi	r24, 0x00	; 0

    frame->can_id = id;
     9f8:	cc de       	rcall	.-616    	; 0x792 <spi0_write>
     9fa:	f8 01       	movw	r30, r16
     9fc:	c0 83       	st	Z, r28
    frame->can_dlc = spi0_write(0); // read length of the frame
     9fe:	d1 83       	std	Z+1, r29	; 0x01
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	c7 de       	rcall	.-626    	; 0x792 <spi0_write>
    frame->can_dlc &= 0x0f;	
     a04:	8f 70       	andi	r24, 0x0F	; 15
     a06:	f8 01       	movw	r30, r16

    for (uint8_t i=0; i<frame->can_dlc; i++){ frame->data[i] = spi0_write(0); }
     a08:	82 83       	std	Z+2, r24	; 0x02
     a0a:	88 23       	and	r24, r24
     a0c:	61 f0       	breq	.+24     	; 0xa26 <can123_read_rx_buf+0x58>
     a0e:	c0 e0       	ldi	r28, 0x00	; 0
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	bf de       	rcall	.-642    	; 0x792 <spi0_write>
     a14:	f8 01       	movw	r30, r16
     a16:	ec 0f       	add	r30, r28
     a18:	f1 1d       	adc	r31, r1
     a1a:	83 83       	std	Z+3, r24	; 0x03
     a1c:	cf 5f       	subi	r28, 0xFF	; 255
     a1e:	f8 01       	movw	r30, r16
     a20:	82 81       	ldd	r24, Z+2	; 0x02
     a22:	c8 17       	cp	r28, r24
     a24:	a8 f3       	brcs	.-22     	; 0xa10 <can123_read_rx_buf+0x42>
	
    return 1;
}
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <can1_read_rx_buf>:
    for(uint8_t i= 0; i<frame->can_dlc; i++){ spi0_write(frame->data[i]); }
}

//Read rxbuffer to a frame
uint8_t can_read_rx_buf(uint8_t channel, can_frame_t* frame, uint8_t bus){uint8_t res = 0; if(bus == 1){res = can1_read_rx_buf(channel, frame);} if(bus == 2){res = can2_read_rx_buf(channel, frame);} if(bus == 3){res = can3_read_rx_buf(channel, frame);} return res;}
uint8_t can1_read_rx_buf(uint8_t channel, can_frame_t* frame){uint8_t res = 0; can1_select(); res = can123_read_rx_buf(channel, frame); can1_deselect(); return res;}
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	c0 e4       	ldi	r28, 0x40	; 64
     a3a:	d6 e0       	ldi	r29, 0x06	; 6
     a3c:	10 e1       	ldi	r17, 0x10	; 16
     a3e:	1e 83       	std	Y+6, r17	; 0x06
     a40:	c6 df       	rcall	.-116    	; 0x9ce <can123_read_rx_buf>
     a42:	1d 83       	std	Y+5, r17	; 0x05
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	08 95       	ret

00000a4c <can2_read_rx_buf>:
uint8_t can2_read_rx_buf(uint8_t channel, can_frame_t* frame){uint8_t res = 0; can2_select(); res = can123_read_rx_buf(channel, frame); can2_deselect(); return res;}
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	c0 e6       	ldi	r28, 0x60	; 96
     a54:	d6 e0       	ldi	r29, 0x06	; 6
     a56:	10 e1       	ldi	r17, 0x10	; 16
     a58:	1e 83       	std	Y+6, r17	; 0x06
     a5a:	b9 df       	rcall	.-142    	; 0x9ce <can123_read_rx_buf>
     a5c:	1d 83       	std	Y+5, r17	; 0x05
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	08 95       	ret

00000a66 <can3_read_rx_buf>:
uint8_t can3_read_rx_buf(uint8_t channel, can_frame_t* frame){uint8_t res = 0; can3_select(); res = can123_read_rx_buf(channel, frame); can3_deselect(); return res;}
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	c0 e2       	ldi	r28, 0x20	; 32
     a6e:	d6 e0       	ldi	r29, 0x06	; 6
     a70:	18 e0       	ldi	r17, 0x08	; 8
     a72:	1e 83       	std	Y+6, r17	; 0x06
     a74:	ac df       	rcall	.-168    	; 0x9ce <can123_read_rx_buf>
     a76:	1d 83       	std	Y+5, r17	; 0x05
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	08 95       	ret

00000a80 <can_read_rx_buf>:

    for(uint8_t i= 0; i<frame->can_dlc; i++){ spi0_write(frame->data[i]); }
}

//Read rxbuffer to a frame
uint8_t can_read_rx_buf(uint8_t channel, can_frame_t* frame, uint8_t bus){uint8_t res = 0; if(bus == 1){res = can1_read_rx_buf(channel, frame);} if(bus == 2){res = can2_read_rx_buf(channel, frame);} if(bus == 3){res = can3_read_rx_buf(channel, frame);} return res;}
     a80:	41 30       	cpi	r20, 0x01	; 1
     a82:	11 f4       	brne	.+4      	; 0xa88 <can_read_rx_buf+0x8>
     a84:	d6 cf       	rjmp	.-84     	; 0xa32 <can1_read_rx_buf>
     a86:	08 95       	ret
     a88:	42 30       	cpi	r20, 0x02	; 2
     a8a:	11 f4       	brne	.+4      	; 0xa90 <can_read_rx_buf+0x10>
     a8c:	df cf       	rjmp	.-66     	; 0xa4c <can2_read_rx_buf>
     a8e:	08 95       	ret
     a90:	43 30       	cpi	r20, 0x03	; 3
     a92:	11 f4       	brne	.+4      	; 0xa98 <can_read_rx_buf+0x18>
     a94:	e8 cf       	rjmp	.-48     	; 0xa66 <can3_read_rx_buf>
     a96:	08 95       	ret
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	08 95       	ret

00000a9c <can1_read>:
    return 1;
}

//read a register
uint8_t can_read(uint8_t reg, uint8_t bus){if(bus == 1){return can1_read(reg);} else if(bus == 2) {return can2_read(reg);} else {return can3_read(reg);}}
uint8_t can1_read(uint8_t reg){uint8_t res=0; can1_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can1_deselect(); return res;}
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	08 2f       	mov	r16, r24
     aa6:	c0 e4       	ldi	r28, 0x40	; 64
     aa8:	d6 e0       	ldi	r29, 0x06	; 6
     aaa:	10 e1       	ldi	r17, 0x10	; 16
     aac:	1e 83       	std	Y+6, r17	; 0x06
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	70 de       	rcall	.-800    	; 0x792 <spi0_write>
     ab2:	80 2f       	mov	r24, r16
     ab4:	6e de       	rcall	.-804    	; 0x792 <spi0_write>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	6c de       	rcall	.-808    	; 0x792 <spi0_write>
     aba:	1d 83       	std	Y+5, r17	; 0x05
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	08 95       	ret

00000ac6 <can2_read>:
uint8_t can2_read(uint8_t reg){uint8_t res=0; can2_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can2_deselect(); return res;}
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	08 2f       	mov	r16, r24
     ad0:	c0 e6       	ldi	r28, 0x60	; 96
     ad2:	d6 e0       	ldi	r29, 0x06	; 6
     ad4:	10 e1       	ldi	r17, 0x10	; 16
     ad6:	1e 83       	std	Y+6, r17	; 0x06
     ad8:	83 e0       	ldi	r24, 0x03	; 3
     ada:	5b de       	rcall	.-842    	; 0x792 <spi0_write>
     adc:	80 2f       	mov	r24, r16
     ade:	59 de       	rcall	.-846    	; 0x792 <spi0_write>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	57 de       	rcall	.-850    	; 0x792 <spi0_write>
     ae4:	1d 83       	std	Y+5, r17	; 0x05
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	08 95       	ret

00000af0 <can3_read>:
uint8_t can3_read(uint8_t reg){uint8_t res=0; can3_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can3_deselect(); return res;}
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	08 2f       	mov	r16, r24
     afa:	c0 e2       	ldi	r28, 0x20	; 32
     afc:	d6 e0       	ldi	r29, 0x06	; 6
     afe:	18 e0       	ldi	r17, 0x08	; 8
     b00:	1e 83       	std	Y+6, r17	; 0x06
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	46 de       	rcall	.-884    	; 0x792 <spi0_write>
     b06:	80 2f       	mov	r24, r16
     b08:	44 de       	rcall	.-888    	; 0x792 <spi0_write>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	42 de       	rcall	.-892    	; 0x792 <spi0_write>
     b0e:	1d 83       	std	Y+5, r17	; 0x05
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	08 95       	ret

00000b1a <can_read>:
	
    return 1;
}

//read a register
uint8_t can_read(uint8_t reg, uint8_t bus){if(bus == 1){return can1_read(reg);} else if(bus == 2) {return can2_read(reg);} else {return can3_read(reg);}}
     b1a:	61 30       	cpi	r22, 0x01	; 1
     b1c:	11 f4       	brne	.+4      	; 0xb22 <can_read+0x8>
     b1e:	be cf       	rjmp	.-132    	; 0xa9c <can1_read>
     b20:	08 95       	ret
     b22:	62 30       	cpi	r22, 0x02	; 2
     b24:	11 f4       	brne	.+4      	; 0xb2a <can_read+0x10>
     b26:	cf cf       	rjmp	.-98     	; 0xac6 <can2_read>
     b28:	08 95       	ret
     b2a:	e2 cf       	rjmp	.-60     	; 0xaf0 <can3_read>
     b2c:	08 95       	ret

00000b2e <can1_write>:
uint8_t can2_read(uint8_t reg){uint8_t res=0; can2_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can2_deselect(); return res;}
uint8_t can3_read(uint8_t reg){uint8_t res=0; can3_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can3_deselect(); return res;}

//write a register.
void can_write(uint8_t reg, uint8_t value, uint8_t bus){if(bus == 1){can1_write(reg, value);} else if(bus == 2){can2_write(reg, value);} else {can3_write(reg, value);}}
void can1_write(uint8_t reg, uint8_t value){can1_select(); spi0_write(MCP_WRITE);spi0_write(reg);spi0_write(value); can1_deselect();}
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	f8 2e       	mov	r15, r24
     b3a:	06 2f       	mov	r16, r22
     b3c:	c0 e4       	ldi	r28, 0x40	; 64
     b3e:	d6 e0       	ldi	r29, 0x06	; 6
     b40:	10 e1       	ldi	r17, 0x10	; 16
     b42:	1e 83       	std	Y+6, r17	; 0x06
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	25 de       	rcall	.-950    	; 0x792 <spi0_write>
     b48:	8f 2d       	mov	r24, r15
     b4a:	23 de       	rcall	.-954    	; 0x792 <spi0_write>
     b4c:	80 2f       	mov	r24, r16
     b4e:	21 de       	rcall	.-958    	; 0x792 <spi0_write>
     b50:	1d 83       	std	Y+5, r17	; 0x05
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	08 95       	ret

00000b5e <can2_write>:
void can2_write(uint8_t reg, uint8_t value){can2_select(); spi0_write(MCP_WRITE);spi0_write(reg);spi0_write(value); can2_deselect();}
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	f8 2e       	mov	r15, r24
     b6a:	06 2f       	mov	r16, r22
     b6c:	c0 e6       	ldi	r28, 0x60	; 96
     b6e:	d6 e0       	ldi	r29, 0x06	; 6
     b70:	10 e1       	ldi	r17, 0x10	; 16
     b72:	1e 83       	std	Y+6, r17	; 0x06
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	0d de       	rcall	.-998    	; 0x792 <spi0_write>
     b78:	8f 2d       	mov	r24, r15
     b7a:	0b de       	rcall	.-1002   	; 0x792 <spi0_write>
     b7c:	80 2f       	mov	r24, r16
     b7e:	09 de       	rcall	.-1006   	; 0x792 <spi0_write>
     b80:	1d 83       	std	Y+5, r17	; 0x05
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	ff 90       	pop	r15
     b8c:	08 95       	ret

00000b8e <can3_write>:
void can3_write(uint8_t reg, uint8_t value){can3_select(); spi0_write(MCP_WRITE);spi0_write(reg);spi0_write(value); can3_deselect();}
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	f8 2e       	mov	r15, r24
     b9a:	06 2f       	mov	r16, r22
     b9c:	c0 e2       	ldi	r28, 0x20	; 32
     b9e:	d6 e0       	ldi	r29, 0x06	; 6
     ba0:	18 e0       	ldi	r17, 0x08	; 8
     ba2:	1e 83       	std	Y+6, r17	; 0x06
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	f5 dd       	rcall	.-1046   	; 0x792 <spi0_write>
     ba8:	8f 2d       	mov	r24, r15
     baa:	f3 dd       	rcall	.-1050   	; 0x792 <spi0_write>
     bac:	80 2f       	mov	r24, r16
     bae:	f1 dd       	rcall	.-1054   	; 0x792 <spi0_write>
     bb0:	1d 83       	std	Y+5, r17	; 0x05
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	08 95       	ret

00000bbe <can_init>:
#define can3_select()			CAN3_CS_PORT.OUTCLR = CAN3_CS
#define can1_deselect()			CAN1_CS_PORT.OUTSET = CAN1_CS
#define can2_deselect()			CAN2_CS_PORT.OUTSET = CAN2_CS
#define can3_deselect()			CAN3_CS_PORT.OUTSET = CAN3_CS

uint8_t can_init(uint8_t opmod, uint8_t reset){
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
	uint8_t mode1, mode2, mode3;
	
	SPI0_PORT.DIRSET		= SPI0_SCK | SPI0_MOSI;
     bc4:	e0 e4       	ldi	r30, 0x40	; 64
     bc6:	f6 e0       	ldi	r31, 0x06	; 6
     bc8:	90 ea       	ldi	r25, 0xA0	; 160
     bca:	91 83       	std	Z+1, r25	; 0x01
	SPI0_PORT.DIRCLR		= SPI0_MISO;
     bcc:	90 e4       	ldi	r25, 0x40	; 64
     bce:	92 83       	std	Z+2, r25	; 0x02
	CAN1_PORT.DIRSET		= CAN1_STBY;
     bd0:	a0 e6       	ldi	r26, 0x60	; 96
     bd2:	b6 e0       	ldi	r27, 0x06	; 6
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	11 96       	adiw	r26, 0x01	; 1
     bd8:	9c 93       	st	X, r25
     bda:	11 97       	sbiw	r26, 0x01	; 1
	CAN2_PORT.DIRSET		= CAN2_STBY;
     bdc:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	CAN3_PORT.DIRSET		= CAN3_STBY;
     be0:	98 e0       	ldi	r25, 0x08	; 8
     be2:	91 83       	std	Z+1, r25	; 0x01
	CAN1_CS_PORT.DIRSET		= CAN1_CS;
     be4:	20 e1       	ldi	r18, 0x10	; 16
     be6:	21 83       	std	Z+1, r18	; 0x01
	CAN2_CS_PORT.DIRSET		= CAN2_CS;
     be8:	11 96       	adiw	r26, 0x01	; 1
     bea:	2c 93       	st	X, r18
	CAN3_CS_PORT.DIRSET		= CAN3_CS;
     bec:	90 93 21 06 	sts	0x0621, r25	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
	SPI0.CTRL				= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_CLK2X_bm |	//enable SPI SPI_CLK2X_bm |
     bf0:	90 ed       	ldi	r25, 0xD0	; 208
     bf2:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
							  SPI_PRESCALER_DIV4_gc;							//run faster than usual (clkperx2/4=24MHz)
	
	if(!reset) return 1;
     bf6:	66 23       	and	r22, r22
     bf8:	09 f4       	brne	.+2      	; 0xbfc <can_init+0x3e>
     bfa:	7e c0       	rjmp	.+252    	; 0xcf8 <can_init+0x13a>
     bfc:	c8 2f       	mov	r28, r24
	
	can1_deselect();
     bfe:	80 e1       	ldi	r24, 0x10	; 16
     c00:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	can2_deselect();
     c04:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	can3_deselect();
     c08:	88 e0       	ldi	r24, 0x08	; 8
     c0a:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c0e:	8f e1       	ldi	r24, 0x1F	; 31
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <can_init+0x54>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <can_init+0x5a>
     c18:	00 00       	nop
	
	_delay_ms(0.1);
	
	can1_reset();
     c1a:	c6 dd       	rcall	.-1140   	; 0x7a8 <can1_reset>
	can2_reset();
     c1c:	d3 dd       	rcall	.-1114   	; 0x7c4 <can2_reset>
	can3_reset();
     c1e:	e0 dd       	rcall	.-1088   	; 0x7e0 <can3_reset>
     c20:	8f e3       	ldi	r24, 0x3F	; 63
     c22:	9f e1       	ldi	r25, 0x1F	; 31
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <can_init+0x66>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <can_init+0x6c>
     c2a:	00 00       	nop
	
	_delay_ms(1);												//wait for MCP25625 to be ready
	
	mode1 = can1_read(MCP_REG_CANCTRL);							//read opmode
     c2c:	8f e0       	ldi	r24, 0x0F	; 15
     c2e:	36 df       	rcall	.-404    	; 0xa9c <can1_read>
     c30:	d8 2f       	mov	r29, r24
	mode1 = (mode1 & MCP_MASK_OPMOD)>>5;						//mask with opmode bits	
	
	mode2 = can2_read(MCP_REG_CANCTRL);							//read opmode
     c32:	8f e0       	ldi	r24, 0x0F	; 15
     c34:	48 df       	rcall	.-368    	; 0xac6 <can2_read>
     c36:	18 2f       	mov	r17, r24
	mode2 = (mode2 & MCP_MASK_OPMOD)>>5;						//mask with opmode bits	

	mode3 = can3_read(MCP_REG_CANCTRL);							//read opmode
     c38:	8f e0       	ldi	r24, 0x0F	; 15
     c3a:	5a df       	rcall	.-332    	; 0xaf0 <can3_read>
     c3c:	d2 95       	swap	r29
	mode3 = (mode3 & MCP_MASK_OPMOD)>>5;						//mask with opmode bits
	
	if(mode1 != MCP_OPMOD_CONFIG) return 0;						//return error if not opmode CONFIG
     c3e:	d6 95       	lsr	r29
     c40:	d7 70       	andi	r29, 0x07	; 7
     c42:	d4 30       	cpi	r29, 0x04	; 4
     c44:	09 f0       	breq	.+2      	; 0xc48 <can_init+0x8a>
     c46:	5a c0       	rjmp	.+180    	; 0xcfc <can_init+0x13e>
     c48:	12 95       	swap	r17
	if(mode2 != MCP_OPMOD_CONFIG) return 0;						//return error if not opmode CONFIG
     c4a:	16 95       	lsr	r17
     c4c:	17 70       	andi	r17, 0x07	; 7
     c4e:	14 30       	cpi	r17, 0x04	; 4
     c50:	09 f0       	breq	.+2      	; 0xc54 <can_init+0x96>
     c52:	56 c0       	rjmp	.+172    	; 0xd00 <can_init+0x142>
     c54:	82 95       	swap	r24
	if(mode3 != MCP_OPMOD_CONFIG) return 0;						//return error if not opmode CONFIG
     c56:	86 95       	lsr	r24
     c58:	87 70       	andi	r24, 0x07	; 7
     c5a:	84 30       	cpi	r24, 0x04	; 4
     c5c:	09 f0       	breq	.+2      	; 0xc60 <can_init+0xa2>
     c5e:	52 c0       	rjmp	.+164    	; 0xd04 <can_init+0x146>
     c60:	8f e1       	ldi	r24, 0x1F	; 31
     c62:	93 e0       	ldi	r25, 0x03	; 3
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <can_init+0xa6>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <can_init+0xac>
     c6a:	00 00       	nop
	can1_write(MCP_REG_CNF2,0xF0);								//PHSEG1 is 7xTq, PRSEG = 1xTq, SAM=1
	can2_write(MCP_REG_CNF2,0xF0);
	can1_write(MCP_REG_CNF3,0x06);								//PHSEG2 is 7xTq, so total is (7+7+1+1)=16Tq
	can2_write(MCP_REG_CNF3,0x06);
	#else
	can1_write(MCP_REG_CNF1,0b00000000);						//set BRP to 0 so we get Tq = 1/8M, then we need 16xTq to get 500kHz, SJW=1
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	8a e2       	ldi	r24, 0x2A	; 42
     c70:	5e df       	rcall	.-324    	; 0xb2e <can1_write>
	can2_write(MCP_REG_CNF1,0b00000000);
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	8a e2       	ldi	r24, 0x2A	; 42
     c76:	73 df       	rcall	.-282    	; 0xb5e <can2_write>
	can3_write(MCP_REG_CNF1,0b00000000);
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	8a e2       	ldi	r24, 0x2A	; 42
     c7c:	88 df       	rcall	.-240    	; 0xb8e <can3_write>
	can1_write(MCP_REG_CNF2,0b11100111);						//PHSEG1 is 5xTq, PRSEG = 8xTq, SAM=1
     c7e:	67 ee       	ldi	r22, 0xE7	; 231
     c80:	89 e2       	ldi	r24, 0x29	; 41
     c82:	55 df       	rcall	.-342    	; 0xb2e <can1_write>
	can2_write(MCP_REG_CNF2,0b11100111);
     c84:	67 ee       	ldi	r22, 0xE7	; 231
     c86:	89 e2       	ldi	r24, 0x29	; 41
     c88:	6a df       	rcall	.-300    	; 0xb5e <can2_write>
	can3_write(MCP_REG_CNF2,0b11100111);
     c8a:	67 ee       	ldi	r22, 0xE7	; 231
     c8c:	89 e2       	ldi	r24, 0x29	; 41
     c8e:	7f df       	rcall	.-258    	; 0xb8e <can3_write>
	can1_write(MCP_REG_CNF3,0b00000001);						//PHSEG2 is 2xTq, so total is (5+5+5+1)=16Tq
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	88 e2       	ldi	r24, 0x28	; 40
     c94:	4c df       	rcall	.-360    	; 0xb2e <can1_write>
	can2_write(MCP_REG_CNF3,0b00000001);
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	88 e2       	ldi	r24, 0x28	; 40
     c9a:	61 df       	rcall	.-318    	; 0xb5e <can2_write>
	can3_write(MCP_REG_CNF3,0b00000001);
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	88 e2       	ldi	r24, 0x28	; 40
     ca0:	76 df       	rcall	.-276    	; 0xb8e <can3_write>

	
	//we leave RXM to 0 and set acceptance filters to 0 to avoid bogus data from error frames
	//ending up in the data stream

	can1_bit_modify(MCP_REG_RXB0CTRL, MCP_RXB_BUKT_MASK, MCP_RXB_BUKT_MASK);//configure message rollover
     ca2:	44 e0       	ldi	r20, 0x04	; 4
     ca4:	64 e0       	ldi	r22, 0x04	; 4
     ca6:	80 e6       	ldi	r24, 0x60	; 96
     ca8:	dc dd       	rcall	.-1096   	; 0x862 <can1_bit_modify>
	can2_bit_modify(MCP_REG_RXB0CTRL, MCP_RXB_BUKT_MASK, MCP_RXB_BUKT_MASK);
     caa:	44 e0       	ldi	r20, 0x04	; 4
     cac:	64 e0       	ldi	r22, 0x04	; 4
     cae:	80 e6       	ldi	r24, 0x60	; 96
     cb0:	e5 dd       	rcall	.-1078   	; 0x87c <can2_bit_modify>
	can3_bit_modify(MCP_REG_RXB0CTRL, MCP_RXB_BUKT_MASK, MCP_RXB_BUKT_MASK);
     cb2:	44 e0       	ldi	r20, 0x04	; 4
     cb4:	64 e0       	ldi	r22, 0x04	; 4
     cb6:	80 e6       	ldi	r24, 0x60	; 96
     cb8:	ee dd       	rcall	.-1060   	; 0x896 <can3_bit_modify>
	can1_write(MCP_REG_CANINTE, 0xA3);							//enable both RX interrupts and the error interrupt
     cba:	63 ea       	ldi	r22, 0xA3	; 163
     cbc:	8b e2       	ldi	r24, 0x2B	; 43
     cbe:	37 df       	rcall	.-402    	; 0xb2e <can1_write>
	can2_write(MCP_REG_CANINTE, 0xA3);
     cc0:	63 ea       	ldi	r22, 0xA3	; 163
     cc2:	8b e2       	ldi	r24, 0x2B	; 43
     cc4:	4c df       	rcall	.-360    	; 0xb5e <can2_write>
     cc6:	63 ea       	ldi	r22, 0xA3	; 163
	can3_write(MCP_REG_CANINTE, 0xA3);
     cc8:	8b e2       	ldi	r24, 0x2B	; 43
     cca:	61 df       	rcall	.-318    	; 0xb8e <can3_write>
     ccc:	4c 2f       	mov	r20, r28
     cce:	60 ee       	ldi	r22, 0xE0	; 224
	can1_bit_modify(MCP_REG_CANCTRL, MCP_MASK_OPMOD, opmod);	//Set device mode per argument
     cd0:	8f e0       	ldi	r24, 0x0F	; 15
     cd2:	c7 dd       	rcall	.-1138   	; 0x862 <can1_bit_modify>
     cd4:	4c 2f       	mov	r20, r28
     cd6:	60 ee       	ldi	r22, 0xE0	; 224
     cd8:	8f e0       	ldi	r24, 0x0F	; 15
	can2_bit_modify(MCP_REG_CANCTRL, MCP_MASK_OPMOD, opmod);
     cda:	d0 dd       	rcall	.-1120   	; 0x87c <can2_bit_modify>
     cdc:	4c 2f       	mov	r20, r28
     cde:	60 ee       	ldi	r22, 0xE0	; 224
     ce0:	8f e0       	ldi	r24, 0x0F	; 15
     ce2:	d9 dd       	rcall	.-1102   	; 0x896 <can3_bit_modify>
	can3_bit_modify(MCP_REG_CANCTRL, MCP_MASK_OPMOD, opmod);
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     cea:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
	can1_unstandby();											//set to active	
     cee:	88 e0       	ldi	r24, 0x08	; 8
     cf0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	can2_unstandby();
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	07 c0       	rjmp	.+14     	; 0xd06 <can_init+0x148>
	can3_unstandby();
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <can_init+0x148>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
     cfe:	03 c0       	rjmp	.+6      	; 0xd06 <can_init+0x148>
     d00:	80 e0       	ldi	r24, 0x00	; 0
	CAN2_CS_PORT.DIRSET		= CAN2_CS;
	CAN3_CS_PORT.DIRSET		= CAN3_CS;
	SPI0.CTRL				= SPI_ENABLE_bm | SPI_MASTER_bm | SPI_CLK2X_bm |	//enable SPI SPI_CLK2X_bm |
							  SPI_PRESCALER_DIV4_gc;							//run faster than usual (clkperx2/4=24MHz)
	
	if(!reset) return 1;
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <can_init+0x148>
     d04:	80 e0       	ldi	r24, 0x00	; 0
	mode2 = (mode2 & MCP_MASK_OPMOD)>>5;						//mask with opmode bits	

	mode3 = can3_read(MCP_REG_CANCTRL);							//read opmode
	mode3 = (mode3 & MCP_MASK_OPMOD)>>5;						//mask with opmode bits
	
	if(mode1 != MCP_OPMOD_CONFIG) return 0;						//return error if not opmode CONFIG
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
	if(mode2 != MCP_OPMOD_CONFIG) return 0;						//return error if not opmode CONFIG
     d0a:	1f 91       	pop	r17
     d0c:	08 95       	ret

00000d0e <can_write>:
	if(mode3 != MCP_OPMOD_CONFIG) return 0;						//return error if not opmode CONFIG
     d0e:	41 30       	cpi	r20, 0x01	; 1
	can3_bit_modify(MCP_REG_CANCTRL, MCP_MASK_OPMOD, opmod);
	can1_unstandby();											//set to active	
	can2_unstandby();
	can3_unstandby();
	return 1;
}
     d10:	11 f4       	brne	.+4      	; 0xd16 <can_write+0x8>
     d12:	0d cf       	rjmp	.-486    	; 0xb2e <can1_write>
     d14:	08 95       	ret
     d16:	42 30       	cpi	r20, 0x02	; 2
uint8_t can1_read(uint8_t reg){uint8_t res=0; can1_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can1_deselect(); return res;}
uint8_t can2_read(uint8_t reg){uint8_t res=0; can2_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can2_deselect(); return res;}
uint8_t can3_read(uint8_t reg){uint8_t res=0; can3_select(); spi0_write(MCP_READ); spi0_write(reg); res=spi0_write(0); can3_deselect(); return res;}

//write a register.
void can_write(uint8_t reg, uint8_t value, uint8_t bus){if(bus == 1){can1_write(reg, value);} else if(bus == 2){can2_write(reg, value);} else {can3_write(reg, value);}}
     d18:	11 f4       	brne	.+4      	; 0xd1e <can_write+0x10>
     d1a:	21 cf       	rjmp	.-446    	; 0xb5e <can2_write>
     d1c:	08 95       	ret
     d1e:	37 cf       	rjmp	.-402    	; 0xb8e <can3_write>
     d20:	08 95       	ret

00000d22 <hw_init>:

static		can_frame_t		swap_605_message	= {.can_id = 0x605, .can_dlc = 1, .data = {0}};
static		can_frame_t		swap_607_message	= {.can_id = 0x607, .can_dlc = 1, .data = {0}};


void hw_init(void){
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.CTRL |= OSC_RC2MEN_bm;
						while (!(OSC.STATUS & OSC_RC2MRDY_bm));
						return true;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.CTRL |= OSC_RC32MEN_bm;
     d26:	e0 e5       	ldi	r30, 0x50	; 80
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	82 60       	ori	r24, 0x02	; 2
     d2e:	80 83       	st	Z, r24
						while (!(OSC.STATUS & OSC_RC32MRDY_bm));
     d30:	81 81       	ldd	r24, Z+1	; 0x01
     d32:	81 ff       	sbrs	r24, 1
     d34:	fd cf       	rjmp	.-6      	; 0xd30 <hw_init+0xe>
						DFLLRC2M.COMP1  = (DFLLCompare & 0xFF);
						DFLLRC2M.COMP2  = (DFLLCompare >> 8);
						DFLLRC2M.CTRL   = DFLL_ENABLE_bm;
						break;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.DFLLCTRL   |= (Reference << OSC_RC32MCREF_gp);
     d36:	a0 e5       	ldi	r26, 0x50	; 80
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	16 96       	adiw	r26, 0x06	; 6
     d3c:	8c 91       	ld	r24, X
     d3e:	16 97       	sbiw	r26, 0x06	; 6
     d40:	84 60       	ori	r24, 0x04	; 4
     d42:	16 96       	adiw	r26, 0x06	; 6
     d44:	8c 93       	st	X, r24
     d46:	16 97       	sbiw	r26, 0x06	; 6
						DFLLRC32M.COMP1 = (DFLLCompare & 0xFF);
     d48:	c0 e6       	ldi	r28, 0x60	; 96
     d4a:	d0 e0       	ldi	r29, 0x00	; 0
     d4c:	80 e8       	ldi	r24, 0x80	; 128
     d4e:	8d 83       	std	Y+5, r24	; 0x05
						DFLLRC32M.COMP2 = (DFLLCompare >> 8);
     d50:	8b eb       	ldi	r24, 0xBB	; 187
     d52:	8e 83       	std	Y+6, r24	; 0x06

						if (Reference == DFLL_REF_INT_USBSOF)
						{
							NVM.CMD        = NVM_CMD_READ_CALIB_ROW_gc;
     d54:	80 ec       	ldi	r24, 0xC0	; 192
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	22 e0       	ldi	r18, 0x02	; 2
     d5a:	fc 01       	movw	r30, r24
     d5c:	22 87       	std	Z+10, r18	; 0x0a
							DFLLRC32M.CALA = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSCA));
     d5e:	ed e1       	ldi	r30, 0x1D	; 29
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	e4 91       	lpm	r30, Z
     d64:	ea 83       	std	Y+2, r30	; 0x02
							DFLLRC32M.CALB = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC));
     d66:	ec e1       	ldi	r30, 0x1C	; 28
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	e4 91       	lpm	r30, Z
     d6c:	eb 83       	std	Y+3, r30	; 0x03
							NVM.CMD        = 0;
     d6e:	fc 01       	movw	r30, r24
     d70:	12 86       	std	Z+10, r1	; 0x0a
						}

						DFLLRC32M.CTRL  = DFLL_ENABLE_bm;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	88 83       	st	Y, r24
	/* Start the 32MHz internal RC oscillator and start the DFLL to increase it to 48MHz using the USB SOF as a reference */
	XMEGACLK_StartInternalOscillator(CLOCK_SRC_INT_RC32MHZ);
	XMEGACLK_StartDFLL(CLOCK_SRC_INT_RC32MHZ, DFLL_REF_INT_USBSOF, 48000000);		
	
	//turn off everything we don' t use
	PR.PRGEN		= PR_AES_bm | PR_RTC_bm | PR_DMA_bm;
     d76:	e0 e7       	ldi	r30, 0x70	; 112
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	85 e1       	ldi	r24, 0x15	; 21
     d7c:	80 83       	st	Z, r24
	PR.PRPA			= PR_ADC_bm | PR_AC_bm;
     d7e:	83 e0       	ldi	r24, 0x03	; 3
     d80:	81 83       	std	Z+1, r24	; 0x01
	PR.PRPC			= PR_TWI_bm | PR_USART0_bm | PR_HIRES_bm;
     d82:	94 e5       	ldi	r25, 0x54	; 84
     d84:	93 83       	std	Z+3, r25	; 0x03
	PR.PRPD			= PR_TWI_bm | PR_USART0_bm | PR_TC0_bm | PR_TC1_bm;
     d86:	93 e5       	ldi	r25, 0x53	; 83
     d88:	94 83       	std	Z+4, r25	; 0x04
	PR.PRPE			= PR_TWI_bm | PR_USART0_bm;
     d8a:	90 e5       	ldi	r25, 0x50	; 80
     d8c:	95 83       	std	Z+5, r25	; 0x05
	
	//blink output
	PORTB.DIRSET	= 3;
     d8e:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
	
	//start 16MHz crystal and PLL it up to 48MHz
	OSC.XOSCCTRL	= OSC_FRQRANGE_12TO16_gc |		//16MHz crystal
     d92:	8b ec       	ldi	r24, 0xCB	; 203
     d94:	12 96       	adiw	r26, 0x02	; 2
     d96:	8c 93       	st	X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2
	OSC_XOSCSEL_XTAL_16KCLK_gc;						//16kclk startup
	OSC.CTRL	   |= OSC_XOSCEN_bm;				//enable crystal
     d9a:	8c 91       	ld	r24, X
     d9c:	88 60       	ori	r24, 0x08	; 8
     d9e:	8c 93       	st	X, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));			//wait until ready
     da0:	e0 e5       	ldi	r30, 0x50	; 80
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	81 81       	ldd	r24, Z+1	; 0x01
     da6:	83 ff       	sbrs	r24, 3
     da8:	fd cf       	rjmp	.-6      	; 0xda4 <hw_init+0x82>
	OSC.PLLCTRL		= OSC_PLLSRC_XOSC_gc | 2;		//XTAL->PLL, 2x multiplier (32MHz)
     daa:	e0 e5       	ldi	r30, 0x50	; 80
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	82 ec       	ldi	r24, 0xC2	; 194
     db0:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL	   |= OSC_PLLEN_bm;					//start PLL
     db2:	80 81       	ld	r24, Z
     db4:	80 61       	ori	r24, 0x10	; 16
     db6:	80 83       	st	Z, r24
	while (!(OSC.STATUS & OSC_PLLRDY_bm));			//wait until ready
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	84 ff       	sbrs	r24, 4
     dbc:	fd cf       	rjmp	.-6      	; 0xdb8 <hw_init+0x96>
	CCP				= CCP_IOREG_gc;					//allow changing CLK.CTRL
     dbe:	88 ed       	ldi	r24, 0xD8	; 216
     dc0:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL		= CLK_SCLKSEL_PLL_gc;			//use PLL output as system clock	
     dc2:	84 e0       	ldi	r24, 0x04	; 4
     dc4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	
	//output 16MHz clock to MCP25625 chips (PE0)
	//next iteration: put this on some other port, pin  4 or 7, so we can use the event system
	TCE0.CTRLA		= TC0_CLKSEL_DIV1_gc;						//clkper/1
     dc8:	e0 e0       	ldi	r30, 0x00	; 0
     dca:	fa e0       	ldi	r31, 0x0A	; 10
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 83       	st	Z, r24
	TCE0.CTRLB		= TC0_CCAEN_bm | TC0_WGMODE_SINGLESLOPE_bm;	//enable CCA, single-slope PWM
     dd0:	93 e1       	ldi	r25, 0x13	; 19
     dd2:	91 83       	std	Z+1, r25	; 0x01
	TCE0.CCA		= 1;										//compare value
     dd4:	21 e0       	ldi	r18, 0x01	; 1
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	20 a7       	std	Z+40, r18	; 0x28
     dda:	31 a7       	std	Z+41, r19	; 0x29
	TCE0.PER		= 1;										//period of 1, generates 24MHz output
     ddc:	26 a3       	std	Z+38, r18	; 0x26
     dde:	37 a3       	std	Z+39, r19	; 0x27
	
	PORTE.DIRSET	= PIN0_bm;									//set CLKOUT pin to output
     de0:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	
	//setup CAN pin interrupts
	PORTC.INTCTRL	= PORT_INT0LVL_HI_gc;
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	90 93 49 06 	sts	0x0649, r25	; 0x800649 <__TEXT_REGION_LENGTH__+0x700649>
	PORTD.INTCTRL	= PORT_INT0LVL_HI_gc | PORT_INT1LVL_HI_gc;	
     dea:	e0 e6       	ldi	r30, 0x60	; 96
     dec:	f6 e0       	ldi	r31, 0x06	; 6
     dee:	2f e0       	ldi	r18, 0x0F	; 15
     df0:	21 87       	std	Z+9, r18	; 0x09
	
	PORTD.INT0MASK	= PIN0_bm;						//PORTD0 has can1 interrupt
     df2:	82 87       	std	Z+10, r24	; 0x0a
	PORTD.PIN0CTRL	= PORT_OPC_PULLUP_gc | PORT_ISC_LEVEL_gc;
     df4:	2b e1       	ldi	r18, 0x1B	; 27
     df6:	20 8b       	std	Z+16, r18	; 0x10
	
	PORTD.INT1MASK	= PIN5_bm;						//PORTD5 has can2 interrupt
     df8:	30 e2       	ldi	r19, 0x20	; 32
     dfa:	33 87       	std	Z+11, r19	; 0x0b
	PORTD.PIN5CTRL	= PORT_OPC_PULLUP_gc | PORT_ISC_LEVEL_gc;
     dfc:	25 8b       	std	Z+21, r18	; 0x15
	PORTC.INT0MASK	= PIN2_bm;						//PORTC2 has can3 interrupt
	PORTC.PIN0CTRL	= PORT_OPC_PULLUP_gc | PORT_ISC_LEVEL_gc;
	#endif
	
	//buffer checking interrupt
	TCC1.CTRLA		= TC0_CLKSEL_DIV1_gc;			//32M/1/4800 ~ 100usec
     dfe:	e0 e4       	ldi	r30, 0x40	; 64
     e00:	f8 e0       	ldi	r31, 0x08	; 8
     e02:	80 83       	st	Z, r24
	TCC1.PER		= 3200;
     e04:	20 e8       	ldi	r18, 0x80	; 128
     e06:	3c e0       	ldi	r19, 0x0C	; 12
     e08:	26 a3       	std	Z+38, r18	; 0x26
     e0a:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.INTCTRLA	= TC0_OVFINTLVL_HI_gc;			//same priority as can interrupts
     e0c:	96 83       	std	Z+6, r25	; 0x06
	
	//we want to optimize performance, so we're going to time stuff
	//48MHz/48=1us timer, which we just freerun and reset whenever we want to start timing something
	//frame time timer
	TCC0.CTRLA		= TC0_CLKSEL_DIV1_gc;
     e0e:	e0 e0       	ldi	r30, 0x00	; 0
     e10:	f8 e0       	ldi	r31, 0x08	; 8
     e12:	80 83       	st	Z, r24
	TCC0.PER		= 32000;						//32MHz/32000=1ms
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	3d e7       	ldi	r19, 0x7D	; 125
     e18:	26 a3       	std	Z+38, r18	; 0x26
     e1a:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.INTCTRLA	= TC0_OVFINTLVL_HI_gc;			//interrupt on overflow
     e1c:	96 83       	std	Z+6, r25	; 0x06
	
	PORTB.OUTCLR	= (1 << 0);
     e1e:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
	
	can_system_init:
			
	//Init SPI and CAN interface:
	if(RST.STATUS & RST_WDRF_bm){ //if we come from a watchdog reset, we don't need to setup CAN
     e22:	c8 e7       	ldi	r28, 0x78	; 120
     e24:	d0 e0       	ldi	r29, 0x00	; 0
     e26:	88 81       	ld	r24, Y
     e28:	83 ff       	sbrs	r24, 3
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <hw_init+0x112>
		caninit = can_init(MCP_OPMOD_NORMAL, 1); //on second thought, we do
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	c6 de       	rcall	.-628    	; 0xbbe <can_init>
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <hw_init+0x118>
	} else {
		caninit = can_init(MCP_OPMOD_NORMAL, 1);
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	c2 de       	rcall	.-636    	; 0xbbe <can_init>
	}
	
	if(caninit){		
     e3a:	81 11       	cpse	r24, r1
     e3c:	0a c0       	rjmp	.+20     	; 0xe52 <hw_init+0x130>
     e3e:	ff ef       	ldi	r31, 0xFF	; 255
     e40:	29 ef       	ldi	r18, 0xF9	; 249
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	f1 50       	subi	r31, 0x01	; 1
     e46:	20 40       	sbci	r18, 0x00	; 0
     e48:	80 40       	sbci	r24, 0x00	; 0
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <hw_init+0x122>
     e4c:	00 c0       	rjmp	.+0      	; 0xe4e <hw_init+0x12c>
     e4e:	00 00       	nop
     e50:	ea cf       	rjmp	.-44     	; 0xe26 <hw_init+0x104>
			 *  \param[in] Value    Value to write to the protected location
			 */
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value) ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value)
			{
				__asm__ __volatile__ (
     e52:	25 e8       	ldi	r18, 0x85	; 133
     e54:	88 ed       	ldi	r24, 0xD8	; 216
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	a2 ea       	ldi	r26, 0xA2	; 162
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	1b be       	out	0x3b, r1	; 59
     e5e:	fd 01       	movw	r30, r26
     e60:	84 bf       	out	0x34, r24	; 52
     e62:	20 83       	st	Z, r18
	}
	
	//Set and enable interrupts with round-robin
	XMEGACLK_CCP_Write((void * ) &PMIC.CTRL, PMIC_RREN_bm | PMIC_LOLVLEN_bm | PMIC_HILVLEN_bm);//PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm| PMIC_HILVLEN_bm;
	
	USB_Init(USB_OPT_RC32MCLKSRC | USB_OPT_BUSEVENT_PRILOW);
     e64:	2b be       	out	0x3b, r2	; 59
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	e1 db       	rcall	.-2110   	; 0x62c <USB_Init>

	wdt_enable(WDTO_15MS);
     e6a:	93 e0       	ldi	r25, 0x03	; 3
     e6c:	88 ed       	ldi	r24, 0xD8	; 216
     e6e:	08 b6       	in	r0, 0x38	; 56
     e70:	18 be       	out	0x38, r1	; 56
     e72:	84 bf       	out	0x34, r24	; 52
     e74:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     e78:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     e7c:	81 fd       	sbrc	r24, 1
     e7e:	fc cf       	rjmp	.-8      	; 0xe78 <hw_init+0x156>
     e80:	08 be       	out	0x38, r0	; 56
	
	sei();
     e82:	78 94       	sei
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <reset_state>:

void reset_state(){
	startup_counter = 0; //car starting, reset startup counter for 1dc
     e8a:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <startup_counter>
	charging_state = 0; //Reset charging state 
     e8e:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <charging_state>
     e92:	08 95       	ret

00000e94 <main>:
}

int main(void){

	hw_init();
     e94:	46 df       	rcall	.-372    	; 0xd22 <hw_init>
     e96:	ff cf       	rjmp	.-2      	; 0xe96 <main+0x2>

00000e98 <__vector_14>:
		//Setup complete, wait for can messages to trigger interrupts
	}
}

//fires every 1ms
ISR(TCC0_OVF_vect){	
     e98:	1f 92       	push	r1
     e9a:	0f 92       	push	r0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	0f 92       	push	r0
     ea0:	11 24       	eor	r1, r1
     ea2:	2f 93       	push	r18
     ea4:	3f 93       	push	r19
     ea6:	4f 93       	push	r20
     ea8:	5f 93       	push	r21
     eaa:	6f 93       	push	r22
     eac:	7f 93       	push	r23
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31
	wdt_reset(); //Reset the watchdog
     eba:	a8 95       	wdr
	sec_timer--; //Increment the 1000ms timer
     ebc:	80 91 3e 20 	lds	r24, 0x203E	; 0x80203e <sec_timer>
     ec0:	90 91 3f 20 	lds	r25, 0x203F	; 0x80203f <sec_timer+0x1>
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <sec_timer>
     eca:	90 93 3f 20 	sts	0x203F, r25	; 0x80203f <sec_timer+0x1>
	
	//fires every second (1000ms tasks go here)
	if(sec_timer == 0){
     ece:	80 91 3e 20 	lds	r24, 0x203E	; 0x80203e <sec_timer>
     ed2:	90 91 3f 20 	lds	r25, 0x203F	; 0x80203f <sec_timer+0x1>
     ed6:	89 2b       	or	r24, r25
     ed8:	b9 f4       	brne	.+46     	; 0xf08 <__vector_14+0x70>
		PORTB.OUTCLR = (1 << 1);
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
		sec_timer = 1000;
     ee0:	88 ee       	ldi	r24, 0xE8	; 232
     ee2:	93 e0       	ldi	r25, 0x03	; 3
     ee4:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <sec_timer>
     ee8:	90 93 3f 20 	sts	0x203F, r25	; 0x80203f <sec_timer+0x1>

		if(My_Leaf == MY_LEAF_2011)
     eec:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
     ef0:	81 11       	cpse	r24, r1
     ef2:	0a c0       	rjmp	.+20     	; 0xf08 <__vector_14+0x70>
		{
			seconds_without_1f2++;
     ef4:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <seconds_without_1f2>
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <seconds_without_1f2>
			if(seconds_without_1f2 > 1)
     efe:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <seconds_without_1f2>
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	08 f0       	brcs	.+2      	; 0xf08 <__vector_14+0x70>
			{
				reset_state();
     f06:	c1 df       	rcall	.-126    	; 0xe8a <reset_state>
			}
		}
		
	}
}
     f08:	ff 91       	pop	r31
     f0a:	ef 91       	pop	r30
     f0c:	bf 91       	pop	r27
     f0e:	af 91       	pop	r26
     f10:	9f 91       	pop	r25
     f12:	8f 91       	pop	r24
     f14:	7f 91       	pop	r23
     f16:	6f 91       	pop	r22
     f18:	5f 91       	pop	r21
     f1a:	4f 91       	pop	r20
     f1c:	3f 91       	pop	r19
     f1e:	2f 91       	pop	r18
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <check_can1>:


void check_can1(void){
	uint8_t reg;
	
	if(tx0_buffer_end != tx0_buffer_pos){
     f2a:	90 91 af 21 	lds	r25, 0x21AF	; 0x8021af <tx0_buffer_end>
     f2e:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <tx0_buffer_pos>
     f32:	98 17       	cp	r25, r24
     f34:	f1 f0       	breq	.+60     	; 0xf72 <check_can1+0x48>
		//check if TXB0 is free use
		reg = can1_read(MCP_REG_TXB0CTRL);
     f36:	80 e3       	ldi	r24, 0x30	; 48
     f38:	b1 dd       	rcall	.-1182   	; 0xa9c <can1_read>
	
		if(!(reg & MCP_TXREQ_bm)){ //we're free to send
     f3a:	83 fd       	sbrc	r24, 3
     f3c:	1a c0       	rjmp	.+52     	; 0xf72 <check_can1+0x48>
			can1_load_txbuff(0, (can_frame_t *) &tx0_buffer[tx0_buffer_pos++]);
     f3e:	60 91 b0 21 	lds	r22, 0x21B0	; 0x8021b0 <tx0_buffer_pos>
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	86 0f       	add	r24, r22
     f46:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <tx0_buffer_pos>
     f4a:	8b e0       	ldi	r24, 0x0B	; 11
     f4c:	68 9f       	mul	r22, r24
     f4e:	b0 01       	movw	r22, r0
     f50:	11 24       	eor	r1, r1
     f52:	65 56       	subi	r22, 0x65	; 101
     f54:	7a 4d       	sbci	r23, 0xDA	; 218
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	13 dd       	rcall	.-1498   	; 0x980 <can1_load_txbuff>
			can1_rts(0);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	b8 dc       	rcall	.-1680   	; 0x8ce <can1_rts>
     f5e:	90 91 b0 21 	lds	r25, 0x21B0	; 0x8021b0 <tx0_buffer_pos>
			if(tx0_buffer_pos == tx0_buffer_end){ //end of buffer, reset
     f62:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <tx0_buffer_end>
     f66:	98 13       	cpse	r25, r24
     f68:	04 c0       	rjmp	.+8      	; 0xf72 <check_can1+0x48>
     f6a:	10 92 af 21 	sts	0x21AF, r1	; 0x8021af <tx0_buffer_end>
				tx0_buffer_end = 0;
     f6e:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <tx0_buffer_pos>
				tx0_buffer_pos = 0;
     f72:	08 95       	ret

00000f74 <send_can1>:
     f74:	ef 92       	push	r14
	if(can_bus == 1) send_can1(frame);
	if(can_bus == 2) send_can2(frame);
	if(can_bus == 3) send_can3(frame);
}

void send_can1(can_frame_t frame){	
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	2b 97       	sbiw	r28, 0x0b	; 11
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	e9 82       	std	Y+1, r14	; 0x01
     f8c:	fa 82       	std	Y+2, r15	; 0x02
     f8e:	0b 83       	std	Y+3, r16	; 0x03
     f90:	1c 83       	std	Y+4, r17	; 0x04
     f92:	2d 83       	std	Y+5, r18	; 0x05
     f94:	3e 83       	std	Y+6, r19	; 0x06
     f96:	4f 83       	std	Y+7, r20	; 0x07
     f98:	58 87       	std	Y+8, r21	; 0x08
     f9a:	69 87       	std	Y+9, r22	; 0x09
     f9c:	7a 87       	std	Y+10, r23	; 0x0a
     f9e:	8b 87       	std	Y+11, r24	; 0x0b
	//put in the buffer
	memcpy(&tx0_buffer[tx0_buffer_end++], &frame, sizeof(frame));
     fa0:	a0 91 af 21 	lds	r26, 0x21AF	; 0x8021af <tx0_buffer_end>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	8a 0f       	add	r24, r26
     fa8:	80 93 af 21 	sts	0x21AF, r24	; 0x8021af <tx0_buffer_end>
     fac:	9b e0       	ldi	r25, 0x0B	; 11
     fae:	a9 9f       	mul	r26, r25
     fb0:	d0 01       	movw	r26, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	a5 56       	subi	r26, 0x65	; 101
     fb6:	ba 4d       	sbci	r27, 0xDA	; 218
     fb8:	9b e0       	ldi	r25, 0x0B	; 11
     fba:	fe 01       	movw	r30, r28
     fbc:	31 96       	adiw	r30, 0x01	; 1
     fbe:	01 90       	ld	r0, Z+
     fc0:	0d 92       	st	X+, r0
     fc2:	9a 95       	dec	r25
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <send_can1+0x4a>
	
	if(tx0_buffer_end >= TXBUFFER_SIZE){ //silently handle buffer overflows
     fc6:	80 31       	cpi	r24, 0x10	; 16
     fc8:	18 f0       	brcs	.+6      	; 0xfd0 <send_can1+0x5c>
		tx0_buffer_end = TXBUFFER_SIZE - 1;
     fca:	8f e0       	ldi	r24, 0x0F	; 15
     fcc:	80 93 af 21 	sts	0x21AF, r24	; 0x8021af <tx0_buffer_end>
	}
	
	check_can1();
     fd0:	ac df       	rcall	.-168    	; 0xf2a <check_can1>
}
     fd2:	2b 96       	adiw	r28, 0x0b	; 11
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	08 95       	ret

00000fe6 <check_can2>:
}

void check_can2(void){
	uint8_t reg;
	
	if(tx2_buffer_end != tx2_buffer_pos){
     fe6:	90 91 ad 21 	lds	r25, 0x21AD	; 0x8021ad <tx2_buffer_end>
     fea:	80 91 ae 21 	lds	r24, 0x21AE	; 0x8021ae <tx2_buffer_pos>
     fee:	98 17       	cp	r25, r24
     ff0:	f1 f0       	breq	.+60     	; 0x102e <check_can2+0x48>
		//check if TXB0 is free use
		reg = can2_read(MCP_REG_TXB0CTRL);
     ff2:	80 e3       	ldi	r24, 0x30	; 48
     ff4:	68 dd       	rcall	.-1328   	; 0xac6 <can2_read>
		
		if(!(reg & MCP_TXREQ_bm)){ //we're free to send
     ff6:	83 fd       	sbrc	r24, 3
     ff8:	1a c0       	rjmp	.+52     	; 0x102e <check_can2+0x48>
			can2_load_txbuff(0, (can_frame_t *) &tx2_buffer[tx2_buffer_pos++]);
     ffa:	60 91 ae 21 	lds	r22, 0x21AE	; 0x8021ae <tx2_buffer_pos>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	86 0f       	add	r24, r22
    1002:	80 93 ae 21 	sts	0x21AE, r24	; 0x8021ae <tx2_buffer_pos>
    1006:	8b e0       	ldi	r24, 0x0B	; 11
    1008:	68 9f       	mul	r22, r24
    100a:	b0 01       	movw	r22, r0
    100c:	11 24       	eor	r1, r1
    100e:	6d 51       	subi	r22, 0x1D	; 29
    1010:	7b 4d       	sbci	r23, 0xDB	; 219
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	c2 dc       	rcall	.-1660   	; 0x99a <can2_load_txbuff>
			can2_rts(0);
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	67 dc       	rcall	.-1842   	; 0x8e8 <can2_rts>
    101a:	90 91 ae 21 	lds	r25, 0x21AE	; 0x8021ae <tx2_buffer_pos>
			if(tx2_buffer_pos == tx2_buffer_end){ //end of buffer, reset
    101e:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <tx2_buffer_end>
    1022:	98 13       	cpse	r25, r24
    1024:	04 c0       	rjmp	.+8      	; 0x102e <check_can2+0x48>
    1026:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <tx2_buffer_end>
				tx2_buffer_end = 0;
    102a:	10 92 ae 21 	sts	0x21AE, r1	; 0x8021ae <tx2_buffer_pos>
				tx2_buffer_pos = 0;
    102e:	08 95       	ret

00001030 <send_can2>:
    1030:	ef 92       	push	r14
			}
		}
	}
}

void send_can2(can_frame_t frame){
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	2b 97       	sbiw	r28, 0x0b	; 11
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	e9 82       	std	Y+1, r14	; 0x01
    1048:	fa 82       	std	Y+2, r15	; 0x02
    104a:	0b 83       	std	Y+3, r16	; 0x03
    104c:	1c 83       	std	Y+4, r17	; 0x04
    104e:	2d 83       	std	Y+5, r18	; 0x05
    1050:	3e 83       	std	Y+6, r19	; 0x06
    1052:	4f 83       	std	Y+7, r20	; 0x07
    1054:	58 87       	std	Y+8, r21	; 0x08
    1056:	69 87       	std	Y+9, r22	; 0x09
    1058:	7a 87       	std	Y+10, r23	; 0x0a
    105a:	8b 87       	std	Y+11, r24	; 0x0b
	//put in the buffer
	memcpy(&tx2_buffer[tx2_buffer_end++], &frame, sizeof(frame));
    105c:	a0 91 ad 21 	lds	r26, 0x21AD	; 0x8021ad <tx2_buffer_end>
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	8a 0f       	add	r24, r26
    1064:	80 93 ad 21 	sts	0x21AD, r24	; 0x8021ad <tx2_buffer_end>
    1068:	9b e0       	ldi	r25, 0x0B	; 11
    106a:	a9 9f       	mul	r26, r25
    106c:	d0 01       	movw	r26, r0
    106e:	11 24       	eor	r1, r1
    1070:	ad 51       	subi	r26, 0x1D	; 29
    1072:	bb 4d       	sbci	r27, 0xDB	; 219
    1074:	9b e0       	ldi	r25, 0x0B	; 11
    1076:	fe 01       	movw	r30, r28
    1078:	31 96       	adiw	r30, 0x01	; 1
    107a:	01 90       	ld	r0, Z+
    107c:	0d 92       	st	X+, r0
    107e:	9a 95       	dec	r25
    1080:	e1 f7       	brne	.-8      	; 0x107a <send_can2+0x4a>
	
	if(tx2_buffer_end >= TXBUFFER_SIZE){ //silently handle buffer overflows
    1082:	80 31       	cpi	r24, 0x10	; 16
    1084:	18 f0       	brcs	.+6      	; 0x108c <send_can2+0x5c>
		tx2_buffer_end = TXBUFFER_SIZE - 1;
    1086:	8f e0       	ldi	r24, 0x0F	; 15
    1088:	80 93 ad 21 	sts	0x21AD, r24	; 0x8021ad <tx2_buffer_end>
	}
	
	check_can2();
    108c:	ac df       	rcall	.-168    	; 0xfe6 <check_can2>
}
    108e:	2b 96       	adiw	r28, 0x0b	; 11
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	ff 90       	pop	r15
    109e:	ef 90       	pop	r14
    10a0:	08 95       	ret

000010a2 <check_can3>:
}

void check_can3(void){
	uint8_t reg;
	
	if(tx3_buffer_end != tx3_buffer_pos){
    10a2:	90 91 ab 21 	lds	r25, 0x21AB	; 0x8021ab <tx3_buffer_end>
    10a6:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <tx3_buffer_pos>
    10aa:	98 17       	cp	r25, r24
    10ac:	f1 f0       	breq	.+60     	; 0x10ea <check_can3+0x48>
		//check if TXB0 is free use
		reg = can3_read(MCP_REG_TXB0CTRL);
    10ae:	80 e3       	ldi	r24, 0x30	; 48
    10b0:	1f dd       	rcall	.-1474   	; 0xaf0 <can3_read>
		
		if(!(reg & MCP_TXREQ_bm)){ //we're free to send
    10b2:	83 fd       	sbrc	r24, 3
    10b4:	1a c0       	rjmp	.+52     	; 0x10ea <check_can3+0x48>
			can3_load_txbuff(0, (can_frame_t *) &tx3_buffer[tx3_buffer_pos++]);
    10b6:	60 91 ac 21 	lds	r22, 0x21AC	; 0x8021ac <tx3_buffer_pos>
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	86 0f       	add	r24, r22
    10be:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <tx3_buffer_pos>
    10c2:	8b e0       	ldi	r24, 0x0B	; 11
    10c4:	68 9f       	mul	r22, r24
    10c6:	b0 01       	movw	r22, r0
    10c8:	11 24       	eor	r1, r1
    10ca:	64 55       	subi	r22, 0x54	; 84
    10cc:	7b 4d       	sbci	r23, 0xDB	; 219
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	71 dc       	rcall	.-1822   	; 0x9b4 <can3_load_txbuff>
			can3_rts(0);
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	16 dc       	rcall	.-2004   	; 0x902 <can3_rts>
    10d6:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <tx3_buffer_pos>
			if(tx3_buffer_pos == tx3_buffer_end){ //end of buffer, reset
    10da:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <tx3_buffer_end>
    10de:	98 13       	cpse	r25, r24
    10e0:	04 c0       	rjmp	.+8      	; 0x10ea <check_can3+0x48>
    10e2:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <tx3_buffer_end>
				tx3_buffer_end = 0;
    10e6:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <tx3_buffer_pos>
				tx3_buffer_pos = 0;
    10ea:	08 95       	ret

000010ec <__vector_20>:
    10ec:	1f 92       	push	r1
		
	}
}

//fires approx. every 100us
ISR(TCC1_OVF_vect){
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	2f 93       	push	r18
    10f8:	3f 93       	push	r19
    10fa:	4f 93       	push	r20
    10fc:	5f 93       	push	r21
    10fe:	6f 93       	push	r22
    1100:	7f 93       	push	r23
    1102:	8f 93       	push	r24
    1104:	9f 93       	push	r25
    1106:	af 93       	push	r26
    1108:	bf 93       	push	r27
    110a:	ef 93       	push	r30
    110c:	ff 93       	push	r31
	check_can1();
    110e:	0d df       	rcall	.-486    	; 0xf2a <check_can1>
	check_can2();
    1110:	6a df       	rcall	.-300    	; 0xfe6 <check_can2>
	check_can3();
    1112:	c7 df       	rcall	.-114    	; 0x10a2 <check_can3>
    1114:	ff 91       	pop	r31
}
    1116:	ef 91       	pop	r30
    1118:	bf 91       	pop	r27
    111a:	af 91       	pop	r26
    111c:	9f 91       	pop	r25
    111e:	8f 91       	pop	r24
    1120:	7f 91       	pop	r23
    1122:	6f 91       	pop	r22
    1124:	5f 91       	pop	r21
    1126:	4f 91       	pop	r20
    1128:	3f 91       	pop	r19
    112a:	2f 91       	pop	r18
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

00001136 <send_can3>:
    1136:	ef 92       	push	r14
			}
		}
	}
}

void send_can3(can_frame_t frame){
    1138:	ff 92       	push	r15
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	2b 97       	sbiw	r28, 0x0b	; 11
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	e9 82       	std	Y+1, r14	; 0x01
    114e:	fa 82       	std	Y+2, r15	; 0x02
    1150:	0b 83       	std	Y+3, r16	; 0x03
    1152:	1c 83       	std	Y+4, r17	; 0x04
    1154:	2d 83       	std	Y+5, r18	; 0x05
    1156:	3e 83       	std	Y+6, r19	; 0x06
    1158:	4f 83       	std	Y+7, r20	; 0x07
    115a:	58 87       	std	Y+8, r21	; 0x08
    115c:	69 87       	std	Y+9, r22	; 0x09
    115e:	7a 87       	std	Y+10, r23	; 0x0a
    1160:	8b 87       	std	Y+11, r24	; 0x0b
	//put in the buffer
	memcpy(&tx3_buffer[tx3_buffer_end++], &frame, sizeof(frame));
    1162:	a0 91 ab 21 	lds	r26, 0x21AB	; 0x8021ab <tx3_buffer_end>
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	8a 0f       	add	r24, r26
    116a:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <tx3_buffer_end>
    116e:	9b e0       	ldi	r25, 0x0B	; 11
    1170:	a9 9f       	mul	r26, r25
    1172:	d0 01       	movw	r26, r0
    1174:	11 24       	eor	r1, r1
    1176:	a4 55       	subi	r26, 0x54	; 84
    1178:	bb 4d       	sbci	r27, 0xDB	; 219
    117a:	9b e0       	ldi	r25, 0x0B	; 11
    117c:	fe 01       	movw	r30, r28
    117e:	31 96       	adiw	r30, 0x01	; 1
    1180:	01 90       	ld	r0, Z+
    1182:	0d 92       	st	X+, r0
    1184:	9a 95       	dec	r25
    1186:	e1 f7       	brne	.-8      	; 0x1180 <send_can3+0x4a>
	
	if(tx3_buffer_end >= TXBUFFER_SIZE){ //silently handle buffer overflows
    1188:	80 31       	cpi	r24, 0x10	; 16
    118a:	18 f0       	brcs	.+6      	; 0x1192 <send_can3+0x5c>
		tx3_buffer_end = TXBUFFER_SIZE - 1;
    118c:	8f e0       	ldi	r24, 0x0F	; 15
    118e:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <tx3_buffer_end>
	}
	
	check_can3();
    1192:	87 df       	rcall	.-242    	; 0x10a2 <check_can3>
}
    1194:	2b 96       	adiw	r28, 0x0b	; 11
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	08 95       	ret

000011a8 <send_can>:
	}
	can_busy = 0;
}


void send_can(uint8_t can_bus, can_frame_t frame){
    11a8:	cf 92       	push	r12
    11aa:	df 92       	push	r13
    11ac:	ef 92       	push	r14
    11ae:	ff 92       	push	r15
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	2b 97       	sbiw	r28, 0x0b	; 11
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	c9 82       	std	Y+1, r12	; 0x01
    11c4:	da 82       	std	Y+2, r13	; 0x02
    11c6:	eb 82       	std	Y+3, r14	; 0x03
    11c8:	fc 82       	std	Y+4, r15	; 0x04
    11ca:	0d 83       	std	Y+5, r16	; 0x05
    11cc:	1e 83       	std	Y+6, r17	; 0x06
    11ce:	2f 83       	std	Y+7, r18	; 0x07
    11d0:	38 87       	std	Y+8, r19	; 0x08
    11d2:	49 87       	std	Y+9, r20	; 0x09
    11d4:	5a 87       	std	Y+10, r21	; 0x0a
    11d6:	6b 87       	std	Y+11, r22	; 0x0b
	if(can_bus == 1) send_can1(frame);
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	69 f4       	brne	.+26     	; 0x11f6 <send_can+0x4e>
    11dc:	ec 2c       	mov	r14, r12
    11de:	fd 2c       	mov	r15, r13
    11e0:	0b 81       	ldd	r16, Y+3	; 0x03
    11e2:	1c 81       	ldd	r17, Y+4	; 0x04
    11e4:	2d 81       	ldd	r18, Y+5	; 0x05
    11e6:	3e 81       	ldd	r19, Y+6	; 0x06
    11e8:	4f 81       	ldd	r20, Y+7	; 0x07
    11ea:	58 85       	ldd	r21, Y+8	; 0x08
    11ec:	69 85       	ldd	r22, Y+9	; 0x09
    11ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    11f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f2:	c0 de       	rcall	.-640    	; 0xf74 <send_can1>
    11f4:	1d c0       	rjmp	.+58     	; 0x1230 <send_can+0x88>
	if(can_bus == 2) send_can2(frame);
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	69 f4       	brne	.+26     	; 0x1214 <send_can+0x6c>
    11fa:	e9 80       	ldd	r14, Y+1	; 0x01
    11fc:	fa 80       	ldd	r15, Y+2	; 0x02
    11fe:	0b 81       	ldd	r16, Y+3	; 0x03
    1200:	1c 81       	ldd	r17, Y+4	; 0x04
    1202:	2d 81       	ldd	r18, Y+5	; 0x05
    1204:	3e 81       	ldd	r19, Y+6	; 0x06
    1206:	4f 81       	ldd	r20, Y+7	; 0x07
    1208:	58 85       	ldd	r21, Y+8	; 0x08
    120a:	69 85       	ldd	r22, Y+9	; 0x09
    120c:	7a 85       	ldd	r23, Y+10	; 0x0a
    120e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1210:	0f df       	rcall	.-482    	; 0x1030 <send_can2>
    1212:	0e c0       	rjmp	.+28     	; 0x1230 <send_can+0x88>
	if(can_bus == 3) send_can3(frame);
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	61 f4       	brne	.+24     	; 0x1230 <send_can+0x88>
    1218:	e9 80       	ldd	r14, Y+1	; 0x01
    121a:	fa 80       	ldd	r15, Y+2	; 0x02
    121c:	0b 81       	ldd	r16, Y+3	; 0x03
    121e:	1c 81       	ldd	r17, Y+4	; 0x04
    1220:	2d 81       	ldd	r18, Y+5	; 0x05
    1222:	3e 81       	ldd	r19, Y+6	; 0x06
    1224:	4f 81       	ldd	r20, Y+7	; 0x07
    1226:	58 85       	ldd	r21, Y+8	; 0x08
    1228:	69 85       	ldd	r22, Y+9	; 0x09
    122a:	7a 85       	ldd	r23, Y+10	; 0x0a
    122c:	8b 85       	ldd	r24, Y+11	; 0x0b
    122e:	83 df       	rcall	.-250    	; 0x1136 <send_can3>
}
    1230:	2b 96       	adiw	r28, 0x0b	; 11
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	08 95       	ret

00001248 <can_handler>:
	can_busy = 1;
	can_handler(3);
}

//VCM side of the CAN bus (in Muxsan)
void can_handler(uint8_t can_bus){
    1248:	af 92       	push	r10
    124a:	bf 92       	push	r11
    124c:	cf 92       	push	r12
    124e:	df 92       	push	r13
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	2b 97       	sbiw	r28, 0x0b	; 11
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	a8 2e       	mov	r10, r24
	can_frame_t frame;
	uint16_t temp2; //Temporary variable used in many functions
	uint8_t flag = can_read(MCP_REG_CANINTF, can_bus);
    1268:	68 2f       	mov	r22, r24
    126a:	8c e2       	ldi	r24, 0x2C	; 44
    126c:	56 dc       	rcall	.-1876   	; 0xb1a <can_read>
    126e:	b8 2e       	mov	r11, r24
		
	if (flag & (MCP_RX0IF | MCP_RX1IF)){
    1270:	83 70       	andi	r24, 0x03	; 3
    1272:	09 f4       	brne	.+2      	; 0x1276 <can_handler+0x2e>
    1274:	c0 c7       	rjmp	.+3968   	; 0x21f6 <can_handler+0xfae>

		if(flag & MCP_RX1IF){ //prioritize the rollover buffer
    1276:	b1 fe       	sbrs	r11, 1
    1278:	0c c0       	rjmp	.+24     	; 0x1292 <can_handler+0x4a>
			can_read_rx_buf(MCP_RX_1, &frame, can_bus);
    127a:	4a 2d       	mov	r20, r10
    127c:	be 01       	movw	r22, r28
    127e:	6f 5f       	subi	r22, 0xFF	; 255
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	84 e9       	ldi	r24, 0x94	; 148
    1284:	fd db       	rcall	.-2054   	; 0xa80 <can_read_rx_buf>
			can_bit_modify(MCP_REG_CANINTF, MCP_RX1IF, 0x00, can_bus);
    1286:	2a 2d       	mov	r18, r10
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	62 e0       	ldi	r22, 0x02	; 2
    128c:	8c e2       	ldi	r24, 0x2C	; 44
    128e:	c8 da       	rcall	.-2672   	; 0x820 <can_bit_modify>
    1290:	0b c0       	rjmp	.+22     	; 0x12a8 <can_handler+0x60>
			} else {
			can_read_rx_buf(MCP_RX_0, &frame, can_bus);
    1292:	4a 2d       	mov	r20, r10
    1294:	be 01       	movw	r22, r28
    1296:	6f 5f       	subi	r22, 0xFF	; 255
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	80 e9       	ldi	r24, 0x90	; 144
    129c:	f1 db       	rcall	.-2078   	; 0xa80 <can_read_rx_buf>
			can_bit_modify(MCP_REG_CANINTF, MCP_RX0IF, 0x00, can_bus);
    129e:	2a 2d       	mov	r18, r10
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	8c e2       	ldi	r24, 0x2C	; 44
    12a6:	bc da       	rcall	.-2696   	; 0x820 <can_bit_modify>
		}
		
		switch(frame.can_id){				
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	8b 30       	cpi	r24, 0x0B	; 11
    12ae:	25 e0       	ldi	r18, 0x05	; 5
    12b0:	92 07       	cpc	r25, r18
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <can_handler+0x6e>
    12b4:	2d c1       	rjmp	.+602    	; 0x1510 <can_handler+0x2c8>
    12b6:	50 f5       	brcc	.+84     	; 0x130c <can_handler+0xc4>
    12b8:	8d 3e       	cpi	r24, 0xED	; 237
    12ba:	a1 e0       	ldi	r26, 0x01	; 1
    12bc:	9a 07       	cpc	r25, r26
    12be:	09 f4       	brne	.+2      	; 0x12c2 <can_handler+0x7a>
    12c0:	4e c0       	rjmp	.+156    	; 0x135e <can_handler+0x116>
    12c2:	78 f4       	brcc	.+30     	; 0x12e2 <can_handler+0x9a>
    12c4:	8b 3d       	cpi	r24, 0xDB	; 219
    12c6:	e1 e0       	ldi	r30, 0x01	; 1
    12c8:	9e 07       	cpc	r25, r30
    12ca:	09 f4       	brne	.+2      	; 0x12ce <can_handler+0x86>
    12cc:	83 c0       	rjmp	.+262    	; 0x13d4 <can_handler+0x18c>
    12ce:	8c 3d       	cpi	r24, 0xDC	; 220
    12d0:	f1 e0       	ldi	r31, 0x01	; 1
    12d2:	9f 07       	cpc	r25, r31
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <can_handler+0x90>
    12d6:	f6 c0       	rjmp	.+492    	; 0x14c4 <can_handler+0x27c>
    12d8:	8a 3d       	cpi	r24, 0xDA	; 218
    12da:	91 40       	sbci	r25, 0x01	; 1
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <can_handler+0x98>
    12de:	44 c7       	rjmp	.+3720   	; 0x2168 <can_handler+0xf20>
    12e0:	4b c0       	rjmp	.+150    	; 0x1378 <can_handler+0x130>
    12e2:	84 38       	cpi	r24, 0x84	; 132
    12e4:	32 e0       	ldi	r19, 0x02	; 2
    12e6:	93 07       	cpc	r25, r19
    12e8:	09 f4       	brne	.+2      	; 0x12ec <can_handler+0xa4>
    12ea:	4e c0       	rjmp	.+156    	; 0x1388 <can_handler+0x140>
    12ec:	28 f4       	brcc	.+10     	; 0x12f8 <can_handler+0xb0>
    12ee:	82 3f       	cpi	r24, 0xF2	; 242
    12f0:	91 40       	sbci	r25, 0x01	; 1
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <can_handler+0xae>
    12f4:	b5 c6       	rjmp	.+3434   	; 0x2060 <can_handler+0xe18>
    12f6:	38 c7       	rjmp	.+3696   	; 0x2168 <can_handler+0xf20>
    12f8:	80 38       	cpi	r24, 0x80	; 128
    12fa:	e3 e0       	ldi	r30, 0x03	; 3
    12fc:	9e 07       	cpc	r25, r30
    12fe:	09 f4       	brne	.+2      	; 0x1302 <can_handler+0xba>
    1300:	d9 c0       	rjmp	.+434    	; 0x14b4 <can_handler+0x26c>
    1302:	8a 30       	cpi	r24, 0x0A	; 10
    1304:	95 40       	sbci	r25, 0x05	; 5
    1306:	09 f4       	brne	.+2      	; 0x130a <can_handler+0xc2>
    1308:	c8 c0       	rjmp	.+400    	; 0x149a <can_handler+0x252>
    130a:	2e c7       	rjmp	.+3676   	; 0x2168 <can_handler+0xf20>
    130c:	8c 3b       	cpi	r24, 0xBC	; 188
    130e:	25 e0       	ldi	r18, 0x05	; 5
    1310:	92 07       	cpc	r25, r18
    1312:	09 f4       	brne	.+2      	; 0x1316 <can_handler+0xce>
    1314:	b9 c1       	rjmp	.+882    	; 0x1688 <can_handler+0x440>
    1316:	78 f4       	brcc	.+30     	; 0x1336 <can_handler+0xee>
    1318:	8b 35       	cpi	r24, 0x5B	; 91
    131a:	a5 e0       	ldi	r26, 0x05	; 5
    131c:	9a 07       	cpc	r25, r26
    131e:	09 f4       	brne	.+2      	; 0x1322 <can_handler+0xda>
    1320:	75 c1       	rjmp	.+746    	; 0x160c <can_handler+0x3c4>
    1322:	8e 39       	cpi	r24, 0x9E	; 158
    1324:	b5 e0       	ldi	r27, 0x05	; 5
    1326:	9b 07       	cpc	r25, r27
    1328:	09 f4       	brne	.+2      	; 0x132c <can_handler+0xe4>
    132a:	c1 c6       	rjmp	.+3458   	; 0x20ae <can_handler+0xe66>
    132c:	8c 30       	cpi	r24, 0x0C	; 12
    132e:	95 40       	sbci	r25, 0x05	; 5
    1330:	09 f0       	breq	.+2      	; 0x1334 <can_handler+0xec>
    1332:	1a c7       	rjmp	.+3636   	; 0x2168 <can_handler+0xf20>
    1334:	ff c0       	rjmp	.+510    	; 0x1534 <can_handler+0x2ec>
    1336:	8b 3e       	cpi	r24, 0xEB	; 235
    1338:	f5 e0       	ldi	r31, 0x05	; 5
    133a:	9f 07       	cpc	r25, r31
    133c:	a1 f0       	breq	.+40     	; 0x1366 <can_handler+0x11e>
    133e:	28 f4       	brcc	.+10     	; 0x134a <can_handler+0x102>
    1340:	80 3c       	cpi	r24, 0xC0	; 192
    1342:	95 40       	sbci	r25, 0x05	; 5
    1344:	09 f4       	brne	.+2      	; 0x1348 <can_handler+0x100>
    1346:	0a c6       	rjmp	.+3092   	; 0x1f5c <can_handler+0xd14>
    1348:	0f c7       	rjmp	.+3614   	; 0x2168 <can_handler+0xf20>
    134a:	83 30       	cpi	r24, 0x03	; 3
    134c:	a6 e0       	ldi	r26, 0x06	; 6
    134e:	9a 07       	cpc	r25, r26
    1350:	09 f4       	brne	.+2      	; 0x1354 <can_handler+0x10c>
    1352:	d5 c6       	rjmp	.+3498   	; 0x20fe <can_handler+0xeb6>
    1354:	8c 38       	cpi	r24, 0x8C	; 140
    1356:	96 40       	sbci	r25, 0x06	; 6
    1358:	09 f4       	brne	.+2      	; 0x135c <can_handler+0x114>
    135a:	d1 c6       	rjmp	.+3490   	; 0x20fe <can_handler+0xeb6>
    135c:	05 c7       	rjmp	.+3594   	; 0x2168 <can_handler+0xf20>
			case 0x1ED:
				//this message is only sent by 62kWh packs. We use this info to autodetect battery size
				My_Battery = MY_BATTERY_62KWH;
    135e:	83 e0       	ldi	r24, 0x03	; 3
    1360:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <My_Battery>
			break;
    1364:	2a c7       	rjmp	.+3668   	; 0x21ba <can_handler+0xf72>
			case 0x5EB:
				//This message is sent by 40/62kWh packs.
				if (My_Battery == MY_BATTERY_62KWH)
    1366:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <My_Battery>
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	09 f4       	brne	.+2      	; 0x1370 <can_handler+0x128>
    136e:	25 c7       	rjmp	.+3658   	; 0x21ba <can_handler+0xf72>
				{
					//Do nothing, we already identified the battery
				}
				else
				{
					My_Battery = MY_BATTERY_40KWH;
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <My_Battery>
    1376:	21 c7       	rjmp	.+3650   	; 0x21ba <can_handler+0xf72>
				}
			break;
			case 0x1DA:

				if( My_Leaf == MY_LEAF_2011 )
    1378:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
    137c:	81 11       	cpse	r24, r1
    137e:	1d c7       	rjmp	.+3642   	; 0x21ba <can_handler+0xf72>
				{
					seen_1da = 10; // this variable is used to make the motor controller happy on shutdown
    1380:	8a e0       	ldi	r24, 0x0A	; 10
    1382:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <seen_1da>
    1386:	19 c7       	rjmp	.+3634   	; 0x21ba <can_handler+0xf72>

			break;
			case 0x284: // Hacky way of generating missing inverter message

				// Upon reading VCM originating 0x284 every 20ms, send the missing message(s) to the inverter every 40ms
				ticker40ms++;
    1388:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <ticker40ms>
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <ticker40ms>
			
				if (ticker40ms > 1)
    1392:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <ticker40ms>
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	08 f4       	brcc	.+2      	; 0x139c <can_handler+0x154>
    139a:	0f c7       	rjmp	.+3614   	; 0x21ba <can_handler+0xf72>
				{
					ticker40ms = 0;
    139c:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <ticker40ms>
					send_can(battery_can_bus, ZE1_355_message); // 40ms
    13a0:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <battery_can_bus>
    13a4:	c0 90 66 21 	lds	r12, 0x2166	; 0x802166 <ZE1_355_message>
    13a8:	d0 90 67 21 	lds	r13, 0x2167	; 0x802167 <ZE1_355_message+0x1>
    13ac:	e0 90 68 21 	lds	r14, 0x2168	; 0x802168 <ZE1_355_message+0x2>
    13b0:	f0 90 69 21 	lds	r15, 0x2169	; 0x802169 <ZE1_355_message+0x3>
    13b4:	00 91 6a 21 	lds	r16, 0x216A	; 0x80216a <ZE1_355_message+0x4>
    13b8:	10 91 6b 21 	lds	r17, 0x216B	; 0x80216b <ZE1_355_message+0x5>
    13bc:	20 91 6c 21 	lds	r18, 0x216C	; 0x80216c <ZE1_355_message+0x6>
    13c0:	30 91 6d 21 	lds	r19, 0x216D	; 0x80216d <ZE1_355_message+0x7>
    13c4:	40 91 6e 21 	lds	r20, 0x216E	; 0x80216e <ZE1_355_message+0x8>
    13c8:	50 91 6f 21 	lds	r21, 0x216F	; 0x80216f <ZE1_355_message+0x9>
    13cc:	60 91 70 21 	lds	r22, 0x2170	; 0x802170 <ZE1_355_message+0xa>
    13d0:	eb de       	rcall	.-554    	; 0x11a8 <send_can>
    13d2:	59 c7       	rjmp	.+3762   	; 0x2286 <can_handler+0x103e>
				}

			break;
			case 0x1DB:
				battery_can_bus = can_bus; // Guarantees that messages go to right bus. Without this there is a risk that the messages get sent to VCM instead of HVBAT
    13d4:	a0 92 40 20 	sts	0x2040, r10	; 0x802040 <battery_can_bus>

				if (frame.data[2] == 0xFF)
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	8f 3f       	cpi	r24, 0xFF	; 255
    13dc:	31 f4       	brne	.+12     	; 0x13ea <can_handler+0x1a2>
				{
					starting_up |= 1;
    13de:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <starting_up>
    13e2:	81 60       	ori	r24, 0x01	; 1
    13e4:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <starting_up>
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <can_handler+0x1ac>
				}
				else
				{
					starting_up &= ~1;
    13ea:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <starting_up>
    13ee:	8e 7f       	andi	r24, 0xFE	; 254
    13f0:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <starting_up>
				}
			
				if( My_Leaf == MY_LEAF_2011 )
    13f4:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
    13f8:	81 11       	cpse	r24, r1
    13fa:	08 c0       	rjmp	.+16     	; 0x140c <can_handler+0x1c4>
				{
					// seems like we just need to clear any faults and show permission
					if (VCM_WakeUpSleepCommand == 3)
    13fc:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <VCM_WakeUpSleepCommand>
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	21 f4       	brne	.+8      	; 0x140c <can_handler+0x1c4>
					{                                                  // VCM command: wakeup
						frame.data[3] = (frame.data[3] & 0xC0) | 0x2A; // FRLYON=1, INTERLOCK=1, POUT=normal limit
    1404:	8f 81       	ldd	r24, Y+7	; 0x07
    1406:	80 7c       	andi	r24, 0xC0	; 192
    1408:	8a 62       	ori	r24, 0x2A	; 42
    140a:	8f 83       	std	Y+7, r24	; 0x07
					}

				}

				if( My_Leaf == MY_LEAF_2014 )
    140c:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	09 f0       	breq	.+2      	; 0x1416 <can_handler+0x1ce>
    1414:	3d c0       	rjmp	.+122    	; 0x1490 <can_handler+0x248>
				{
					//Calculate the SOC% value to send to the dash (Battery sends 10-95% which needs to be rescaled to dash 0-100%)
					dash_soc = LB_MIN_SOC + (LB_MAX_SOC - LB_MIN_SOC) * (battery_soc_pptt - MINPERCENTAGE) / (MAXPERCENTAGE - MINPERCENTAGE);
    1416:	40 91 a1 21 	lds	r20, 0x21A1	; 0x8021a1 <battery_soc_pptt>
    141a:	50 91 a2 21 	lds	r21, 0x21A2	; 0x8021a2 <battery_soc_pptt+0x1>
    141e:	28 ee       	ldi	r18, 0xE8	; 232
    1420:	33 e0       	ldi	r19, 0x03	; 3
    1422:	42 9f       	mul	r20, r18
    1424:	c0 01       	movw	r24, r0
    1426:	43 9f       	mul	r20, r19
    1428:	90 0d       	add	r25, r0
    142a:	52 9f       	mul	r21, r18
    142c:	90 0d       	add	r25, r0
    142e:	11 24       	eor	r1, r1
    1430:	80 55       	subi	r24, 0x50	; 80
    1432:	93 4c       	sbci	r25, 0xC3	; 195
    1434:	64 e8       	ldi	r22, 0x84	; 132
    1436:	73 e0       	ldi	r23, 0x03	; 3
    1438:	d7 d7       	rcall	.+4014   	; 0x23e8 <__udivmodhi4>
    143a:	60 93 a3 21 	sts	0x21A3, r22	; 0x8021a3 <dash_soc>
    143e:	70 93 a4 21 	sts	0x21A4, r23	; 0x8021a4 <dash_soc+0x1>
					if (dash_soc < 0)
    1442:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <dash_soc>
    1446:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <dash_soc+0x1>
    144a:	99 23       	and	r25, r25
    144c:	24 f4       	brge	.+8      	; 0x1456 <can_handler+0x20e>
					{ //avoid underflow
						dash_soc = 0;
    144e:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <dash_soc>
    1452:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <dash_soc+0x1>
					}
					if (dash_soc > 1000)
    1456:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <dash_soc>
    145a:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <dash_soc+0x1>
    145e:	89 3e       	cpi	r24, 0xE9	; 233
    1460:	93 40       	sbci	r25, 0x03	; 3
    1462:	34 f0       	brlt	.+12     	; 0x1470 <can_handler+0x228>
					{ //avoid overflow
						dash_soc = 1000;
    1464:	88 ee       	ldi	r24, 0xE8	; 232
    1466:	93 e0       	ldi	r25, 0x03	; 3
    1468:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <dash_soc>
    146c:	90 93 a4 21 	sts	0x21A4, r25	; 0x8021a4 <dash_soc+0x1>
					}
					dash_soc = (dash_soc/10);
    1470:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <dash_soc>
    1474:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <dash_soc+0x1>
    1478:	6a e0       	ldi	r22, 0x0A	; 10
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	c9 d7       	rcall	.+3986   	; 0x2410 <__divmodhi4>
    147e:	60 93 a3 21 	sts	0x21A3, r22	; 0x8021a3 <dash_soc>
    1482:	70 93 a4 21 	sts	0x21A4, r23	; 0x8021a4 <dash_soc+0x1>
					frame.data[4] = (uint8_t) dash_soc;  //If this is not written, soc% on dash will say "---"
    1486:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <dash_soc>
    148a:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <dash_soc+0x1>
    148e:	88 87       	std	Y+8, r24	; 0x08
				}

				calc_crc8(&frame);
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	0e 94 1b 01 	call	0x236	; 0x236 <calc_crc8>
			break;
    1498:	f6 c6       	rjmp	.+3564   	; 0x2286 <can_handler+0x103e>
			case 0x50A:
				if(frame.can_dlc == 6)
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	86 30       	cpi	r24, 0x06	; 6
    149e:	19 f4       	brne	.+6      	; 0x14a6 <can_handler+0x25e>
				{	//On ZE0 this message is 6 bytes long
					My_Leaf = MY_LEAF_2011;
    14a0:	10 92 4f 20 	sts	0x204F, r1	; 0x80204f <My_Leaf>
    14a4:	8a c6       	rjmp	.+3348   	; 0x21ba <can_handler+0xf72>
				}
				else if(frame.can_dlc == 8)
    14a6:	88 30       	cpi	r24, 0x08	; 8
    14a8:	09 f0       	breq	.+2      	; 0x14ac <can_handler+0x264>
    14aa:	87 c6       	rjmp	.+3342   	; 0x21ba <can_handler+0xf72>
				{	//On AZE0 and ZE1, this message is 8 bytes long
					My_Leaf = MY_LEAF_2014;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	80 93 4f 20 	sts	0x204F, r24	; 0x80204f <My_Leaf>
    14b2:	83 c6       	rjmp	.+3334   	; 0x21ba <can_handler+0xf72>
				}
				break;
				case 0x380:
				if(can_bus == battery_can_bus)
    14b4:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <battery_can_bus>
    14b8:	a8 16       	cp	r10, r24
    14ba:	09 f4       	brne	.+2      	; 0x14be <can_handler+0x276>
    14bc:	7e c6       	rjmp	.+3324   	; 0x21ba <can_handler+0xf72>
					//message is originating from a 40/62kWh pack when quickcharging
				}
				else
				{
					//message is originating from ZE0 OBC
					My_Leaf = MY_LEAF_2011;
    14be:	10 92 4f 20 	sts	0x204F, r1	; 0x80204f <My_Leaf>
    14c2:	7b c6       	rjmp	.+3318   	; 0x21ba <can_handler+0xf72>
				}
			break;
			case 0x1DC:

				if (startup_counter == 0)
    14c4:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <startup_counter>
    14c8:	81 11       	cpse	r24, r1
    14ca:	0b c0       	rjmp	.+22     	; 0x14e2 <can_handler+0x29a>
				{
					frame.data[0] = 0xFF;
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	8c 83       	std	Y+4, r24	; 0x04
					frame.data[1] = 0xFF;
    14d0:	8d 83       	std	Y+5, r24	; 0x05
					frame.data[2] = 0xFF;
    14d2:	8e 83       	std	Y+6, r24	; 0x06
					frame.data[3] = 0xFF;
    14d4:	8f 83       	std	Y+7, r24	; 0x07
					frame.data[4] = 0x1F;
    14d6:	9f e1       	ldi	r25, 0x1F	; 31
    14d8:	98 87       	std	Y+8, r25	; 0x08
					frame.data[5] = 0xFF;
    14da:	89 87       	std	Y+9, r24	; 0x09
					frame.data[6] = 0xFC;
    14dc:	8c ef       	ldi	r24, 0xFC	; 252
    14de:	8a 87       	std	Y+10, r24	; 0x0a
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <can_handler+0x2ac>
				}
				else if (startup_counter < 7)
    14e2:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <startup_counter>
    14e6:	87 30       	cpi	r24, 0x07	; 7
    14e8:	28 f4       	brcc	.+10     	; 0x14f4 <can_handler+0x2ac>
				{
					frame.data[0] = 0xFF;
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	8c 83       	std	Y+4, r24	; 0x04
					frame.data[1] = 0xFF;
    14ee:	8d 83       	std	Y+5, r24	; 0x05
					frame.data[2] = 0xFF;
    14f0:	8e 83       	std	Y+6, r24	; 0x06
					frame.data[3] = 0xFF;
    14f2:	8f 83       	std	Y+7, r24	; 0x07
				else
				{
					//we are started up! let messages thru as they are
				}

				if (startup_counter < 255)
    14f4:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <startup_counter>
    14f8:	8f 3f       	cpi	r24, 0xFF	; 255
    14fa:	29 f0       	breq	.+10     	; 0x1506 <can_handler+0x2be>
				{
					startup_counter++;
    14fc:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <startup_counter>
    1500:	8f 5f       	subi	r24, 0xFF	; 255
    1502:	80 93 9f 21 	sts	0x219F, r24	; 0x80219f <startup_counter>
				}
			
				calc_crc8(&frame);
    1506:	ce 01       	movw	r24, r28
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	0e 94 1b 01 	call	0x236	; 0x236 <calc_crc8>
			break;
    150e:	bb c6       	rjmp	.+3446   	; 0x2286 <can_handler+0x103e>
			case 0x50B:

				VCM_WakeUpSleepCommand = (frame.data[3] & 0xC0) >> 6;
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	82 95       	swap	r24
    1514:	86 95       	lsr	r24
    1516:	86 95       	lsr	r24
    1518:	83 70       	andi	r24, 0x03	; 3
    151a:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <VCM_WakeUpSleepCommand>
			
				if( My_Leaf == MY_LEAF_2011 )
    151e:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
    1522:	81 11       	cpse	r24, r1
    1524:	4a c6       	rjmp	.+3220   	; 0x21ba <can_handler+0xf72>
				{
					CANMASK = (frame.data[2] & 0x04) >> 2;
    1526:	8e 81       	ldd	r24, Y+6	; 0x06
    1528:	82 fb       	bst	r24, 2
    152a:	88 27       	eor	r24, r24
    152c:	80 f9       	bld	r24, 0
    152e:	80 93 9b 21 	sts	0x219B, r24	; 0x80219b <CANMASK>
    1532:	43 c6       	rjmp	.+3206   	; 0x21ba <can_handler+0xf72>

				break;

				case 0x50C: // Fetch ALU and send lots of missing 100ms messages towards battery

				ALU_question = frame.data[4];
    1534:	88 85       	ldd	r24, Y+8	; 0x08
    1536:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <ALU_question>
				send_can(battery_can_bus, ZE1_625_message); // 100ms
    153a:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <battery_can_bus>
    153e:	c0 90 87 21 	lds	r12, 0x2187	; 0x802187 <ZE1_625_message>
    1542:	d0 90 88 21 	lds	r13, 0x2188	; 0x802188 <ZE1_625_message+0x1>
    1546:	e0 90 89 21 	lds	r14, 0x2189	; 0x802189 <ZE1_625_message+0x2>
    154a:	f0 90 8a 21 	lds	r15, 0x218A	; 0x80218a <ZE1_625_message+0x3>
    154e:	00 91 8b 21 	lds	r16, 0x218B	; 0x80218b <ZE1_625_message+0x4>
    1552:	10 91 8c 21 	lds	r17, 0x218C	; 0x80218c <ZE1_625_message+0x5>
    1556:	20 91 8d 21 	lds	r18, 0x218D	; 0x80218d <ZE1_625_message+0x6>
    155a:	30 91 8e 21 	lds	r19, 0x218E	; 0x80218e <ZE1_625_message+0x7>
    155e:	40 91 8f 21 	lds	r20, 0x218F	; 0x80218f <ZE1_625_message+0x8>
    1562:	50 91 90 21 	lds	r21, 0x2190	; 0x802190 <ZE1_625_message+0x9>
    1566:	60 91 91 21 	lds	r22, 0x2191	; 0x802191 <ZE1_625_message+0xa>
    156a:	1e de       	rcall	.-964    	; 0x11a8 <send_can>
				send_can(battery_can_bus, ZE1_5C5_message); // 100ms
    156c:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <battery_can_bus>
    1570:	c0 90 7c 21 	lds	r12, 0x217C	; 0x80217c <ZE1_5C5_message>
    1574:	d0 90 7d 21 	lds	r13, 0x217D	; 0x80217d <ZE1_5C5_message+0x1>
    1578:	e0 90 7e 21 	lds	r14, 0x217E	; 0x80217e <ZE1_5C5_message+0x2>
    157c:	f0 90 7f 21 	lds	r15, 0x217F	; 0x80217f <ZE1_5C5_message+0x3>
    1580:	00 91 80 21 	lds	r16, 0x2180	; 0x802180 <ZE1_5C5_message+0x4>
    1584:	10 91 81 21 	lds	r17, 0x2181	; 0x802181 <ZE1_5C5_message+0x5>
    1588:	20 91 82 21 	lds	r18, 0x2182	; 0x802182 <ZE1_5C5_message+0x6>
    158c:	30 91 83 21 	lds	r19, 0x2183	; 0x802183 <ZE1_5C5_message+0x7>
    1590:	40 91 84 21 	lds	r20, 0x2184	; 0x802184 <ZE1_5C5_message+0x8>
    1594:	50 91 85 21 	lds	r21, 0x2185	; 0x802185 <ZE1_5C5_message+0x9>
    1598:	60 91 86 21 	lds	r22, 0x2186	; 0x802186 <ZE1_5C5_message+0xa>
    159c:	05 de       	rcall	.-1014   	; 0x11a8 <send_can>
				send_can(battery_can_bus, ZE1_3B8_message); // 100ms
    159e:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <battery_can_bus>
    15a2:	c0 90 00 20 	lds	r12, 0x2000	; 0x802000 <ZE1_3B8_message>
    15a6:	d0 90 01 20 	lds	r13, 0x2001	; 0x802001 <ZE1_3B8_message+0x1>
    15aa:	e0 90 02 20 	lds	r14, 0x2002	; 0x802002 <ZE1_3B8_message+0x2>
    15ae:	f0 90 03 20 	lds	r15, 0x2003	; 0x802003 <ZE1_3B8_message+0x3>
    15b2:	00 91 04 20 	lds	r16, 0x2004	; 0x802004 <ZE1_3B8_message+0x4>
    15b6:	10 91 05 20 	lds	r17, 0x2005	; 0x802005 <ZE1_3B8_message+0x5>
    15ba:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <ZE1_3B8_message+0x6>
    15be:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <ZE1_3B8_message+0x7>
    15c2:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <ZE1_3B8_message+0x8>
    15c6:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <ZE1_3B8_message+0x9>
    15ca:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <ZE1_3B8_message+0xa>

				content_3B8 = (content_3B8 + 1) % 15;
    15ce:	ec dd       	rcall	.-1064   	; 0x11a8 <send_can>
    15d0:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <content_3B8>
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	6f e0       	ldi	r22, 0x0F	; 15
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	19 d7       	rcall	.+3634   	; 0x2410 <__divmodhi4>
    15de:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <content_3B8>
				//This takes advantage of the modulus operator % to reset the value of content_3B8 to 0 once it reaches 15.
				//It also eliminates the need for an if statement and a conditional check, which improves performance (but sacrifices readability)

				ZE1_3B8_message.data[2] = content_3B8; // 0 - 14 (0x00 - 0x0E)
    15e2:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <content_3B8>
    15e6:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <ZE1_3B8_message+0x5>

				if (flip_3B8)
    15ea:	80 91 92 21 	lds	r24, 0x2192	; 0x802192 <__data_end>
    15ee:	88 23       	and	r24, r24
    15f0:	31 f0       	breq	.+12     	; 0x15fe <can_handler+0x3b6>
				{
					flip_3B8 = 0;
    15f2:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <__data_end>
					ZE1_3B8_message.data[1] = 0xC8;
    15f6:	88 ec       	ldi	r24, 0xC8	; 200
    15f8:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <ZE1_3B8_message+0x4>
    15fc:	44 c6       	rjmp	.+3208   	; 0x2286 <can_handler+0x103e>
				}
				else
				{
					flip_3B8 = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <__data_end>
					ZE1_3B8_message.data[1] = 0xE8;
    1604:	88 ee       	ldi	r24, 0xE8	; 232
    1606:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <ZE1_3B8_message+0x4>
    160a:	3d c6       	rjmp	.+3194   	; 0x2286 <can_handler+0x103e>

				break;

				case 0x55B:

				if (ALU_question == 0xB2)
    160c:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <ALU_question>
    1610:	82 3b       	cpi	r24, 0xB2	; 178
    1612:	19 f4       	brne	.+6      	; 0x161a <can_handler+0x3d2>
				{
					frame.data[2] = 0xAA;
    1614:	8a ea       	ldi	r24, 0xAA	; 170
    1616:	8e 83       	std	Y+6, r24	; 0x06
    1618:	02 c0       	rjmp	.+4      	; 0x161e <can_handler+0x3d6>
				}
				else
				{
					frame.data[2] = 0x55;
    161a:	85 e5       	ldi	r24, 0x55	; 85
    161c:	8e 83       	std	Y+6, r24	; 0x06
				}

				if( My_Leaf == MY_LEAF_2011 )
    161e:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
    1622:	81 11       	cpse	r24, r1
    1624:	0d c0       	rjmp	.+26     	; 0x1640 <can_handler+0x3f8>
				{
					if (CANMASK == 0)
    1626:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <CANMASK>
    162a:	81 11       	cpse	r24, r1
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <can_handler+0x3f0>
					{
						frame.data[6] = (frame.data[6] & 0xCF) | 0x20;
    162e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1630:	8f 7c       	andi	r24, 0xCF	; 207
    1632:	80 62       	ori	r24, 0x20	; 32
    1634:	8a 87       	std	Y+10, r24	; 0x0a
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <can_handler+0x3f8>
					}
					else
					{
						frame.data[6] = (frame.data[6] & 0xCF) | 0x10;
    1638:	8a 85       	ldd	r24, Y+10	; 0x0a
    163a:	8f 7c       	andi	r24, 0xCF	; 207
    163c:	80 61       	ori	r24, 0x10	; 16
    163e:	8a 87       	std	Y+10, r24	; 0x0a
					}
				}

				battery_soc_pptt = (uint16_t) ((frame.data[0] << 2) | ((frame.data[1] & 0xC0) >> 6)); //Capture SOC% 0-100.0%
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	2d 81       	ldd	r18, Y+5	; 0x05
    164e:	22 95       	swap	r18
    1650:	26 95       	lsr	r18
    1652:	26 95       	lsr	r18
    1654:	23 70       	andi	r18, 0x03	; 3
    1656:	82 2b       	or	r24, r18
    1658:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <battery_soc_pptt>
    165c:	90 93 a2 21 	sts	0x21A2, r25	; 0x8021a2 <battery_soc_pptt+0x1>
				battery_soc = (uint8_t) (battery_soc_pptt / 10); // Capture SOC% 0-100
    1660:	20 91 a1 21 	lds	r18, 0x21A1	; 0x8021a1 <battery_soc_pptt>
    1664:	30 91 a2 21 	lds	r19, 0x21A2	; 0x8021a2 <battery_soc_pptt+0x1>
    1668:	ad ec       	ldi	r26, 0xCD	; 205
    166a:	bc ec       	ldi	r27, 0xCC	; 204
    166c:	e4 d6       	rcall	.+3528   	; 0x2436 <__umulhisi3>
    166e:	96 95       	lsr	r25
    1670:	87 95       	ror	r24
    1672:	96 95       	lsr	r25
    1674:	87 95       	ror	r24
    1676:	96 95       	lsr	r25
    1678:	87 95       	ror	r24
    167a:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <battery_soc>

				calc_crc8(&frame);
    167e:	ce 01       	movw	r24, r28
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	0e 94 1b 01 	call	0x236	; 0x236 <calc_crc8>

			break;
    1686:	ff c5       	rjmp	.+3070   	; 0x2286 <can_handler+0x103e>
			case 0x5BC:
				if(frame.data[0] != 0xFF){
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	8f 3f       	cpi	r24, 0xFF	; 255
    168c:	51 f0       	breq	.+20     	; 0x16a2 <can_handler+0x45a>
					starting_up &= ~4;
    168e:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <starting_up>
    1692:	8b 7f       	andi	r24, 0xFB	; 251
    1694:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <starting_up>
					} else {
					starting_up |= 4;
				}
				
				if( My_Leaf == MY_LEAF_2011 )
    1698:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
    169c:	81 11       	cpse	r24, r1
    169e:	19 c6       	rjmp	.+3122   	; 0x22d2 <can_handler+0x108a>
    16a0:	c9 c5       	rjmp	.+2962   	; 0x2234 <can_handler+0xfec>
			break;
			case 0x5BC:
				if(frame.data[0] != 0xFF){
					starting_up &= ~4;
					} else {
					starting_up |= 4;
    16a2:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <starting_up>
    16a6:	84 60       	ori	r24, 0x04	; 4
    16a8:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <starting_up>
				}
				
				if( My_Leaf == MY_LEAF_2011 )
    16ac:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
    16b0:	88 23       	and	r24, r24
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <can_handler+0x46e>
    16b4:	c3 c5       	rjmp	.+2950   	; 0x223c <can_handler+0xff4>
    16b6:	0d c6       	rjmp	.+3098   	; 0x22d2 <can_handler+0x108a>
				{
				temp2 = ((frame.data[4] & 0xFE) >> 1); //Collect SOH value
    16b8:	18 85       	ldd	r17, Y+8	; 0x08
				if(frame.data[0] != 0xFF){ //Only modify values when GIDS value is available, that means LBC has booted
					if((frame.data[5] & 0x10) == 0x00){ //If everything is normal (no output power limit reason)
						convert_array_to_5bc(&leaf_40kwh_5bc, (uint8_t *) &frame.data);
    16ba:	be 01       	movw	r22, r28
    16bc:	6c 5f       	subi	r22, 0xFC	; 252
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	83 e9       	ldi	r24, 0x93	; 147
    16c2:	95 e2       	ldi	r25, 0x25	; 37
    16c4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <convert_array_to_5bc>
						swap_5bc_remaining.LB_CAPR = leaf_40kwh_5bc.LB_CAPR;
    16c8:	a3 e9       	ldi	r26, 0x93	; 147
    16ca:	b5 e2       	ldi	r27, 0x25	; 37
    16cc:	2c 91       	ld	r18, X
    16ce:	44 e9       	ldi	r20, 0x94	; 148
    16d0:	55 e2       	ldi	r21, 0x25	; 37
    16d2:	fa 01       	movw	r30, r20
    16d4:	80 81       	ld	r24, Z
    16d6:	98 2f       	mov	r25, r24
    16d8:	93 70       	andi	r25, 0x03	; 3
    16da:	20 93 36 20 	sts	0x2036, r18	; 0x802036 <swap_5bc_remaining>
    16de:	27 e3       	ldi	r18, 0x37	; 55
    16e0:	30 e2       	ldi	r19, 0x20	; 32
    16e2:	f9 01       	movw	r30, r18
    16e4:	80 81       	ld	r24, Z
    16e6:	8c 7f       	andi	r24, 0xFC	; 252
    16e8:	89 2b       	or	r24, r25
    16ea:	80 83       	st	Z, r24
						swap_5bc_full.LB_CAPR = leaf_40kwh_5bc.LB_CAPR;
    16ec:	2c 91       	ld	r18, X
    16ee:	da 01       	movw	r26, r20
    16f0:	8c 91       	ld	r24, X
    16f2:	98 2f       	mov	r25, r24
    16f4:	93 70       	andi	r25, 0x03	; 3
    16f6:	4e e2       	ldi	r20, 0x2E	; 46
    16f8:	50 e2       	ldi	r21, 0x20	; 32
    16fa:	fa 01       	movw	r30, r20
    16fc:	20 83       	st	Z, r18
    16fe:	ef e2       	ldi	r30, 0x2F	; 47
    1700:	f0 e2       	ldi	r31, 0x20	; 32
    1702:	80 81       	ld	r24, Z
    1704:	8c 7f       	andi	r24, 0xFC	; 252
    1706:	89 2b       	or	r24, r25
    1708:	80 83       	st	Z, r24
						swap_5bc_remaining.LB_SOH = temp2;
    170a:	2a e3       	ldi	r18, 0x3A	; 58
    170c:	30 e2       	ldi	r19, 0x20	; 32
    170e:	81 2f       	mov	r24, r17
    1710:	86 95       	lsr	r24
    1712:	d9 01       	movw	r26, r18
    1714:	9c 91       	ld	r25, X
    1716:	90 78       	andi	r25, 0x80	; 128
    1718:	98 2b       	or	r25, r24
    171a:	9c 93       	st	X, r25
						swap_5bc_full.LB_SOH = temp2;
    171c:	22 e3       	ldi	r18, 0x32	; 50
    171e:	30 e2       	ldi	r19, 0x20	; 32
    1720:	d9 01       	movw	r26, r18
    1722:	9c 91       	ld	r25, X
    1724:	90 78       	andi	r25, 0x80	; 128
    1726:	89 2b       	or	r24, r25
    1728:	8c 93       	st	X, r24
						current_capacity_wh = swap_5bc_full.LB_CAPR * 80;
    172a:	da 01       	movw	r26, r20
    172c:	8c 91       	ld	r24, X
    172e:	20 81       	ld	r18, Z
    1730:	92 2f       	mov	r25, r18
    1732:	93 70       	andi	r25, 0x03	; 3
    1734:	40 e5       	ldi	r20, 0x50	; 80
    1736:	48 9f       	mul	r20, r24
    1738:	90 01       	movw	r18, r0
    173a:	49 9f       	mul	r20, r25
    173c:	30 0d       	add	r19, r0
    173e:	11 24       	eor	r1, r1
    1740:	20 93 98 21 	sts	0x2198, r18	; 0x802198 <current_capacity_wh>
    1744:	30 93 99 21 	sts	0x2199, r19	; 0x802199 <current_capacity_wh+0x1>
						main_battery_temp = frame.data[3] / 20;					
    1748:	8f 81       	ldd	r24, Y+7	; 0x07
    174a:	9d ec       	ldi	r25, 0xCD	; 205
    174c:	89 9f       	mul	r24, r25
    174e:	81 2d       	mov	r24, r1
    1750:	11 24       	eor	r1, r1
    1752:	82 95       	swap	r24
    1754:	8f 70       	andi	r24, 0x0F	; 15
    1756:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <main_battery_temp>
						main_battery_temp = temp_lut[main_battery_temp] + 1;
    175a:	e0 91 95 21 	lds	r30, 0x2195	; 0x802195 <main_battery_temp>
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	ee 5b       	subi	r30, 0xBE	; 190
    1762:	ff 4d       	sbci	r31, 0xDF	; 223
    1764:	80 81       	ld	r24, Z
    1766:	8f 5f       	subi	r24, 0xFF	; 255
    1768:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <main_battery_temp>
					swap_5bc_full.LB_CAPR = 0x3FF;
					swap_5bc_remaining.LB_RCHGTIM = 0;
					swap_5bc_remaining.LB_RCHGTCON = 0;
				}
			
				skip_5bc--;
    176c:	80 91 41 20 	lds	r24, 0x2041	; 0x802041 <skip_5bc>
    1770:	81 50       	subi	r24, 0x01	; 1
    1772:	80 93 41 20 	sts	0x2041, r24	; 0x802041 <skip_5bc>
				if(!skip_5bc){
    1776:	80 91 41 20 	lds	r24, 0x2041	; 0x802041 <skip_5bc>
    177a:	81 11       	cpse	r24, r1
    177c:	ef c2       	rjmp	.+1502   	; 0x1d5c <can_handler+0xb14>
					switch(cmr_idx){
    177e:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <cmr_idx>
    1782:	8a 30       	cpi	r24, 0x0A	; 10
    1784:	09 f4       	brne	.+2      	; 0x1788 <can_handler+0x540>
    1786:	f3 c0       	rjmp	.+486    	; 0x196e <can_handler+0x726>
    1788:	30 f4       	brcc	.+12     	; 0x1796 <can_handler+0x54e>
    178a:	88 23       	and	r24, r24
    178c:	59 f0       	breq	.+22     	; 0x17a4 <can_handler+0x55c>
    178e:	89 30       	cpi	r24, 0x09	; 9
    1790:	09 f4       	brne	.+2      	; 0x1794 <can_handler+0x54c>
    1792:	6d c0       	rjmp	.+218    	; 0x186e <can_handler+0x626>
    1794:	96 c2       	rjmp	.+1324   	; 0x1cc2 <can_handler+0xa7a>
    1796:	81 31       	cpi	r24, 0x11	; 17
    1798:	09 f4       	brne	.+2      	; 0x179c <can_handler+0x554>
    179a:	7f c1       	rjmp	.+766    	; 0x1a9a <can_handler+0x852>
    179c:	82 31       	cpi	r24, 0x12	; 18
    179e:	09 f4       	brne	.+2      	; 0x17a2 <can_handler+0x55a>
    17a0:	fc c1       	rjmp	.+1016   	; 0x1b9a <can_handler+0x952>
    17a2:	8f c2       	rjmp	.+1310   	; 0x1cc2 <can_handler+0xa7a>
						case QUICK_CHARGE:
						//swap_5bc_remaining.LB_RCHGTIM = 8191; //1FFFh is unavailable value
						swap_5bc_full.LB_RCHGTIM = 0x003C; //60 minutes remaining
    17a4:	64 e3       	ldi	r22, 0x34	; 52
    17a6:	70 e2       	ldi	r23, 0x20	; 32
    17a8:	fb 01       	movw	r30, r22
    17aa:	80 81       	ld	r24, Z
    17ac:	87 70       	andi	r24, 0x07	; 7
    17ae:	80 6e       	ori	r24, 0xE0	; 224
    17b0:	80 83       	st	Z, r24
    17b2:	e5 e3       	ldi	r30, 0x35	; 53
    17b4:	f0 e2       	ldi	r31, 0x20	; 32
    17b6:	80 81       	ld	r24, Z
    17b8:	88 7f       	andi	r24, 0xF8	; 248
    17ba:	81 60       	ori	r24, 0x01	; 1
    17bc:	80 83       	st	Z, r24
    17be:	80 81       	ld	r24, Z
    17c0:	87 70       	andi	r24, 0x07	; 7
    17c2:	80 83       	st	Z, r24
						swap_5bc_full.LB_RCHGTIM = swap_5bc_remaining.LB_RCHGTIM;
    17c4:	2c e3       	ldi	r18, 0x3C	; 60
    17c6:	30 e2       	ldi	r19, 0x20	; 32
    17c8:	d9 01       	movw	r26, r18
    17ca:	8c 91       	ld	r24, X
    17cc:	86 95       	lsr	r24
    17ce:	86 95       	lsr	r24
    17d0:	86 95       	lsr	r24
    17d2:	4d e3       	ldi	r20, 0x3D	; 61
    17d4:	50 e2       	ldi	r21, 0x20	; 32
    17d6:	da 01       	movw	r26, r20
    17d8:	9c 91       	ld	r25, X
    17da:	92 95       	swap	r25
    17dc:	99 0f       	add	r25, r25
    17de:	90 7e       	andi	r25, 0xE0	; 224
    17e0:	89 2b       	or	r24, r25
    17e2:	9c 91       	ld	r25, X
    17e4:	48 2f       	mov	r20, r24
    17e6:	44 0f       	add	r20, r20
    17e8:	44 0f       	add	r20, r20
    17ea:	44 0f       	add	r20, r20
    17ec:	db 01       	movw	r26, r22
    17ee:	5c 91       	ld	r21, X
    17f0:	57 70       	andi	r21, 0x07	; 7
    17f2:	45 2b       	or	r20, r21
    17f4:	4c 93       	st	X, r20
    17f6:	82 95       	swap	r24
    17f8:	86 95       	lsr	r24
    17fa:	87 70       	andi	r24, 0x07	; 7
    17fc:	40 81       	ld	r20, Z
    17fe:	48 7f       	andi	r20, 0xF8	; 248
    1800:	84 2b       	or	r24, r20
    1802:	80 83       	st	Z, r24
    1804:	89 2f       	mov	r24, r25
    1806:	88 7f       	andi	r24, 0xF8	; 248
    1808:	90 81       	ld	r25, Z
    180a:	97 70       	andi	r25, 0x07	; 7
    180c:	89 2b       	or	r24, r25
    180e:	80 83       	st	Z, r24
						swap_5bc_remaining.LB_RCHGTCON = cmr_idx;
    1810:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <cmr_idx>
    1814:	98 2f       	mov	r25, r24
    1816:	9f 71       	andi	r25, 0x1F	; 31
    1818:	eb e3       	ldi	r30, 0x3B	; 59
    181a:	f0 e2       	ldi	r31, 0x20	; 32
    181c:	82 95       	swap	r24
    181e:	88 0f       	add	r24, r24
    1820:	88 0f       	add	r24, r24
    1822:	80 7c       	andi	r24, 0xC0	; 192
    1824:	40 81       	ld	r20, Z
    1826:	4f 73       	andi	r20, 0x3F	; 63
    1828:	84 2b       	or	r24, r20
    182a:	80 83       	st	Z, r24
    182c:	89 2f       	mov	r24, r25
    182e:	86 95       	lsr	r24
    1830:	86 95       	lsr	r24
    1832:	f9 01       	movw	r30, r18
    1834:	90 81       	ld	r25, Z
    1836:	98 7f       	andi	r25, 0xF8	; 248
    1838:	89 2b       	or	r24, r25
    183a:	80 83       	st	Z, r24
						swap_5bc_full.LB_RCHGTCON = cmr_idx;
    183c:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <cmr_idx>
    1840:	98 2f       	mov	r25, r24
    1842:	9f 71       	andi	r25, 0x1F	; 31
    1844:	e3 e3       	ldi	r30, 0x33	; 51
    1846:	f0 e2       	ldi	r31, 0x20	; 32
    1848:	82 95       	swap	r24
    184a:	88 0f       	add	r24, r24
    184c:	88 0f       	add	r24, r24
    184e:	80 7c       	andi	r24, 0xC0	; 192
    1850:	20 81       	ld	r18, Z
    1852:	2f 73       	andi	r18, 0x3F	; 63
    1854:	82 2b       	or	r24, r18
    1856:	80 83       	st	Z, r24
    1858:	89 2f       	mov	r24, r25
    185a:	86 95       	lsr	r24
    185c:	86 95       	lsr	r24
    185e:	9c 91       	ld	r25, X
    1860:	98 7f       	andi	r25, 0xF8	; 248
    1862:	89 2b       	or	r24, r25
    1864:	8c 93       	st	X, r24
						cmr_idx = NORMAL_CHARGE_200V_100;
    1866:	89 e0       	ldi	r24, 0x09	; 9
    1868:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <cmr_idx>
						break;
						case NORMAL_CHARGE_200V_100:
						swap_5bc_remaining.LB_RCHGTIM = (time_100_with_200V_in_minutes - ((time_100_with_200V_in_minutes * battery_soc)/100));
    186c:	2a c2       	rjmp	.+1108   	; 0x1cc2 <can_handler+0xa7a>
    186e:	40 91 a5 21 	lds	r20, 0x21A5	; 0x8021a5 <battery_soc>
    1872:	2e ea       	ldi	r18, 0xAE	; 174
    1874:	31 e0       	ldi	r19, 0x01	; 1
    1876:	42 9f       	mul	r20, r18
    1878:	c0 01       	movw	r24, r0
    187a:	43 9f       	mul	r20, r19
    187c:	90 0d       	add	r25, r0
    187e:	11 24       	eor	r1, r1
    1880:	64 e6       	ldi	r22, 0x64	; 100
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	c5 d5       	rcall	.+2954   	; 0x2410 <__divmodhi4>
    1886:	c9 01       	movw	r24, r18
    1888:	86 1b       	sub	r24, r22
    188a:	97 0b       	sbc	r25, r23
    188c:	9f 71       	andi	r25, 0x1F	; 31
    188e:	ac e3       	ldi	r26, 0x3C	; 60
    1890:	b0 e2       	ldi	r27, 0x20	; 32
    1892:	28 2f       	mov	r18, r24
    1894:	22 0f       	add	r18, r18
    1896:	22 0f       	add	r18, r18
    1898:	22 0f       	add	r18, r18
    189a:	3c 91       	ld	r19, X
    189c:	37 70       	andi	r19, 0x07	; 7
    189e:	23 2b       	or	r18, r19
    18a0:	2c 93       	st	X, r18
    18a2:	ed e3       	ldi	r30, 0x3D	; 61
    18a4:	f0 e2       	ldi	r31, 0x20	; 32
    18a6:	82 95       	swap	r24
    18a8:	86 95       	lsr	r24
    18aa:	87 70       	andi	r24, 0x07	; 7
    18ac:	20 81       	ld	r18, Z
    18ae:	28 7f       	andi	r18, 0xF8	; 248
    18b0:	82 2b       	or	r24, r18
    18b2:	80 83       	st	Z, r24
    18b4:	89 2f       	mov	r24, r25
    18b6:	88 0f       	add	r24, r24
    18b8:	88 0f       	add	r24, r24
    18ba:	88 0f       	add	r24, r24
    18bc:	90 81       	ld	r25, Z
    18be:	97 70       	andi	r25, 0x07	; 7
    18c0:	89 2b       	or	r24, r25
    18c2:	80 83       	st	Z, r24
						swap_5bc_full.LB_RCHGTIM = swap_5bc_remaining.LB_RCHGTIM;
    18c4:	8c 91       	ld	r24, X
    18c6:	86 95       	lsr	r24
    18c8:	86 95       	lsr	r24
    18ca:	86 95       	lsr	r24
    18cc:	90 81       	ld	r25, Z
    18ce:	92 95       	swap	r25
    18d0:	99 0f       	add	r25, r25
    18d2:	90 7e       	andi	r25, 0xE0	; 224
    18d4:	89 2b       	or	r24, r25
    18d6:	90 81       	ld	r25, Z
    18d8:	64 e3       	ldi	r22, 0x34	; 52
    18da:	70 e2       	ldi	r23, 0x20	; 32
    18dc:	28 2f       	mov	r18, r24
    18de:	22 0f       	add	r18, r18
    18e0:	22 0f       	add	r18, r18
    18e2:	22 0f       	add	r18, r18
    18e4:	fb 01       	movw	r30, r22
    18e6:	30 81       	ld	r19, Z
    18e8:	37 70       	andi	r19, 0x07	; 7
    18ea:	23 2b       	or	r18, r19
    18ec:	20 83       	st	Z, r18
    18ee:	25 e3       	ldi	r18, 0x35	; 53
    18f0:	30 e2       	ldi	r19, 0x20	; 32
    18f2:	82 95       	swap	r24
    18f4:	86 95       	lsr	r24
    18f6:	87 70       	andi	r24, 0x07	; 7
    18f8:	f9 01       	movw	r30, r18
    18fa:	40 81       	ld	r20, Z
    18fc:	48 7f       	andi	r20, 0xF8	; 248
    18fe:	84 2b       	or	r24, r20
    1900:	80 83       	st	Z, r24
    1902:	89 2f       	mov	r24, r25
    1904:	88 7f       	andi	r24, 0xF8	; 248
    1906:	90 81       	ld	r25, Z
    1908:	97 70       	andi	r25, 0x07	; 7
    190a:	89 2b       	or	r24, r25
    190c:	80 83       	st	Z, r24
						swap_5bc_remaining.LB_RCHGTCON = cmr_idx;
    190e:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <cmr_idx>
    1912:	98 2f       	mov	r25, r24
    1914:	9f 71       	andi	r25, 0x1F	; 31
    1916:	4b e3       	ldi	r20, 0x3B	; 59
    1918:	50 e2       	ldi	r21, 0x20	; 32
    191a:	82 95       	swap	r24
    191c:	88 0f       	add	r24, r24
    191e:	88 0f       	add	r24, r24
    1920:	80 7c       	andi	r24, 0xC0	; 192
    1922:	fa 01       	movw	r30, r20
    1924:	20 81       	ld	r18, Z
    1926:	2f 73       	andi	r18, 0x3F	; 63
    1928:	82 2b       	or	r24, r18
    192a:	80 83       	st	Z, r24
    192c:	89 2f       	mov	r24, r25
    192e:	86 95       	lsr	r24
    1930:	86 95       	lsr	r24
    1932:	9c 91       	ld	r25, X
    1934:	98 7f       	andi	r25, 0xF8	; 248
    1936:	89 2b       	or	r24, r25
    1938:	8c 93       	st	X, r24
						swap_5bc_full.LB_RCHGTCON = cmr_idx;
    193a:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <cmr_idx>
    193e:	98 2f       	mov	r25, r24
    1940:	9f 71       	andi	r25, 0x1F	; 31
    1942:	a3 e3       	ldi	r26, 0x33	; 51
    1944:	b0 e2       	ldi	r27, 0x20	; 32
    1946:	82 95       	swap	r24
    1948:	88 0f       	add	r24, r24
    194a:	88 0f       	add	r24, r24
    194c:	80 7c       	andi	r24, 0xC0	; 192
    194e:	2c 91       	ld	r18, X
    1950:	2f 73       	andi	r18, 0x3F	; 63
    1952:	82 2b       	or	r24, r18
    1954:	8c 93       	st	X, r24
    1956:	89 2f       	mov	r24, r25
    1958:	86 95       	lsr	r24
    195a:	86 95       	lsr	r24
    195c:	db 01       	movw	r26, r22
    195e:	9c 91       	ld	r25, X
    1960:	98 7f       	andi	r25, 0xF8	; 248
    1962:	89 2b       	or	r24, r25
    1964:	8c 93       	st	X, r24
						cmr_idx = NORMAL_CHARGE_200V_80;
    1966:	8a e0       	ldi	r24, 0x0A	; 10
    1968:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <cmr_idx>
						break;
    196c:	aa c1       	rjmp	.+852    	; 0x1cc2 <can_handler+0xa7a>
						case NORMAL_CHARGE_200V_80:
						if(battery_soc > 80){swap_5bc_remaining.LB_RCHGTIM = 0;}
    196e:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <battery_soc>
    1972:	81 35       	cpi	r24, 0x51	; 81
    1974:	70 f0       	brcs	.+28     	; 0x1992 <can_handler+0x74a>
    1976:	ec e3       	ldi	r30, 0x3C	; 60
    1978:	f0 e2       	ldi	r31, 0x20	; 32
    197a:	80 81       	ld	r24, Z
    197c:	87 70       	andi	r24, 0x07	; 7
    197e:	80 83       	st	Z, r24
    1980:	ed e3       	ldi	r30, 0x3D	; 61
    1982:	f0 e2       	ldi	r31, 0x20	; 32
    1984:	80 81       	ld	r24, Z
    1986:	88 7f       	andi	r24, 0xF8	; 248
    1988:	80 83       	st	Z, r24
    198a:	80 81       	ld	r24, Z
    198c:	87 70       	andi	r24, 0x07	; 7
    198e:	80 83       	st	Z, r24
						else{swap_5bc_remaining.LB_RCHGTIM = (time_80_with_200V_in_minutes - ((time_80_with_200V_in_minutes * battery_soc)/100)); }
    1990:	2b c0       	rjmp	.+86     	; 0x19e8 <can_handler+0x7a0>
    1992:	40 91 a5 21 	lds	r20, 0x21A5	; 0x8021a5 <battery_soc>
    1996:	24 e5       	ldi	r18, 0x54	; 84
    1998:	31 e0       	ldi	r19, 0x01	; 1
    199a:	42 9f       	mul	r20, r18
    199c:	c0 01       	movw	r24, r0
    199e:	43 9f       	mul	r20, r19
    19a0:	90 0d       	add	r25, r0
    19a2:	11 24       	eor	r1, r1
    19a4:	64 e6       	ldi	r22, 0x64	; 100
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	33 d5       	rcall	.+2662   	; 0x2410 <__divmodhi4>
    19aa:	c9 01       	movw	r24, r18
    19ac:	86 1b       	sub	r24, r22
    19ae:	97 0b       	sbc	r25, r23
    19b0:	9f 71       	andi	r25, 0x1F	; 31
    19b2:	ec e3       	ldi	r30, 0x3C	; 60
    19b4:	f0 e2       	ldi	r31, 0x20	; 32
    19b6:	28 2f       	mov	r18, r24
    19b8:	22 0f       	add	r18, r18
    19ba:	22 0f       	add	r18, r18
    19bc:	22 0f       	add	r18, r18
    19be:	30 81       	ld	r19, Z
    19c0:	37 70       	andi	r19, 0x07	; 7
    19c2:	23 2b       	or	r18, r19
    19c4:	20 83       	st	Z, r18
    19c6:	ed e3       	ldi	r30, 0x3D	; 61
    19c8:	f0 e2       	ldi	r31, 0x20	; 32
    19ca:	82 95       	swap	r24
    19cc:	86 95       	lsr	r24
    19ce:	87 70       	andi	r24, 0x07	; 7
    19d0:	20 81       	ld	r18, Z
    19d2:	28 7f       	andi	r18, 0xF8	; 248
    19d4:	82 2b       	or	r24, r18
    19d6:	80 83       	st	Z, r24
    19d8:	89 2f       	mov	r24, r25
    19da:	88 0f       	add	r24, r24
    19dc:	88 0f       	add	r24, r24
    19de:	88 0f       	add	r24, r24
    19e0:	90 81       	ld	r25, Z
    19e2:	97 70       	andi	r25, 0x07	; 7
    19e4:	89 2b       	or	r24, r25
    19e6:	80 83       	st	Z, r24
						swap_5bc_full.LB_RCHGTIM = swap_5bc_remaining.LB_RCHGTIM;
    19e8:	6c e3       	ldi	r22, 0x3C	; 60
    19ea:	70 e2       	ldi	r23, 0x20	; 32
    19ec:	fb 01       	movw	r30, r22
    19ee:	80 81       	ld	r24, Z
    19f0:	86 95       	lsr	r24
    19f2:	86 95       	lsr	r24
    19f4:	86 95       	lsr	r24
    19f6:	ed e3       	ldi	r30, 0x3D	; 61
    19f8:	f0 e2       	ldi	r31, 0x20	; 32
    19fa:	90 81       	ld	r25, Z
    19fc:	92 95       	swap	r25
    19fe:	99 0f       	add	r25, r25
    1a00:	90 7e       	andi	r25, 0xE0	; 224
    1a02:	89 2b       	or	r24, r25
    1a04:	90 81       	ld	r25, Z
    1a06:	e4 e3       	ldi	r30, 0x34	; 52
    1a08:	f0 e2       	ldi	r31, 0x20	; 32
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	22 0f       	add	r18, r18
    1a0e:	22 0f       	add	r18, r18
    1a10:	22 0f       	add	r18, r18
    1a12:	30 81       	ld	r19, Z
    1a14:	37 70       	andi	r19, 0x07	; 7
    1a16:	23 2b       	or	r18, r19
    1a18:	20 83       	st	Z, r18
    1a1a:	25 e3       	ldi	r18, 0x35	; 53
    1a1c:	30 e2       	ldi	r19, 0x20	; 32
    1a1e:	82 95       	swap	r24
    1a20:	86 95       	lsr	r24
    1a22:	87 70       	andi	r24, 0x07	; 7
    1a24:	d9 01       	movw	r26, r18
    1a26:	4c 91       	ld	r20, X
    1a28:	48 7f       	andi	r20, 0xF8	; 248
    1a2a:	84 2b       	or	r24, r20
    1a2c:	8c 93       	st	X, r24
    1a2e:	89 2f       	mov	r24, r25
    1a30:	88 7f       	andi	r24, 0xF8	; 248
    1a32:	9c 91       	ld	r25, X
    1a34:	97 70       	andi	r25, 0x07	; 7
    1a36:	89 2b       	or	r24, r25
    1a38:	8c 93       	st	X, r24
						swap_5bc_remaining.LB_RCHGTCON = cmr_idx;
    1a3a:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <cmr_idx>
    1a3e:	98 2f       	mov	r25, r24
    1a40:	9f 71       	andi	r25, 0x1F	; 31
    1a42:	4b e3       	ldi	r20, 0x3B	; 59
    1a44:	50 e2       	ldi	r21, 0x20	; 32
    1a46:	82 95       	swap	r24
    1a48:	88 0f       	add	r24, r24
    1a4a:	88 0f       	add	r24, r24
    1a4c:	80 7c       	andi	r24, 0xC0	; 192
    1a4e:	da 01       	movw	r26, r20
    1a50:	2c 91       	ld	r18, X
    1a52:	2f 73       	andi	r18, 0x3F	; 63
    1a54:	82 2b       	or	r24, r18
    1a56:	8c 93       	st	X, r24
    1a58:	89 2f       	mov	r24, r25
    1a5a:	86 95       	lsr	r24
    1a5c:	86 95       	lsr	r24
    1a5e:	db 01       	movw	r26, r22
    1a60:	9c 91       	ld	r25, X
    1a62:	98 7f       	andi	r25, 0xF8	; 248
    1a64:	89 2b       	or	r24, r25
    1a66:	8c 93       	st	X, r24
						swap_5bc_full.LB_RCHGTCON = cmr_idx;
    1a68:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <cmr_idx>
    1a6c:	98 2f       	mov	r25, r24
    1a6e:	9f 71       	andi	r25, 0x1F	; 31
    1a70:	a3 e3       	ldi	r26, 0x33	; 51
    1a72:	b0 e2       	ldi	r27, 0x20	; 32
    1a74:	82 95       	swap	r24
    1a76:	88 0f       	add	r24, r24
    1a78:	88 0f       	add	r24, r24
    1a7a:	80 7c       	andi	r24, 0xC0	; 192
    1a7c:	2c 91       	ld	r18, X
    1a7e:	2f 73       	andi	r18, 0x3F	; 63
    1a80:	82 2b       	or	r24, r18
    1a82:	8c 93       	st	X, r24
    1a84:	89 2f       	mov	r24, r25
    1a86:	86 95       	lsr	r24
    1a88:	86 95       	lsr	r24
    1a8a:	90 81       	ld	r25, Z
    1a8c:	98 7f       	andi	r25, 0xF8	; 248
    1a8e:	89 2b       	or	r24, r25
    1a90:	80 83       	st	Z, r24
						cmr_idx = NORMAL_CHARGE_100V_100;
    1a92:	81 e1       	ldi	r24, 0x11	; 17
    1a94:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <cmr_idx>
						break;
						case NORMAL_CHARGE_100V_100:
						swap_5bc_remaining.LB_RCHGTIM = (time_100_with_100V_in_minutes - ((time_100_with_100V_in_minutes * battery_soc)/100));
    1a98:	14 c1       	rjmp	.+552    	; 0x1cc2 <can_handler+0xa7a>
    1a9a:	40 91 a5 21 	lds	r20, 0x21A5	; 0x8021a5 <battery_soc>
    1a9e:	2c eb       	ldi	r18, 0xBC	; 188
    1aa0:	32 e0       	ldi	r19, 0x02	; 2
    1aa2:	42 9f       	mul	r20, r18
    1aa4:	c0 01       	movw	r24, r0
    1aa6:	43 9f       	mul	r20, r19
    1aa8:	90 0d       	add	r25, r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	64 e6       	ldi	r22, 0x64	; 100
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	af d4       	rcall	.+2398   	; 0x2410 <__divmodhi4>
    1ab2:	c9 01       	movw	r24, r18
    1ab4:	86 1b       	sub	r24, r22
    1ab6:	97 0b       	sbc	r25, r23
    1ab8:	9f 71       	andi	r25, 0x1F	; 31
    1aba:	ac e3       	ldi	r26, 0x3C	; 60
    1abc:	b0 e2       	ldi	r27, 0x20	; 32
    1abe:	28 2f       	mov	r18, r24
    1ac0:	22 0f       	add	r18, r18
    1ac2:	22 0f       	add	r18, r18
    1ac4:	22 0f       	add	r18, r18
    1ac6:	3c 91       	ld	r19, X
    1ac8:	37 70       	andi	r19, 0x07	; 7
    1aca:	23 2b       	or	r18, r19
    1acc:	2c 93       	st	X, r18
    1ace:	ed e3       	ldi	r30, 0x3D	; 61
    1ad0:	f0 e2       	ldi	r31, 0x20	; 32
    1ad2:	82 95       	swap	r24
    1ad4:	86 95       	lsr	r24
    1ad6:	87 70       	andi	r24, 0x07	; 7
    1ad8:	20 81       	ld	r18, Z
    1ada:	28 7f       	andi	r18, 0xF8	; 248
    1adc:	82 2b       	or	r24, r18
    1ade:	80 83       	st	Z, r24
    1ae0:	89 2f       	mov	r24, r25
    1ae2:	88 0f       	add	r24, r24
    1ae4:	88 0f       	add	r24, r24
    1ae6:	88 0f       	add	r24, r24
    1ae8:	90 81       	ld	r25, Z
    1aea:	97 70       	andi	r25, 0x07	; 7
    1aec:	89 2b       	or	r24, r25
    1aee:	80 83       	st	Z, r24
						swap_5bc_full.LB_RCHGTIM = swap_5bc_remaining.LB_RCHGTIM;
    1af0:	8c 91       	ld	r24, X
    1af2:	86 95       	lsr	r24
    1af4:	86 95       	lsr	r24
    1af6:	86 95       	lsr	r24
    1af8:	90 81       	ld	r25, Z
    1afa:	92 95       	swap	r25
    1afc:	99 0f       	add	r25, r25
    1afe:	90 7e       	andi	r25, 0xE0	; 224
    1b00:	89 2b       	or	r24, r25
    1b02:	90 81       	ld	r25, Z
    1b04:	64 e3       	ldi	r22, 0x34	; 52
    1b06:	70 e2       	ldi	r23, 0x20	; 32
    1b08:	28 2f       	mov	r18, r24
    1b0a:	22 0f       	add	r18, r18
    1b0c:	22 0f       	add	r18, r18
    1b0e:	22 0f       	add	r18, r18
    1b10:	fb 01       	movw	r30, r22
    1b12:	30 81       	ld	r19, Z
    1b14:	37 70       	andi	r19, 0x07	; 7
    1b16:	23 2b       	or	r18, r19
    1b18:	20 83       	st	Z, r18
    1b1a:	25 e3       	ldi	r18, 0x35	; 53
    1b1c:	30 e2       	ldi	r19, 0x20	; 32
    1b1e:	82 95       	swap	r24
    1b20:	86 95       	lsr	r24
    1b22:	87 70       	andi	r24, 0x07	; 7
    1b24:	f9 01       	movw	r30, r18
    1b26:	40 81       	ld	r20, Z
    1b28:	48 7f       	andi	r20, 0xF8	; 248
    1b2a:	84 2b       	or	r24, r20
    1b2c:	80 83       	st	Z, r24
    1b2e:	89 2f       	mov	r24, r25
    1b30:	88 7f       	andi	r24, 0xF8	; 248
    1b32:	90 81       	ld	r25, Z
    1b34:	97 70       	andi	r25, 0x07	; 7
    1b36:	89 2b       	or	r24, r25
    1b38:	80 83       	st	Z, r24
						swap_5bc_remaining.LB_RCHGTCON = cmr_idx;
    1b3a:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <cmr_idx>
    1b3e:	98 2f       	mov	r25, r24
    1b40:	9f 71       	andi	r25, 0x1F	; 31
    1b42:	4b e3       	ldi	r20, 0x3B	; 59
    1b44:	50 e2       	ldi	r21, 0x20	; 32
    1b46:	82 95       	swap	r24
    1b48:	88 0f       	add	r24, r24
    1b4a:	88 0f       	add	r24, r24
    1b4c:	80 7c       	andi	r24, 0xC0	; 192
    1b4e:	fa 01       	movw	r30, r20
    1b50:	20 81       	ld	r18, Z
    1b52:	2f 73       	andi	r18, 0x3F	; 63
    1b54:	82 2b       	or	r24, r18
    1b56:	80 83       	st	Z, r24
    1b58:	89 2f       	mov	r24, r25
    1b5a:	86 95       	lsr	r24
    1b5c:	86 95       	lsr	r24
    1b5e:	9c 91       	ld	r25, X
    1b60:	98 7f       	andi	r25, 0xF8	; 248
    1b62:	89 2b       	or	r24, r25
    1b64:	8c 93       	st	X, r24
						swap_5bc_full.LB_RCHGTCON = cmr_idx;
    1b66:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <cmr_idx>
    1b6a:	98 2f       	mov	r25, r24
    1b6c:	9f 71       	andi	r25, 0x1F	; 31
    1b6e:	a3 e3       	ldi	r26, 0x33	; 51
    1b70:	b0 e2       	ldi	r27, 0x20	; 32
    1b72:	82 95       	swap	r24
    1b74:	88 0f       	add	r24, r24
    1b76:	88 0f       	add	r24, r24
    1b78:	80 7c       	andi	r24, 0xC0	; 192
    1b7a:	2c 91       	ld	r18, X
    1b7c:	2f 73       	andi	r18, 0x3F	; 63
    1b7e:	82 2b       	or	r24, r18
    1b80:	8c 93       	st	X, r24
    1b82:	89 2f       	mov	r24, r25
    1b84:	86 95       	lsr	r24
    1b86:	86 95       	lsr	r24
    1b88:	db 01       	movw	r26, r22
    1b8a:	9c 91       	ld	r25, X
    1b8c:	98 7f       	andi	r25, 0xF8	; 248
    1b8e:	89 2b       	or	r24, r25
    1b90:	8c 93       	st	X, r24
						cmr_idx = NORMAL_CHARGE_100V_80;
    1b92:	82 e1       	ldi	r24, 0x12	; 18
    1b94:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <cmr_idx>
						break;
    1b98:	94 c0       	rjmp	.+296    	; 0x1cc2 <can_handler+0xa7a>
						case NORMAL_CHARGE_100V_80:
						if(battery_soc > 80){swap_5bc_remaining.LB_RCHGTIM = 0;}
    1b9a:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <battery_soc>
    1b9e:	81 35       	cpi	r24, 0x51	; 81
    1ba0:	70 f0       	brcs	.+28     	; 0x1bbe <can_handler+0x976>
    1ba2:	ec e3       	ldi	r30, 0x3C	; 60
    1ba4:	f0 e2       	ldi	r31, 0x20	; 32
    1ba6:	80 81       	ld	r24, Z
    1ba8:	87 70       	andi	r24, 0x07	; 7
    1baa:	80 83       	st	Z, r24
    1bac:	ed e3       	ldi	r30, 0x3D	; 61
    1bae:	f0 e2       	ldi	r31, 0x20	; 32
    1bb0:	80 81       	ld	r24, Z
    1bb2:	88 7f       	andi	r24, 0xF8	; 248
    1bb4:	80 83       	st	Z, r24
    1bb6:	80 81       	ld	r24, Z
    1bb8:	87 70       	andi	r24, 0x07	; 7
    1bba:	80 83       	st	Z, r24
						else{swap_5bc_remaining.LB_RCHGTIM = (time_80_with_100V_in_minutes - ((time_80_with_100V_in_minutes * battery_soc)/100)); }
    1bbc:	2b c0       	rjmp	.+86     	; 0x1c14 <can_handler+0x9cc>
    1bbe:	40 91 a5 21 	lds	r20, 0x21A5	; 0x8021a5 <battery_soc>
    1bc2:	20 e3       	ldi	r18, 0x30	; 48
    1bc4:	32 e0       	ldi	r19, 0x02	; 2
    1bc6:	42 9f       	mul	r20, r18
    1bc8:	c0 01       	movw	r24, r0
    1bca:	43 9f       	mul	r20, r19
    1bcc:	90 0d       	add	r25, r0
    1bce:	11 24       	eor	r1, r1
    1bd0:	64 e6       	ldi	r22, 0x64	; 100
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	1d d4       	rcall	.+2106   	; 0x2410 <__divmodhi4>
    1bd6:	c9 01       	movw	r24, r18
    1bd8:	86 1b       	sub	r24, r22
    1bda:	97 0b       	sbc	r25, r23
    1bdc:	9f 71       	andi	r25, 0x1F	; 31
    1bde:	ec e3       	ldi	r30, 0x3C	; 60
    1be0:	f0 e2       	ldi	r31, 0x20	; 32
    1be2:	28 2f       	mov	r18, r24
    1be4:	22 0f       	add	r18, r18
    1be6:	22 0f       	add	r18, r18
    1be8:	22 0f       	add	r18, r18
    1bea:	30 81       	ld	r19, Z
    1bec:	37 70       	andi	r19, 0x07	; 7
    1bee:	23 2b       	or	r18, r19
    1bf0:	20 83       	st	Z, r18
    1bf2:	ed e3       	ldi	r30, 0x3D	; 61
    1bf4:	f0 e2       	ldi	r31, 0x20	; 32
    1bf6:	82 95       	swap	r24
    1bf8:	86 95       	lsr	r24
    1bfa:	87 70       	andi	r24, 0x07	; 7
    1bfc:	20 81       	ld	r18, Z
    1bfe:	28 7f       	andi	r18, 0xF8	; 248
    1c00:	82 2b       	or	r24, r18
    1c02:	80 83       	st	Z, r24
    1c04:	89 2f       	mov	r24, r25
    1c06:	88 0f       	add	r24, r24
    1c08:	88 0f       	add	r24, r24
    1c0a:	88 0f       	add	r24, r24
    1c0c:	90 81       	ld	r25, Z
    1c0e:	97 70       	andi	r25, 0x07	; 7
    1c10:	89 2b       	or	r24, r25
    1c12:	80 83       	st	Z, r24
						swap_5bc_full.LB_RCHGTIM = swap_5bc_remaining.LB_RCHGTIM;
    1c14:	6c e3       	ldi	r22, 0x3C	; 60
    1c16:	70 e2       	ldi	r23, 0x20	; 32
    1c18:	fb 01       	movw	r30, r22
    1c1a:	80 81       	ld	r24, Z
    1c1c:	86 95       	lsr	r24
    1c1e:	86 95       	lsr	r24
    1c20:	86 95       	lsr	r24
    1c22:	ed e3       	ldi	r30, 0x3D	; 61
    1c24:	f0 e2       	ldi	r31, 0x20	; 32
    1c26:	90 81       	ld	r25, Z
    1c28:	92 95       	swap	r25
    1c2a:	99 0f       	add	r25, r25
    1c2c:	90 7e       	andi	r25, 0xE0	; 224
    1c2e:	89 2b       	or	r24, r25
    1c30:	90 81       	ld	r25, Z
    1c32:	e4 e3       	ldi	r30, 0x34	; 52
    1c34:	f0 e2       	ldi	r31, 0x20	; 32
    1c36:	28 2f       	mov	r18, r24
    1c38:	22 0f       	add	r18, r18
    1c3a:	22 0f       	add	r18, r18
    1c3c:	22 0f       	add	r18, r18
    1c3e:	30 81       	ld	r19, Z
    1c40:	37 70       	andi	r19, 0x07	; 7
    1c42:	23 2b       	or	r18, r19
    1c44:	20 83       	st	Z, r18
    1c46:	25 e3       	ldi	r18, 0x35	; 53
    1c48:	30 e2       	ldi	r19, 0x20	; 32
    1c4a:	82 95       	swap	r24
    1c4c:	86 95       	lsr	r24
    1c4e:	87 70       	andi	r24, 0x07	; 7
    1c50:	d9 01       	movw	r26, r18
    1c52:	4c 91       	ld	r20, X
    1c54:	48 7f       	andi	r20, 0xF8	; 248
    1c56:	84 2b       	or	r24, r20
    1c58:	8c 93       	st	X, r24
    1c5a:	89 2f       	mov	r24, r25
    1c5c:	88 7f       	andi	r24, 0xF8	; 248
    1c5e:	9c 91       	ld	r25, X
    1c60:	97 70       	andi	r25, 0x07	; 7
    1c62:	89 2b       	or	r24, r25
    1c64:	8c 93       	st	X, r24
						swap_5bc_remaining.LB_RCHGTCON = cmr_idx;
    1c66:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <cmr_idx>
    1c6a:	98 2f       	mov	r25, r24
    1c6c:	9f 71       	andi	r25, 0x1F	; 31
    1c6e:	4b e3       	ldi	r20, 0x3B	; 59
    1c70:	50 e2       	ldi	r21, 0x20	; 32
    1c72:	82 95       	swap	r24
    1c74:	88 0f       	add	r24, r24
    1c76:	88 0f       	add	r24, r24
    1c78:	80 7c       	andi	r24, 0xC0	; 192
    1c7a:	da 01       	movw	r26, r20
    1c7c:	2c 91       	ld	r18, X
    1c7e:	2f 73       	andi	r18, 0x3F	; 63
    1c80:	82 2b       	or	r24, r18
    1c82:	8c 93       	st	X, r24
    1c84:	89 2f       	mov	r24, r25
    1c86:	86 95       	lsr	r24
    1c88:	86 95       	lsr	r24
    1c8a:	db 01       	movw	r26, r22
    1c8c:	9c 91       	ld	r25, X
    1c8e:	98 7f       	andi	r25, 0xF8	; 248
    1c90:	89 2b       	or	r24, r25
    1c92:	8c 93       	st	X, r24
						swap_5bc_full.LB_RCHGTCON = cmr_idx;
    1c94:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <cmr_idx>
    1c98:	98 2f       	mov	r25, r24
    1c9a:	9f 71       	andi	r25, 0x1F	; 31
    1c9c:	a3 e3       	ldi	r26, 0x33	; 51
    1c9e:	b0 e2       	ldi	r27, 0x20	; 32
    1ca0:	82 95       	swap	r24
    1ca2:	88 0f       	add	r24, r24
    1ca4:	88 0f       	add	r24, r24
    1ca6:	80 7c       	andi	r24, 0xC0	; 192
    1ca8:	2c 91       	ld	r18, X
    1caa:	2f 73       	andi	r18, 0x3F	; 63
    1cac:	82 2b       	or	r24, r18
    1cae:	8c 93       	st	X, r24
    1cb0:	89 2f       	mov	r24, r25
    1cb2:	86 95       	lsr	r24
    1cb4:	86 95       	lsr	r24
    1cb6:	90 81       	ld	r25, Z
    1cb8:	98 7f       	andi	r25, 0xF8	; 248
    1cba:	89 2b       	or	r24, r25
    1cbc:	80 83       	st	Z, r24
						cmr_idx = QUICK_CHARGE;
    1cbe:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <cmr_idx>
						break;
					}

					swap_5bc_remaining.LB_AVET = main_battery_temp;
    1cc2:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <main_battery_temp>
    1cc6:	80 93 39 20 	sts	0x2039, r24	; 0x802039 <swap_5bc_remaining+0x3>
					swap_5bc_full.LB_AVET = main_battery_temp;
    1cca:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <main_battery_temp>
    1cce:	80 93 31 20 	sts	0x2031, r24	; 0x802031 <swap_5bc_full+0x3>
					
					//ZE0 LEAF just cannot cope with capacities >24kWh
					//when quick charging, we change capacity to reflect a proportion of 21.3kWh (266 GIDs)
                    if( My_Battery != MY_BATTERY_24KWH )
    1cd2:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <My_Battery>
    1cd6:	88 23       	and	r24, r24
    1cd8:	41 f1       	breq	.+80     	; 0x1d2a <can_handler+0xae2>
                    {
	                    if (charging_state == CHARGING_QUICK)
    1cda:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <charging_state>
    1cde:	80 3c       	cpi	r24, 0xC0	; 192
	                    {
		                    temp2 = battery_soc * 300; // e.g. 55 * 300 = 16500
    1ce0:	21 f5       	brne	.+72     	; 0x1d2a <can_handler+0xae2>
    1ce2:	40 91 a5 21 	lds	r20, 0x21A5	; 0x8021a5 <battery_soc>
    1ce6:	8c e2       	ldi	r24, 0x2C	; 44
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	48 9f       	mul	r20, r24
    1cec:	90 01       	movw	r18, r0
    1cee:	49 9f       	mul	r20, r25
    1cf0:	30 0d       	add	r19, r0
		                    temp2 = temp2 / 100;            // e.g. 16500/100 = 165
		                    swap_5bc_remaining.LB_CAPR = temp2;
    1cf2:	11 24       	eor	r1, r1
    1cf4:	36 95       	lsr	r19
    1cf6:	27 95       	ror	r18
    1cf8:	36 95       	lsr	r19
    1cfa:	27 95       	ror	r18
    1cfc:	ab e7       	ldi	r26, 0x7B	; 123
    1cfe:	b4 e1       	ldi	r27, 0x14	; 20
    1d00:	9a d3       	rcall	.+1844   	; 0x2436 <__umulhisi3>
    1d02:	96 95       	lsr	r25
    1d04:	87 95       	ror	r24
    1d06:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <swap_5bc_remaining>
    1d0a:	e7 e3       	ldi	r30, 0x37	; 55
    1d0c:	f0 e2       	ldi	r31, 0x20	; 32
    1d0e:	29 2f       	mov	r18, r25
    1d10:	23 70       	andi	r18, 0x03	; 3
    1d12:	90 81       	ld	r25, Z
    1d14:	9c 7f       	andi	r25, 0xFC	; 252
    1d16:	92 2b       	or	r25, r18
    1d18:	90 83       	st	Z, r25
		                    swap_5bc_full.LB_CAPR = temp2;
    1d1a:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <swap_5bc_full>
    1d1e:	ef e2       	ldi	r30, 0x2F	; 47
    1d20:	f0 e2       	ldi	r31, 0x20	; 32
    1d22:	80 81       	ld	r24, Z
    1d24:	8c 7f       	andi	r24, 0xFC	; 252
    1d26:	28 2b       	or	r18, r24
    1d28:	20 83       	st	Z, r18
	                    }
                    }
				
					if(alternate_5bc){
    1d2a:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <alternate_5bc>
    1d2e:	88 23       	and	r24, r24
    1d30:	49 f0       	breq	.+18     	; 0x1d44 <can_handler+0xafc>
						convert_5bc_to_array(&swap_5bc_remaining, (uint8_t *) &saved_5bc_frame.data);
    1d32:	6e e0       	ldi	r22, 0x0E	; 14
    1d34:	70 e2       	ldi	r23, 0x20	; 32
    1d36:	86 e3       	ldi	r24, 0x36	; 54
    1d38:	90 e2       	ldi	r25, 0x20	; 32
    1d3a:	0e 94 4c 01 	call	0x298	; 0x298 <convert_5bc_to_array>
						alternate_5bc = 0;
    1d3e:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <alternate_5bc>
    1d42:	09 c0       	rjmp	.+18     	; 0x1d56 <can_handler+0xb0e>
					} else {
						convert_5bc_to_array(&swap_5bc_full, (uint8_t *) &saved_5bc_frame.data);
    1d44:	6e e0       	ldi	r22, 0x0E	; 14
    1d46:	70 e2       	ldi	r23, 0x20	; 32
    1d48:	8e e2       	ldi	r24, 0x2E	; 46
    1d4a:	90 e2       	ldi	r25, 0x20	; 32
    1d4c:	0e 94 4c 01 	call	0x298	; 0x298 <convert_5bc_to_array>
						alternate_5bc = 1;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <alternate_5bc>
					}
				
				
					skip_5bc = 5;
    1d56:	85 e0       	ldi	r24, 0x05	; 5
    1d58:	80 93 41 20 	sts	0x2041, r24	; 0x802041 <skip_5bc>
					}
			
					frame = saved_5bc_frame;
    1d5c:	8b e0       	ldi	r24, 0x0B	; 11
    1d5e:	eb e0       	ldi	r30, 0x0B	; 11
    1d60:	f0 e2       	ldi	r31, 0x20	; 32
    1d62:	de 01       	movw	r26, r28
    1d64:	11 96       	adiw	r26, 0x01	; 1
    1d66:	01 90       	ld	r0, Z+
    1d68:	0d 92       	st	X+, r0
    1d6a:	8a 95       	dec	r24
    1d6c:	e1 f7       	brne	.-8      	; 0x1d66 <can_handler+0xb1e>
				}
				if( My_Leaf == MY_LEAF_2014 )
    1d6e:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <can_handler+0xb30>
    1d76:	87 c2       	rjmp	.+1294   	; 0x2286 <can_handler+0x103e>
				{
				//5bc on 2014 looks extremely similar to 2018, except for the extra LB_MaxGIDS switch, so we remove and ignore that
                if ((frame.data[5] & 0x10) == 0x00)
    1d78:	89 85       	ldd	r24, Y+9	; 0x09
    1d7a:	84 fd       	sbrc	r24, 4
    1d7c:	10 c0       	rjmp	.+32     	; 0x1d9e <can_handler+0xb56>
                { //LB_MAXGIDS is 0, store actual GIDS remaining to this variable
	                GIDS = (uint16_t) ((frame.data[0] << 2) | ((frame.data[1] & 0xC0) >> 6));
    1d7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	22 0f       	add	r18, r18
    1d84:	33 1f       	adc	r19, r19
    1d86:	22 0f       	add	r18, r18
    1d88:	33 1f       	adc	r19, r19
    1d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8c:	92 95       	swap	r25
    1d8e:	96 95       	lsr	r25
    1d90:	96 95       	lsr	r25
    1d92:	93 70       	andi	r25, 0x03	; 3
    1d94:	29 2b       	or	r18, r25
    1d96:	20 93 a7 21 	sts	0x21A7, r18	; 0x8021a7 <GIDS>
    1d9a:	30 93 a8 21 	sts	0x21A8, r19	; 0x8021a8 <GIDS+0x1>
                }
                //Avoid blinking GOM by always writing remaining GIDS
                frame.data[0] = (uint8_t)(GIDS >> 2);
    1d9e:	20 91 a7 21 	lds	r18, 0x21A7	; 0x8021a7 <GIDS>
    1da2:	30 91 a8 21 	lds	r19, 0x21A8	; 0x8021a8 <GIDS+0x1>
    1da6:	36 95       	lsr	r19
    1da8:	27 95       	ror	r18
    1daa:	36 95       	lsr	r19
    1dac:	27 95       	ror	r18
    1dae:	2c 83       	std	Y+4, r18	; 0x04
                frame.data[1] = (GIDS << 6) & 0xC0;
    1db0:	20 91 a7 21 	lds	r18, 0x21A7	; 0x8021a7 <GIDS>
    1db4:	30 91 a8 21 	lds	r19, 0x21A8	; 0x8021a8 <GIDS+0x1>
    1db8:	22 95       	swap	r18
    1dba:	22 0f       	add	r18, r18
    1dbc:	22 0f       	add	r18, r18
    1dbe:	20 7c       	andi	r18, 0xC0	; 192
    1dc0:	2d 83       	std	Y+5, r18	; 0x05
				
				//Collect temperature for 5C0 message
				main_battery_temp = frame.data[3] / 20;                    // Temperature needed for charger section
    1dc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc4:	2d ec       	ldi	r18, 0xCD	; 205
    1dc6:	92 9f       	mul	r25, r18
    1dc8:	91 2d       	mov	r25, r1
    1dca:	11 24       	eor	r1, r1
    1dcc:	92 95       	swap	r25
    1dce:	9f 70       	andi	r25, 0x0F	; 15
    1dd0:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <main_battery_temp>
				main_battery_temp = temp_lut[main_battery_temp] + 1;       // write main_battery_temp to be used by 5C0 message
    1dd4:	e0 91 95 21 	lds	r30, 0x2195	; 0x802195 <main_battery_temp>
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	ee 5b       	subi	r30, 0xBE	; 190
    1ddc:	ff 4d       	sbci	r31, 0xDF	; 223
    1dde:	90 81       	ld	r25, Z
    1de0:	9f 5f       	subi	r25, 0xFF	; 255
    1de2:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <main_battery_temp>

				//Correct charge timer estimates
				//This code is WIP, currently the 3.3 and 6.6kW times are good, but 100V is messed up somehow. Seems to be differences in LEAF firmware
				cmr_idx = ((frame.data[5] & 0x03) << 3) | ((frame.data[6] & 0xE0) >> 5);
    1de6:	2a 85       	ldd	r18, Y+10	; 0x0a
    1de8:	83 70       	andi	r24, 0x03	; 3
    1dea:	88 0f       	add	r24, r24
    1dec:	88 0f       	add	r24, r24
    1dee:	88 0f       	add	r24, r24
    1df0:	92 2f       	mov	r25, r18
    1df2:	92 95       	swap	r25
    1df4:	96 95       	lsr	r25
    1df6:	97 70       	andi	r25, 0x07	; 7
    1df8:	89 2b       	or	r24, r25
    1dfa:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <cmr_idx>
				switch(cmr_idx){
    1dfe:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <cmr_idx>
    1e02:	8b 30       	cpi	r24, 0x0B	; 11
    1e04:	b1 f1       	breq	.+108    	; 0x1e72 <can_handler+0xc2a>
    1e06:	28 f4       	brcc	.+10     	; 0x1e12 <can_handler+0xbca>
    1e08:	85 30       	cpi	r24, 0x05	; 5
    1e0a:	69 f0       	breq	.+26     	; 0x1e26 <can_handler+0xbde>
    1e0c:	88 30       	cpi	r24, 0x08	; 8
    1e0e:	e9 f0       	breq	.+58     	; 0x1e4a <can_handler+0xc02>
    1e10:	ab c1       	rjmp	.+854    	; 0x2168 <can_handler+0xf20>
    1e12:	85 31       	cpi	r24, 0x15	; 21
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <can_handler+0xbd0>
    1e16:	60 c0       	rjmp	.+192    	; 0x1ed8 <can_handler+0xc90>
    1e18:	88 31       	cpi	r24, 0x18	; 24
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <can_handler+0xbd6>
    1e1c:	7e c0       	rjmp	.+252    	; 0x1f1a <can_handler+0xcd2>
    1e1e:	82 31       	cpi	r24, 0x12	; 18
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <can_handler+0xbdc>
    1e22:	a2 c1       	rjmp	.+836    	; 0x2168 <can_handler+0xf20>
					case 0: //QC
					break;
					case 5: //6.6kW 100%
						temp2 = (time_100_with_66kW_in_minutes - ((time_100_with_66kW_in_minutes * battery_soc)/100));
    1e24:	3a c0       	rjmp	.+116    	; 0x1e9a <can_handler+0xc52>
    1e26:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <battery_soc>
    1e2a:	be eb       	ldi	r27, 0xBE	; 190
    1e2c:	8b 9f       	mul	r24, r27
    1e2e:	c0 01       	movw	r24, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	64 e6       	ldi	r22, 0x64	; 100
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	ec d2       	rcall	.+1496   	; 0x2410 <__divmodhi4>
    1e38:	8e eb       	ldi	r24, 0xBE	; 190
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	86 1b       	sub	r24, r22
						frame.data[6] = (frame.data[6] & 0xE0) | (temp2 >> 8);
    1e3e:	97 0b       	sbc	r25, r23
    1e40:	20 7e       	andi	r18, 0xE0	; 224
    1e42:	92 2b       	or	r25, r18
						frame.data[7] = (temp2 & 0xFF);
    1e44:	9a 87       	std	Y+10, r25	; 0x0a
					break;
    1e46:	8b 87       	std	Y+11, r24	; 0x0b
					case 8: //200V 100%
						temp2 = (time_100_with_200V_in_minutes - ((time_100_with_200V_in_minutes * battery_soc)/100));
    1e48:	1e c2       	rjmp	.+1084   	; 0x2286 <can_handler+0x103e>
    1e4a:	30 91 a5 21 	lds	r19, 0x21A5	; 0x8021a5 <battery_soc>
    1e4e:	ee ea       	ldi	r30, 0xAE	; 174
    1e50:	f1 e0       	ldi	r31, 0x01	; 1
    1e52:	3e 9f       	mul	r19, r30
    1e54:	c0 01       	movw	r24, r0
    1e56:	3f 9f       	mul	r19, r31
    1e58:	90 0d       	add	r25, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	64 e6       	ldi	r22, 0x64	; 100
    1e5e:	70 e0       	ldi	r23, 0x00	; 0
    1e60:	d7 d2       	rcall	.+1454   	; 0x2410 <__divmodhi4>
    1e62:	e6 1b       	sub	r30, r22
						frame.data[6] = (frame.data[6] & 0xE0) | (temp2 >> 8);
    1e64:	f7 0b       	sbc	r31, r23
    1e66:	82 2f       	mov	r24, r18
    1e68:	80 7e       	andi	r24, 0xE0	; 224
    1e6a:	8f 2b       	or	r24, r31
						frame.data[7] = (temp2 & 0xFF);
    1e6c:	8a 87       	std	Y+10, r24	; 0x0a
					break;
    1e6e:	eb 87       	std	Y+11, r30	; 0x0b
					case 11: //100V 100%
						temp2 = (time_100_with_100V_in_minutes - ((time_100_with_100V_in_minutes * battery_soc)/100));
    1e70:	0a c2       	rjmp	.+1044   	; 0x2286 <can_handler+0x103e>
    1e72:	30 91 a5 21 	lds	r19, 0x21A5	; 0x8021a5 <battery_soc>
    1e76:	ec eb       	ldi	r30, 0xBC	; 188
    1e78:	f2 e0       	ldi	r31, 0x02	; 2
    1e7a:	3e 9f       	mul	r19, r30
    1e7c:	c0 01       	movw	r24, r0
    1e7e:	3f 9f       	mul	r19, r31
    1e80:	90 0d       	add	r25, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	64 e6       	ldi	r22, 0x64	; 100
    1e86:	70 e0       	ldi	r23, 0x00	; 0
    1e88:	c3 d2       	rcall	.+1414   	; 0x2410 <__divmodhi4>
    1e8a:	e6 1b       	sub	r30, r22
    1e8c:	f7 0b       	sbc	r31, r23
						frame.data[6] = (frame.data[6] & 0xE0) | (temp2 >> 8);
    1e8e:	82 2f       	mov	r24, r18
    1e90:	80 7e       	andi	r24, 0xE0	; 224
    1e92:	8f 2b       	or	r24, r31
						frame.data[7] = (temp2 & 0xFF);
    1e94:	8a 87       	std	Y+10, r24	; 0x0a
					break;
    1e96:	eb 87       	std	Y+11, r30	; 0x0b
					case 18: //6.6kW 80%
						if(battery_soc < 80)
    1e98:	f6 c1       	rjmp	.+1004   	; 0x2286 <can_handler+0x103e>
    1e9a:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <battery_soc>
    1e9e:	80 35       	cpi	r24, 0x50	; 80
						{
							temp2 = (time_80_with_66kW_in_minutes - ((time_80_with_66kW_in_minutes * (battery_soc+20))/100));
    1ea0:	b8 f4       	brcc	.+46     	; 0x1ed0 <can_handler+0xc88>
    1ea2:	40 91 a5 21 	lds	r20, 0x21A5	; 0x8021a5 <battery_soc>
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	4c 5e       	subi	r20, 0xEC	; 236
    1eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    1eac:	36 e9       	ldi	r19, 0x96	; 150
    1eae:	34 9f       	mul	r19, r20
    1eb0:	c0 01       	movw	r24, r0
    1eb2:	35 9f       	mul	r19, r21
    1eb4:	90 0d       	add	r25, r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	64 e6       	ldi	r22, 0x64	; 100
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	a9 d2       	rcall	.+1362   	; 0x2410 <__divmodhi4>
    1ebe:	86 e9       	ldi	r24, 0x96	; 150
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	86 1b       	sub	r24, r22
    1ec4:	97 0b       	sbc	r25, r23
							frame.data[6] = (frame.data[6] & 0xE0) | (temp2 >> 8);
    1ec6:	20 7e       	andi	r18, 0xE0	; 224
    1ec8:	92 2b       	or	r25, r18
    1eca:	9a 87       	std	Y+10, r25	; 0x0a
							frame.data[7] = (temp2 & 0xFF);
    1ecc:	8b 87       	std	Y+11, r24	; 0x0b
    1ece:	db c1       	rjmp	.+950    	; 0x2286 <can_handler+0x103e>
						}
						else
						{
							temp2 = 0; //0 since we are over 80% SOC
							frame.data[6] = (frame.data[6] & 0xE0) | (temp2 >> 8);
    1ed0:	20 7e       	andi	r18, 0xE0	; 224
    1ed2:	2a 87       	std	Y+10, r18	; 0x0a
							frame.data[7] = (temp2 & 0xFF);
    1ed4:	1b 86       	std	Y+11, r1	; 0x0b
						}
					break;
					case 21: //200V 80%
						if(battery_soc < 80)
    1ed6:	d7 c1       	rjmp	.+942    	; 0x2286 <can_handler+0x103e>
    1ed8:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <battery_soc>
    1edc:	80 35       	cpi	r24, 0x50	; 80
						{
							temp2 = (time_80_with_200V_in_minutes - ((time_80_with_200V_in_minutes * (battery_soc+20))/100));
    1ede:	c8 f4       	brcc	.+50     	; 0x1f12 <can_handler+0xcca>
    1ee0:	40 91 a5 21 	lds	r20, 0x21A5	; 0x8021a5 <battery_soc>
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	4c 5e       	subi	r20, 0xEC	; 236
    1ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eea:	e4 e5       	ldi	r30, 0x54	; 84
    1eec:	f1 e0       	ldi	r31, 0x01	; 1
    1eee:	4e 9f       	mul	r20, r30
    1ef0:	c0 01       	movw	r24, r0
    1ef2:	4f 9f       	mul	r20, r31
    1ef4:	90 0d       	add	r25, r0
    1ef6:	5e 9f       	mul	r21, r30
    1ef8:	90 0d       	add	r25, r0
    1efa:	11 24       	eor	r1, r1
    1efc:	64 e6       	ldi	r22, 0x64	; 100
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	87 d2       	rcall	.+1294   	; 0x2410 <__divmodhi4>
    1f02:	e6 1b       	sub	r30, r22
    1f04:	f7 0b       	sbc	r31, r23
							frame.data[6] = (frame.data[6] & 0xE0) | (temp2 >> 8);
    1f06:	82 2f       	mov	r24, r18
    1f08:	80 7e       	andi	r24, 0xE0	; 224
    1f0a:	8f 2b       	or	r24, r31
    1f0c:	8a 87       	std	Y+10, r24	; 0x0a
							frame.data[7] = (temp2 & 0xFF);
    1f0e:	eb 87       	std	Y+11, r30	; 0x0b
    1f10:	ba c1       	rjmp	.+884    	; 0x2286 <can_handler+0x103e>
						}
						else
						{
							temp2 = 0; //0 since we are over 80% SOC
							frame.data[6] = (frame.data[6] & 0xE0) | (temp2 >> 8);
    1f12:	20 7e       	andi	r18, 0xE0	; 224
							frame.data[7] = (temp2 & 0xFF);
    1f14:	2a 87       	std	Y+10, r18	; 0x0a
    1f16:	1b 86       	std	Y+11, r1	; 0x0b
						}
					break;
					case 24: //100V 80%
						if(battery_soc < 80)
    1f18:	b6 c1       	rjmp	.+876    	; 0x2286 <can_handler+0x103e>
    1f1a:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <battery_soc>
    1f1e:	80 35       	cpi	r24, 0x50	; 80
						{
							temp2 = (time_80_with_100V_in_minutes - ((time_80_with_100V_in_minutes * (battery_soc+20))/100));
    1f20:	c8 f4       	brcc	.+50     	; 0x1f54 <can_handler+0xd0c>
    1f22:	40 91 a5 21 	lds	r20, 0x21A5	; 0x8021a5 <battery_soc>
    1f26:	50 e0       	ldi	r21, 0x00	; 0
    1f28:	4c 5e       	subi	r20, 0xEC	; 236
    1f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2c:	e0 e3       	ldi	r30, 0x30	; 48
    1f2e:	f2 e0       	ldi	r31, 0x02	; 2
    1f30:	4e 9f       	mul	r20, r30
    1f32:	c0 01       	movw	r24, r0
    1f34:	4f 9f       	mul	r20, r31
    1f36:	90 0d       	add	r25, r0
    1f38:	5e 9f       	mul	r21, r30
    1f3a:	90 0d       	add	r25, r0
    1f3c:	11 24       	eor	r1, r1
    1f3e:	64 e6       	ldi	r22, 0x64	; 100
    1f40:	70 e0       	ldi	r23, 0x00	; 0
    1f42:	66 d2       	rcall	.+1228   	; 0x2410 <__divmodhi4>
    1f44:	e6 1b       	sub	r30, r22
    1f46:	f7 0b       	sbc	r31, r23
							frame.data[6] = (frame.data[6] & 0xE0) | (temp2 >> 8);
    1f48:	82 2f       	mov	r24, r18
    1f4a:	80 7e       	andi	r24, 0xE0	; 224
    1f4c:	8f 2b       	or	r24, r31
    1f4e:	8a 87       	std	Y+10, r24	; 0x0a
							frame.data[7] = (temp2 & 0xFF);
    1f50:	eb 87       	std	Y+11, r30	; 0x0b
    1f52:	99 c1       	rjmp	.+818    	; 0x2286 <can_handler+0x103e>
						}
						else
						{
							temp2 = 0; //0 since we are over 80% SOC
							frame.data[6] = (frame.data[6] & 0xE0) | (temp2 >> 8);
    1f54:	20 7e       	andi	r18, 0xE0	; 224
    1f56:	2a 87       	std	Y+10, r18	; 0x0a
							frame.data[7] = (temp2 & 0xFF);
    1f58:	1b 86       	std	Y+11, r1	; 0x0b
    1f5a:	95 c1       	rjmp	.+810    	; 0x2286 <can_handler+0x103e>
				}

				
				break;
			case 0x5C0: //Send 500ms messages here
				send_can(battery_can_bus, ZE1_5EC_message);//500ms
    1f5c:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <battery_can_bus>
    1f60:	c0 90 71 21 	lds	r12, 0x2171	; 0x802171 <ZE1_5EC_message>
    1f64:	d0 90 72 21 	lds	r13, 0x2172	; 0x802172 <ZE1_5EC_message+0x1>
    1f68:	e0 90 73 21 	lds	r14, 0x2173	; 0x802173 <ZE1_5EC_message+0x2>
    1f6c:	f0 90 74 21 	lds	r15, 0x2174	; 0x802174 <ZE1_5EC_message+0x3>
    1f70:	00 91 75 21 	lds	r16, 0x2175	; 0x802175 <ZE1_5EC_message+0x4>
    1f74:	10 91 76 21 	lds	r17, 0x2176	; 0x802176 <ZE1_5EC_message+0x5>
    1f78:	20 91 77 21 	lds	r18, 0x2177	; 0x802177 <ZE1_5EC_message+0x6>
    1f7c:	30 91 78 21 	lds	r19, 0x2178	; 0x802178 <ZE1_5EC_message+0x7>
    1f80:	40 91 79 21 	lds	r20, 0x2179	; 0x802179 <ZE1_5EC_message+0x8>
    1f84:	50 91 7a 21 	lds	r21, 0x217A	; 0x80217a <ZE1_5EC_message+0x9>
    1f88:	60 91 7b 21 	lds	r22, 0x217B	; 0x80217b <ZE1_5EC_message+0xa>
    1f8c:	0d d9       	rcall	.-3558   	; 0x11a8 <send_can>
				
				if( My_Leaf == MY_LEAF_2011 )
    1f8e:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
    1f92:	81 11       	cpse	r24, r1
    1f94:	78 c1       	rjmp	.+752    	; 0x2286 <can_handler+0x103e>
				{
					swap_5c0_max.LB_HIS_TEMP = main_battery_temp;
    1f96:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <main_battery_temp>
    1f9a:	98 2f       	mov	r25, r24
    1f9c:	9f 77       	andi	r25, 0x7F	; 127
    1f9e:	e8 e2       	ldi	r30, 0x28	; 40
    1fa0:	f0 e2       	ldi	r31, 0x20	; 32
    1fa2:	80 81       	ld	r24, Z
    1fa4:	80 78       	andi	r24, 0x80	; 128
    1fa6:	89 2b       	or	r24, r25
    1fa8:	80 83       	st	Z, r24
					swap_5c0_max.LB_HIS_TEMP_WUP = main_battery_temp;
    1faa:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <main_battery_temp>
    1fae:	98 2f       	mov	r25, r24
    1fb0:	9f 77       	andi	r25, 0x7F	; 127
    1fb2:	e7 e2       	ldi	r30, 0x27	; 39
    1fb4:	f0 e2       	ldi	r31, 0x20	; 32
    1fb6:	80 81       	ld	r24, Z
    1fb8:	80 78       	andi	r24, 0x80	; 128
    1fba:	89 2b       	or	r24, r25
    1fbc:	80 83       	st	Z, r24
					swap_5c0_avg.LB_HIS_TEMP = main_battery_temp;
    1fbe:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <main_battery_temp>
    1fc2:	98 2f       	mov	r25, r24
    1fc4:	9f 77       	andi	r25, 0x7F	; 127
    1fc6:	e0 e2       	ldi	r30, 0x20	; 32
    1fc8:	f0 e2       	ldi	r31, 0x20	; 32
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 78       	andi	r24, 0x80	; 128
    1fce:	89 2b       	or	r24, r25
    1fd0:	80 83       	st	Z, r24
					swap_5c0_avg.LB_HIS_TEMP_WUP = main_battery_temp;
    1fd2:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <main_battery_temp>
    1fd6:	98 2f       	mov	r25, r24
    1fd8:	9f 77       	andi	r25, 0x7F	; 127
    1fda:	ef e1       	ldi	r30, 0x1F	; 31
    1fdc:	f0 e2       	ldi	r31, 0x20	; 32
    1fde:	80 81       	ld	r24, Z
    1fe0:	80 78       	andi	r24, 0x80	; 128
    1fe2:	89 2b       	or	r24, r25
    1fe4:	80 83       	st	Z, r24
					swap_5c0_min.LB_HIS_TEMP = main_battery_temp;
    1fe6:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <main_battery_temp>
    1fea:	98 2f       	mov	r25, r24
    1fec:	9f 77       	andi	r25, 0x7F	; 127
    1fee:	e8 e1       	ldi	r30, 0x18	; 24
    1ff0:	f0 e2       	ldi	r31, 0x20	; 32
    1ff2:	80 81       	ld	r24, Z
    1ff4:	80 78       	andi	r24, 0x80	; 128
    1ff6:	89 2b       	or	r24, r25
    1ff8:	80 83       	st	Z, r24
					swap_5c0_min.LB_HIS_TEMP_WUP = main_battery_temp;
    1ffa:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <main_battery_temp>
    1ffe:	98 2f       	mov	r25, r24
    2000:	9f 77       	andi	r25, 0x7F	; 127
    2002:	e7 e1       	ldi	r30, 0x17	; 23
    2004:	f0 e2       	ldi	r31, 0x20	; 32
    2006:	80 81       	ld	r24, Z
    2008:	80 78       	andi	r24, 0x80	; 128
    200a:	89 2b       	or	r24, r25
    200c:	80 83       	st	Z, r24
					
					if(swap_5c0_idx == 0){
    200e:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <swap_5c0_idx>
    2012:	81 11       	cpse	r24, r1
    2014:	08 c0       	rjmp	.+16     	; 0x2026 <can_handler+0xdde>
						convert_5c0_to_array(&swap_5c0_max, (uint8_t *) &frame.data);
    2016:	be 01       	movw	r22, r28
    2018:	6c 5f       	subi	r22, 0xFC	; 252
    201a:	7f 4f       	sbci	r23, 0xFF	; 255
    201c:	86 e2       	ldi	r24, 0x26	; 38
    201e:	90 e2       	ldi	r25, 0x20	; 32
    2020:	0e 94 fe 01 	call	0x3fc	; 0x3fc <convert_5c0_to_array>
    2024:	13 c0       	rjmp	.+38     	; 0x204c <can_handler+0xe04>
						} 
					else if(swap_5c0_idx == 1){
    2026:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <swap_5c0_idx>
    202a:	81 30       	cpi	r24, 0x01	; 1
						convert_5c0_to_array(&swap_5c0_avg, (uint8_t *) &frame.data);
    202c:	41 f4       	brne	.+16     	; 0x203e <can_handler+0xdf6>
    202e:	be 01       	movw	r22, r28
    2030:	6c 5f       	subi	r22, 0xFC	; 252
    2032:	7f 4f       	sbci	r23, 0xFF	; 255
    2034:	8e e1       	ldi	r24, 0x1E	; 30
    2036:	90 e2       	ldi	r25, 0x20	; 32
    2038:	0e 94 fe 01 	call	0x3fc	; 0x3fc <convert_5c0_to_array>
						}
					else {
						convert_5c0_to_array(&swap_5c0_min, (uint8_t *) &frame.data);
    203c:	07 c0       	rjmp	.+14     	; 0x204c <can_handler+0xe04>
    203e:	be 01       	movw	r22, r28
    2040:	6c 5f       	subi	r22, 0xFC	; 252
    2042:	7f 4f       	sbci	r23, 0xFF	; 255
    2044:	86 e1       	ldi	r24, 0x16	; 22
    2046:	90 e2       	ldi	r25, 0x20	; 32
    2048:	0e 94 fe 01 	call	0x3fc	; 0x3fc <convert_5c0_to_array>
					}
					
					swap_5c0_idx = (swap_5c0_idx + 1) % 3;
    204c:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <swap_5c0_idx>
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	63 e0       	ldi	r22, 0x03	; 3
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	db d1       	rcall	.+950    	; 0x2410 <__divmodhi4>
    205a:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <swap_5c0_idx>
    205e:	13 c1       	rjmp	.+550    	; 0x2286 <can_handler+0x103e>
					//It also eliminates the need for an if statement and a conditional check, which improves performance (but sacrifices readability)
				}
				break;
			case 0x1F2:
 
				charging_state = frame.data[2];
    2060:	8e 81       	ldd	r24, Y+6	; 0x06
    2062:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <charging_state>
 
				if( My_Leaf == MY_LEAF_2011 )
    2066:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
    206a:	81 11       	cpse	r24, r1
    206c:	a6 c0       	rjmp	.+332    	; 0x21ba <can_handler+0xf72>
				{
					seconds_without_1f2 = 0; // Keep resetting this variable, vehicle is not turned off
    206e:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <seconds_without_1f2>
	 
					if (seen_1da && charging_state == CHARGING_IDLE)
    2072:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <seen_1da>
    2076:	88 23       	and	r24, r24
    2078:	51 f0       	breq	.+20     	; 0x208e <can_handler+0xe46>
    207a:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <charging_state>
    207e:	80 36       	cpi	r24, 0x60	; 96
    2080:	31 f4       	brne	.+12     	; 0x208e <can_handler+0xe46>
					{
						frame.data[2] = 0;
    2082:	1e 82       	std	Y+6, r1	; 0x06
						seen_1da--;
    2084:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <seen_1da>
    2088:	81 50       	subi	r24, 0x01	; 1
    208a:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <seen_1da>
					}
	 
					if(( My_Battery == MY_BATTERY_40KWH ) || ( My_Battery == MY_BATTERY_62KWH ) )
    208e:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <My_Battery>
    2092:	82 30       	cpi	r24, 0x02	; 2
    2094:	29 f0       	breq	.+10     	; 0x20a0 <can_handler+0xe58>
    2096:	80 91 b1 21 	lds	r24, 0x21B1	; 0x8021b1 <My_Battery>
    209a:	83 30       	cpi	r24, 0x03	; 3
    209c:	09 f0       	breq	.+2      	; 0x20a0 <can_handler+0xe58>
					{
						// Only for 40/62kWh packs retrofitted to ZE0
						frame.data[3] = 0xA0;                    // Change from gen1->gen4+ . But doesn't seem to help much. We fix it anyways.
    209e:	8d c0       	rjmp	.+282    	; 0x21ba <can_handler+0xf72>
    20a0:	80 ea       	ldi	r24, 0xA0	; 160
						calc_sum4(&frame);
    20a2:	8f 83       	std	Y+7, r24	; 0x07
    20a4:	ce 01       	movw	r24, r28
    20a6:	01 96       	adiw	r24, 0x01	; 1
    20a8:	0e 94 31 01 	call	0x262	; 0x262 <calc_sum4>
				}
				break;

				case 0x59E: // QC capacity message, adjust for AZE0 with 30/40/62kWh pack swaps

				if( My_Leaf == MY_LEAF_2014 )
    20ac:	ec c0       	rjmp	.+472    	; 0x2286 <can_handler+0x103e>
    20ae:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
    20b2:	81 30       	cpi	r24, 0x01	; 1
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <can_handler+0xe70>
				{
					frame.data[2] = 0x0E; // Set LB_Full_Capacity_for_QC to 23000Wh (default value for 24kWh LEAF)
    20b6:	77 c0       	rjmp	.+238    	; 0x21a6 <can_handler+0xf5e>
    20b8:	8e e0       	ldi	r24, 0x0E	; 14
					frame.data[3] = 0x60;

					// Calculate new LBC_QC_CapRemaining value
					temp2 = ((230 * battery_soc) / 100);                       // Crazy advanced math
    20ba:	8e 83       	std	Y+6, r24	; 0x06
    20bc:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <battery_soc>
    20c0:	e6 ee       	ldi	r30, 0xE6	; 230
    20c2:	8e 9f       	mul	r24, r30
    20c4:	c0 01       	movw	r24, r0
    20c6:	11 24       	eor	r1, r1
    20c8:	64 e6       	ldi	r22, 0x64	; 100
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	a1 d1       	rcall	.+834    	; 0x2410 <__divmodhi4>
					frame.data[3] = (frame.data[3] & 0xF0) | ((temp2 >> 5) & 0xF);  // store the new LBC_QC_CapRemaining
    20ce:	cb 01       	movw	r24, r22
    20d0:	96 95       	lsr	r25
    20d2:	87 95       	ror	r24
    20d4:	92 95       	swap	r25
    20d6:	82 95       	swap	r24
    20d8:	8f 70       	andi	r24, 0x0F	; 15
    20da:	89 27       	eor	r24, r25
    20dc:	9f 70       	andi	r25, 0x0F	; 15
    20de:	89 27       	eor	r24, r25
    20e0:	8f 70       	andi	r24, 0x0F	; 15
    20e2:	80 66       	ori	r24, 0x60	; 96
    20e4:	8f 83       	std	Y+7, r24	; 0x07
					frame.data[4] = (uint8_t) ((temp2 & 0x1F) << 3) | (frame.data[4] & 0x07); // to the 59E message out to vehicle
    20e6:	88 85       	ldd	r24, Y+8	; 0x08
    20e8:	87 70       	andi	r24, 0x07	; 7
    20ea:	66 0f       	add	r22, r22
    20ec:	66 0f       	add	r22, r22
    20ee:	66 0f       	add	r22, r22
    20f0:	68 2b       	or	r22, r24
    20f2:	68 87       	std	Y+8, r22	; 0x08
					calc_crc8(&frame);
    20f4:	ce 01       	movw	r24, r28
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	0e 94 1b 01 	call	0x236	; 0x236 <calc_crc8>
				break;

 
				case 0x68C:
				case 0x603:
				reset_state(); // Reset all states, vehicle is starting up
    20fc:	c4 c0       	rjmp	.+392    	; 0x2286 <can_handler+0x103e>
    20fe:	0e 94 45 07 	call	0xe8a	; 0xe8a <reset_state>

				send_can(battery_can_bus, swap_605_message); // Send these ZE1 messages towards battery
    2102:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <battery_can_bus>
    2106:	c0 90 5b 21 	lds	r12, 0x215B	; 0x80215b <swap_605_message>
    210a:	d0 90 5c 21 	lds	r13, 0x215C	; 0x80215c <swap_605_message+0x1>
    210e:	e0 90 5d 21 	lds	r14, 0x215D	; 0x80215d <swap_605_message+0x2>
    2112:	f0 90 5e 21 	lds	r15, 0x215E	; 0x80215e <swap_605_message+0x3>
    2116:	00 91 5f 21 	lds	r16, 0x215F	; 0x80215f <swap_605_message+0x4>
    211a:	10 91 60 21 	lds	r17, 0x2160	; 0x802160 <swap_605_message+0x5>
    211e:	20 91 61 21 	lds	r18, 0x2161	; 0x802161 <swap_605_message+0x6>
    2122:	30 91 62 21 	lds	r19, 0x2162	; 0x802162 <swap_605_message+0x7>
    2126:	40 91 63 21 	lds	r20, 0x2163	; 0x802163 <swap_605_message+0x8>
    212a:	50 91 64 21 	lds	r21, 0x2164	; 0x802164 <swap_605_message+0x9>
    212e:	60 91 65 21 	lds	r22, 0x2165	; 0x802165 <swap_605_message+0xa>
				send_can(battery_can_bus, swap_607_message);
    2132:	3a d8       	rcall	.-3980   	; 0x11a8 <send_can>
    2134:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <battery_can_bus>
    2138:	c0 90 50 21 	lds	r12, 0x2150	; 0x802150 <swap_607_message>
    213c:	d0 90 51 21 	lds	r13, 0x2151	; 0x802151 <swap_607_message+0x1>
    2140:	e0 90 52 21 	lds	r14, 0x2152	; 0x802152 <swap_607_message+0x2>
    2144:	f0 90 53 21 	lds	r15, 0x2153	; 0x802153 <swap_607_message+0x3>
    2148:	00 91 54 21 	lds	r16, 0x2154	; 0x802154 <swap_607_message+0x4>
    214c:	10 91 55 21 	lds	r17, 0x2155	; 0x802155 <swap_607_message+0x5>
    2150:	20 91 56 21 	lds	r18, 0x2156	; 0x802156 <swap_607_message+0x6>
    2154:	30 91 57 21 	lds	r19, 0x2157	; 0x802157 <swap_607_message+0x7>
    2158:	40 91 58 21 	lds	r20, 0x2158	; 0x802158 <swap_607_message+0x8>
    215c:	50 91 59 21 	lds	r21, 0x2159	; 0x802159 <swap_607_message+0x9>
    2160:	60 91 5a 21 	lds	r22, 0x215A	; 0x80215a <swap_607_message+0xa>
    2164:	21 d8       	rcall	.-4030   	; 0x11a8 <send_can>
				break;
    2166:	8f c0       	rjmp	.+286    	; 0x2286 <can_handler+0x103e>
			}
		
		
		//block unwanted messages
			uint8_t blocked = 0;
			switch(frame.can_id){
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	85 3c       	cpi	r24, 0xC5	; 197
    216e:	f5 e0       	ldi	r31, 0x05	; 5
    2170:	9f 07       	cpc	r25, r31
    2172:	01 f1       	breq	.+64     	; 0x21b4 <can_handler+0xf6c>
    2174:	60 f4       	brcc	.+24     	; 0x218e <can_handler+0xf46>
    2176:	88 3b       	cpi	r24, 0xB8	; 184
    2178:	33 e0       	ldi	r19, 0x03	; 3
    217a:	93 07       	cpc	r25, r19
    217c:	d9 f0       	breq	.+54     	; 0x21b4 <can_handler+0xf6c>
    217e:	8e 39       	cpi	r24, 0x9E	; 158
    2180:	a5 e0       	ldi	r26, 0x05	; 5
    2182:	9a 07       	cpc	r25, r26
    2184:	81 f0       	breq	.+32     	; 0x21a6 <can_handler+0xf5e>
    2186:	85 35       	cpi	r24, 0x55	; 85
    2188:	93 40       	sbci	r25, 0x03	; 3
    218a:	b9 f4       	brne	.+46     	; 0x21ba <can_handler+0xf72>
    218c:	13 c0       	rjmp	.+38     	; 0x21b4 <can_handler+0xf6c>
    218e:	85 32       	cpi	r24, 0x25	; 37
    2190:	e6 e0       	ldi	r30, 0x06	; 6
    2192:	9e 07       	cpc	r25, r30
    2194:	79 f0       	breq	.+30     	; 0x21b4 <can_handler+0xf6c>
    2196:	83 33       	cpi	r24, 0x33	; 51
    2198:	f6 e0       	ldi	r31, 0x06	; 6
    219a:	9f 07       	cpc	r25, r31
    219c:	59 f0       	breq	.+22     	; 0x21b4 <can_handler+0xf6c>
    219e:	8c 3e       	cpi	r24, 0xEC	; 236
    21a0:	95 40       	sbci	r25, 0x05	; 5
    21a2:	41 f0       	breq	.+16     	; 0x21b4 <can_handler+0xf6c>
    21a4:	0a c0       	rjmp	.+20     	; 0x21ba <can_handler+0xf72>
					break;
				case 0x3B8:	//Block this incase inverter upgrade code sends it towards battery (we generate our own)
					blocked = 1; 
					break;
				case 0x59E: //new AZE0 battery message, block on ZE0 LEAF to save resources
					if( My_Leaf == MY_LEAF_2011 )
    21a6:	90 91 4f 20 	lds	r25, 0x204F	; 0x80204f <My_Leaf>
		
		//block unwanted messages
			uint8_t blocked = 0;
			switch(frame.can_id){
				case 0x633:	//new 40kWh message, block to save CPU
					blocked = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	99 23       	and	r25, r25
    21ae:	19 f0       	breq	.+6      	; 0x21b6 <can_handler+0xf6e>
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	01 c0       	rjmp	.+2      	; 0x21b6 <can_handler+0xf6e>
    21b4:	81 e0       	ldi	r24, 0x01	; 1
					break;
				default:
					blocked = 0;
					break;
			}
			if(!blocked){
    21b6:	81 11       	cpse	r24, r1
    21b8:	1e c0       	rjmp	.+60     	; 0x21f6 <can_handler+0xfae>
				if(can_bus == 1){send_can2(frame);} else {send_can1(frame);}
    21ba:	31 e0       	ldi	r19, 0x01	; 1
    21bc:	a3 12       	cpse	r10, r19
    21be:	0e c0       	rjmp	.+28     	; 0x21dc <can_handler+0xf94>
    21c0:	e9 80       	ldd	r14, Y+1	; 0x01
    21c2:	fa 80       	ldd	r15, Y+2	; 0x02
    21c4:	0b 81       	ldd	r16, Y+3	; 0x03
    21c6:	1c 81       	ldd	r17, Y+4	; 0x04
    21c8:	2d 81       	ldd	r18, Y+5	; 0x05
    21ca:	3e 81       	ldd	r19, Y+6	; 0x06
    21cc:	4f 81       	ldd	r20, Y+7	; 0x07
    21ce:	58 85       	ldd	r21, Y+8	; 0x08
    21d0:	69 85       	ldd	r22, Y+9	; 0x09
    21d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    21d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    21d6:	0e 94 18 08 	call	0x1030	; 0x1030 <send_can2>
    21da:	0d c0       	rjmp	.+26     	; 0x21f6 <can_handler+0xfae>
    21dc:	e9 80       	ldd	r14, Y+1	; 0x01
    21de:	fa 80       	ldd	r15, Y+2	; 0x02
    21e0:	0b 81       	ldd	r16, Y+3	; 0x03
    21e2:	1c 81       	ldd	r17, Y+4	; 0x04
    21e4:	2d 81       	ldd	r18, Y+5	; 0x05
    21e6:	3e 81       	ldd	r19, Y+6	; 0x06
    21e8:	4f 81       	ldd	r20, Y+7	; 0x07
    21ea:	58 85       	ldd	r21, Y+8	; 0x08
    21ec:	69 85       	ldd	r22, Y+9	; 0x09
    21ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    21f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21f2:	0e 94 ba 07 	call	0xf74	; 0xf74 <send_can1>
				
			}
		}		
	
	if(flag & 0xA0){
    21f6:	8b 2d       	mov	r24, r11
    21f8:	80 7a       	andi	r24, 0xA0	; 160
    21fa:	c9 f0       	breq	.+50     	; 0x222e <can_handler+0xfe6>
		uint8_t flag2 = can_read(MCP_REG_EFLG, can_bus);
    21fc:	6a 2d       	mov	r22, r10
    21fe:	8d e2       	ldi	r24, 0x2D	; 45
    2200:	0e 94 8d 05 	call	0xb1a	; 0xb1a <can_read>
    2204:	18 2f       	mov	r17, r24
		if(flag2 & 0xC0){
    2206:	80 7c       	andi	r24, 0xC0	; 192
    2208:	29 f0       	breq	.+10     	; 0x2214 <can_handler+0xfcc>
			can_write(MCP_REG_EFLG, 0, can_bus); //reset all errors, we hit an CANX RX OVF
    220a:	4a 2d       	mov	r20, r10
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	8d e2       	ldi	r24, 0x2D	; 45
    2210:	0e 94 87 06 	call	0xd0e	; 0xd0e <can_write>
		}
		if(flag2 > 0){ PORTB.OUTSET = (1 << 1); }
    2214:	11 23       	and	r17, r17
    2216:	19 f0       	breq	.+6      	; 0x221e <can_handler+0xfd6>
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    221e:	6b 2d       	mov	r22, r11
    2220:	60 7e       	andi	r22, 0xE0	; 224
		if(flag & 0xE0){ can_bit_modify(MCP_REG_CANINTF, (flag & 0xE0), 0x00, can_bus);	}
    2222:	29 f0       	breq	.+10     	; 0x222e <can_handler+0xfe6>
    2224:	2a 2d       	mov	r18, r10
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	8c e2       	ldi	r24, 0x2C	; 44
    222a:	0e 94 10 04 	call	0x820	; 0x820 <can_bit_modify>
	}
	can_busy = 0;
    222e:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <can_busy>
}
    2232:	55 c0       	rjmp	.+170    	; 0x22de <can_handler+0x1096>
				
				if( My_Leaf == MY_LEAF_2011 )
				{
				temp2 = ((frame.data[4] & 0xFE) >> 1); //Collect SOH value
				if(frame.data[0] != 0xFF){ //Only modify values when GIDS value is available, that means LBC has booted
					if((frame.data[5] & 0x10) == 0x00){ //If everything is normal (no output power limit reason)
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	84 fd       	sbrc	r24, 4
    2238:	99 ca       	rjmp	.-2766   	; 0x176c <can_handler+0x524>
    223a:	3e ca       	rjmp	.-2948   	; 0x16b8 <can_handler+0x470>
						} else { //Output power limited

					}
				
					} else {
					swap_5bc_remaining.LB_CAPR = 0x3FF;
    223c:	9f ef       	ldi	r25, 0xFF	; 255
    223e:	90 93 36 20 	sts	0x2036, r25	; 0x802036 <swap_5bc_remaining>
    2242:	e7 e3       	ldi	r30, 0x37	; 55
    2244:	f0 e2       	ldi	r31, 0x20	; 32
    2246:	80 81       	ld	r24, Z
    2248:	83 60       	ori	r24, 0x03	; 3
    224a:	80 83       	st	Z, r24
					swap_5bc_full.LB_CAPR = 0x3FF;
    224c:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <swap_5bc_full>
    2250:	ef e2       	ldi	r30, 0x2F	; 47
    2252:	f0 e2       	ldi	r31, 0x20	; 32
    2254:	80 81       	ld	r24, Z
    2256:	83 60       	ori	r24, 0x03	; 3
    2258:	80 83       	st	Z, r24
					swap_5bc_remaining.LB_RCHGTIM = 0;
    225a:	ec e3       	ldi	r30, 0x3C	; 60
    225c:	f0 e2       	ldi	r31, 0x20	; 32
    225e:	80 81       	ld	r24, Z
    2260:	87 70       	andi	r24, 0x07	; 7
    2262:	80 83       	st	Z, r24
    2264:	ad e3       	ldi	r26, 0x3D	; 61
    2266:	b0 e2       	ldi	r27, 0x20	; 32
    2268:	8c 91       	ld	r24, X
    226a:	88 7f       	andi	r24, 0xF8	; 248
    226c:	8c 93       	st	X, r24
    226e:	8c 91       	ld	r24, X
    2270:	87 70       	andi	r24, 0x07	; 7
    2272:	8c 93       	st	X, r24
					swap_5bc_remaining.LB_RCHGTCON = 0;
    2274:	ab e3       	ldi	r26, 0x3B	; 59
    2276:	b0 e2       	ldi	r27, 0x20	; 32
    2278:	8c 91       	ld	r24, X
    227a:	8f 73       	andi	r24, 0x3F	; 63
    227c:	8c 93       	st	X, r24
    227e:	80 81       	ld	r24, Z
    2280:	88 7f       	andi	r24, 0xF8	; 248
    2282:	80 83       	st	Z, r24
    2284:	73 ca       	rjmp	.-2842   	; 0x176c <can_handler+0x524>
			}
		
		
		//block unwanted messages
			uint8_t blocked = 0;
			switch(frame.can_id){
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	9a 81       	ldd	r25, Y+2	; 0x02
    228a:	85 3c       	cpi	r24, 0xC5	; 197
    228c:	a5 e0       	ldi	r26, 0x05	; 5
    228e:	9a 07       	cpc	r25, r26
    2290:	09 f4       	brne	.+2      	; 0x2294 <can_handler+0x104c>
    2292:	b1 cf       	rjmp	.-158    	; 0x21f6 <can_handler+0xfae>
    2294:	78 f4       	brcc	.+30     	; 0x22b4 <can_handler+0x106c>
    2296:	88 3b       	cpi	r24, 0xB8	; 184
    2298:	e3 e0       	ldi	r30, 0x03	; 3
    229a:	9e 07       	cpc	r25, r30
    229c:	09 f4       	brne	.+2      	; 0x22a0 <can_handler+0x1058>
    229e:	ab cf       	rjmp	.-170    	; 0x21f6 <can_handler+0xfae>
    22a0:	8e 39       	cpi	r24, 0x9E	; 158
    22a2:	f5 e0       	ldi	r31, 0x05	; 5
    22a4:	9f 07       	cpc	r25, r31
    22a6:	09 f4       	brne	.+2      	; 0x22aa <can_handler+0x1062>
    22a8:	7e cf       	rjmp	.-260    	; 0x21a6 <can_handler+0xf5e>
    22aa:	85 35       	cpi	r24, 0x55	; 85
    22ac:	93 40       	sbci	r25, 0x03	; 3
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <can_handler+0x106a>
    22b0:	84 cf       	rjmp	.-248    	; 0x21ba <can_handler+0xf72>
    22b2:	a1 cf       	rjmp	.-190    	; 0x21f6 <can_handler+0xfae>
    22b4:	85 32       	cpi	r24, 0x25	; 37
    22b6:	36 e0       	ldi	r19, 0x06	; 6
    22b8:	93 07       	cpc	r25, r19
    22ba:	09 f4       	brne	.+2      	; 0x22be <can_handler+0x1076>
    22bc:	9c cf       	rjmp	.-200    	; 0x21f6 <can_handler+0xfae>
    22be:	83 33       	cpi	r24, 0x33	; 51
    22c0:	a6 e0       	ldi	r26, 0x06	; 6
    22c2:	9a 07       	cpc	r25, r26
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <can_handler+0x1080>
    22c6:	97 cf       	rjmp	.-210    	; 0x21f6 <can_handler+0xfae>
    22c8:	8c 3e       	cpi	r24, 0xEC	; 236
    22ca:	95 40       	sbci	r25, 0x05	; 5
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <can_handler+0x1088>
    22ce:	93 cf       	rjmp	.-218    	; 0x21f6 <can_handler+0xfae>
    22d0:	74 cf       	rjmp	.-280    	; 0x21ba <can_handler+0xf72>
					skip_5bc = 5;
					}
			
					frame = saved_5bc_frame;
				}
				if( My_Leaf == MY_LEAF_2014 )
    22d2:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <My_Leaf>
    22d6:	81 30       	cpi	r24, 0x01	; 1
    22d8:	09 f4       	brne	.+2      	; 0x22dc <can_handler+0x1094>
    22da:	4e cd       	rjmp	.-1380   	; 0x1d78 <can_handler+0xb30>
    22dc:	6e cf       	rjmp	.-292    	; 0x21ba <can_handler+0xf72>
		}
		if(flag2 > 0){ PORTB.OUTSET = (1 << 1); }
		if(flag & 0xE0){ can_bit_modify(MCP_REG_CANINTF, (flag & 0xE0), 0x00, can_bus);	}
	}
	can_busy = 0;
}
    22de:	2b 96       	adiw	r28, 0x0b	; 11
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	df 90       	pop	r13
    22f2:	cf 90       	pop	r12
    22f4:	bf 90       	pop	r11
    22f6:	af 90       	pop	r10
    22f8:	08 95       	ret

000022fa <__vector_64>:
	check_can2();
	check_can3();
}

//can1 interrupt
ISR(PORTD_INT0_vect){
    22fa:	1f 92       	push	r1
    22fc:	0f 92       	push	r0
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	0f 92       	push	r0
    2302:	11 24       	eor	r1, r1
    2304:	2f 93       	push	r18
    2306:	3f 93       	push	r19
    2308:	4f 93       	push	r20
    230a:	5f 93       	push	r21
    230c:	6f 93       	push	r22
    230e:	7f 93       	push	r23
    2310:	8f 93       	push	r24
    2312:	9f 93       	push	r25
    2314:	af 93       	push	r26
    2316:	bf 93       	push	r27
    2318:	ef 93       	push	r30
    231a:	ff 93       	push	r31
	can_busy = 1;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <can_busy>
	can_handler(1);
    2322:	0e 94 24 09 	call	0x1248	; 0x1248 <can_handler>
}
    2326:	ff 91       	pop	r31
    2328:	ef 91       	pop	r30
    232a:	bf 91       	pop	r27
    232c:	af 91       	pop	r26
    232e:	9f 91       	pop	r25
    2330:	8f 91       	pop	r24
    2332:	7f 91       	pop	r23
    2334:	6f 91       	pop	r22
    2336:	5f 91       	pop	r21
    2338:	4f 91       	pop	r20
    233a:	3f 91       	pop	r19
    233c:	2f 91       	pop	r18
    233e:	0f 90       	pop	r0
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	0f 90       	pop	r0
    2344:	1f 90       	pop	r1
    2346:	18 95       	reti

00002348 <__vector_65>:

//can2 interrupt
ISR(PORTD_INT1_vect){
    2348:	1f 92       	push	r1
    234a:	0f 92       	push	r0
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	0f 92       	push	r0
    2350:	11 24       	eor	r1, r1
    2352:	2f 93       	push	r18
    2354:	3f 93       	push	r19
    2356:	4f 93       	push	r20
    2358:	5f 93       	push	r21
    235a:	6f 93       	push	r22
    235c:	7f 93       	push	r23
    235e:	8f 93       	push	r24
    2360:	9f 93       	push	r25
    2362:	af 93       	push	r26
    2364:	bf 93       	push	r27
    2366:	ef 93       	push	r30
    2368:	ff 93       	push	r31
	can_busy = 1;
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <can_busy>
	can_handler(2);
    2370:	82 e0       	ldi	r24, 0x02	; 2
    2372:	0e 94 24 09 	call	0x1248	; 0x1248 <can_handler>
}
    2376:	ff 91       	pop	r31
    2378:	ef 91       	pop	r30
    237a:	bf 91       	pop	r27
    237c:	af 91       	pop	r26
    237e:	9f 91       	pop	r25
    2380:	8f 91       	pop	r24
    2382:	7f 91       	pop	r23
    2384:	6f 91       	pop	r22
    2386:	5f 91       	pop	r21
    2388:	4f 91       	pop	r20
    238a:	3f 91       	pop	r19
    238c:	2f 91       	pop	r18
    238e:	0f 90       	pop	r0
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	0f 90       	pop	r0
    2394:	1f 90       	pop	r1
    2396:	18 95       	reti

00002398 <__vector_2>:

//can3 receive interrupt
ISR(PORTC_INT0_vect){
    2398:	1f 92       	push	r1
    239a:	0f 92       	push	r0
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	0f 92       	push	r0
    23a0:	11 24       	eor	r1, r1
    23a2:	2f 93       	push	r18
    23a4:	3f 93       	push	r19
    23a6:	4f 93       	push	r20
    23a8:	5f 93       	push	r21
    23aa:	6f 93       	push	r22
    23ac:	7f 93       	push	r23
    23ae:	8f 93       	push	r24
    23b0:	9f 93       	push	r25
    23b2:	af 93       	push	r26
    23b4:	bf 93       	push	r27
    23b6:	ef 93       	push	r30
    23b8:	ff 93       	push	r31
	can_busy = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <can_busy>
	can_handler(3);
    23c0:	83 e0       	ldi	r24, 0x03	; 3
    23c2:	0e 94 24 09 	call	0x1248	; 0x1248 <can_handler>
}
    23c6:	ff 91       	pop	r31
    23c8:	ef 91       	pop	r30
    23ca:	bf 91       	pop	r27
    23cc:	af 91       	pop	r26
    23ce:	9f 91       	pop	r25
    23d0:	8f 91       	pop	r24
    23d2:	7f 91       	pop	r23
    23d4:	6f 91       	pop	r22
    23d6:	5f 91       	pop	r21
    23d8:	4f 91       	pop	r20
    23da:	3f 91       	pop	r19
    23dc:	2f 91       	pop	r18
    23de:	0f 90       	pop	r0
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	0f 90       	pop	r0
    23e4:	1f 90       	pop	r1
    23e6:	18 95       	reti

000023e8 <__udivmodhi4>:
    23e8:	aa 1b       	sub	r26, r26
    23ea:	bb 1b       	sub	r27, r27
    23ec:	51 e1       	ldi	r21, 0x11	; 17
    23ee:	07 c0       	rjmp	.+14     	; 0x23fe <__udivmodhi4_ep>

000023f0 <__udivmodhi4_loop>:
    23f0:	aa 1f       	adc	r26, r26
    23f2:	bb 1f       	adc	r27, r27
    23f4:	a6 17       	cp	r26, r22
    23f6:	b7 07       	cpc	r27, r23
    23f8:	10 f0       	brcs	.+4      	; 0x23fe <__udivmodhi4_ep>
    23fa:	a6 1b       	sub	r26, r22
    23fc:	b7 0b       	sbc	r27, r23

000023fe <__udivmodhi4_ep>:
    23fe:	88 1f       	adc	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	5a 95       	dec	r21
    2404:	a9 f7       	brne	.-22     	; 0x23f0 <__udivmodhi4_loop>
    2406:	80 95       	com	r24
    2408:	90 95       	com	r25
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	08 95       	ret

00002410 <__divmodhi4>:
    2410:	97 fb       	bst	r25, 7
    2412:	07 2e       	mov	r0, r23
    2414:	16 f4       	brtc	.+4      	; 0x241a <__divmodhi4+0xa>
    2416:	00 94       	com	r0
    2418:	06 d0       	rcall	.+12     	; 0x2426 <__divmodhi4_neg1>
    241a:	77 fd       	sbrc	r23, 7
    241c:	08 d0       	rcall	.+16     	; 0x242e <__divmodhi4_neg2>
    241e:	e4 df       	rcall	.-56     	; 0x23e8 <__udivmodhi4>
    2420:	07 fc       	sbrc	r0, 7
    2422:	05 d0       	rcall	.+10     	; 0x242e <__divmodhi4_neg2>
    2424:	3e f4       	brtc	.+14     	; 0x2434 <__divmodhi4_exit>

00002426 <__divmodhi4_neg1>:
    2426:	90 95       	com	r25
    2428:	81 95       	neg	r24
    242a:	9f 4f       	sbci	r25, 0xFF	; 255
    242c:	08 95       	ret

0000242e <__divmodhi4_neg2>:
    242e:	70 95       	com	r23
    2430:	61 95       	neg	r22
    2432:	7f 4f       	sbci	r23, 0xFF	; 255

00002434 <__divmodhi4_exit>:
    2434:	08 95       	ret

00002436 <__umulhisi3>:
    2436:	a2 9f       	mul	r26, r18
    2438:	b0 01       	movw	r22, r0
    243a:	b3 9f       	mul	r27, r19
    243c:	c0 01       	movw	r24, r0
    243e:	a3 9f       	mul	r26, r19
    2440:	70 0d       	add	r23, r0
    2442:	81 1d       	adc	r24, r1
    2444:	11 24       	eor	r1, r1
    2446:	91 1d       	adc	r25, r1
    2448:	b2 9f       	mul	r27, r18
    244a:	70 0d       	add	r23, r0
    244c:	81 1d       	adc	r24, r1
    244e:	11 24       	eor	r1, r1
    2450:	91 1d       	adc	r25, r1
    2452:	08 95       	ret

00002454 <_exit>:
    2454:	f8 94       	cli

00002456 <__stop_program>:
    2456:	ff cf       	rjmp	.-2      	; 0x2456 <__stop_program>
